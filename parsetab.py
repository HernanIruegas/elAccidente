
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'FALSE TRUE and assign bool colon comma cte_f cte_i cte_str divide do else equals float freq func globalFunc greater greaterEquals id if int kmeans kurt lCurlyBracket lParenthesis lSqrBracket las lessThan lessThanEquals mbm mean mean_abs_err mean_sqr_err median median_abs_err minus mode not notEquals ols or plus print prob program rCurlyBracket rParenthesis rSqrBracket return rid scan semicolon skew start stddev string times tseries var variance void while\n\tPROGRAM : program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS\n\t\n\tPROGRAM_A : VARS PROGRAM_A\n\t\t\t| METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tPROGRAM_B : METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tVARS : var VARS_A\n\t\n\tVARS_A : TYPE colon VARS_B semicolon VARS_C\n\t\n\tVARS_B : SIMPLE\n\t\t| LIST\n\t\n\tVARS_C : VARS_A\n\t\t\t| empty\n\t\n\tSIMPLE : id SAVE_VAR SIMPLE_A\n\t\n\tSIMPLE_A : comma SIMPLE\n\t\t\t| empty\n\t\n\tLIST : id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A\n\t\n\tLIST_A : comma LIST\n\t\t| empty\n\t\n\tEXPLOG : EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\t| not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\n\tEXPLOG_A : and EXPLOG\n\t\t| or EXPLOG\n\t\t| empty\n\t\n\tEXPRESSION : EXP \n\t\t\t\t| EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP\n\t\n\tEXPRESSION_A : greater PUSH_STACK_OPERATORS\n\t\t\t\t| lessThan PUSH_STACK_OPERATORS\n\t\t\t\t| greaterEquals PUSH_STACK_OPERATORS\n\t\t\t\t| lessThanEquals PUSH_STACK_OPERATORS\n\t\t\t\t| equals PUSH_STACK_OPERATORS\n\t\t\t\t| notEquals PUSH_STACK_OPERATORS\n\t\n\tEXP : TERM SOLVE_OPERATION_SUM_MINUS\n\t\t| TERM SOLVE_OPERATION_SUM_MINUS EXP_A \n\t\n\tEXP_A : plus PUSH_STACK_OPERATORS EXP\n\t\t| minus PUSH_STACK_OPERATORS EXP\n\t\n\tTERM : FACTOR SOLVE_OPERATION_TIMES_DIVIDE\n\t\t| FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A \n\t\n\tTERM_A : times PUSH_STACK_OPERATORS TERM\n\t\t\t| divide PUSH_STACK_OPERATORS TERM\n\t\n\tFACTOR : lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS\n\t\t\t| VARCONSTAUX\n\t\n\tVARCONSTAUX : id PUSH_STACK_OPERANDS ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS\n\t\t| cte_f PUSH_STACK_OPERANDS\n\t\n\tTYPE : int SAVE_TYPE\n\t\t| float SAVE_TYPE\n\t\t| string SAVE_TYPE\n\t\t| bool SAVE_TYPE\n\t\n\tBLOCK : lCurlyBracket BLOCK_A rCurlyBracket\n\t\n\tBLOCK_A : STATEMENT BLOCK_A\n\t\t\t| empty\n\t\n\tSTATEMENT : ASSIGNMENT\n\t\t\t| CONDITION\n\t\t\t| WRITE\n\t\t\t| PRE_CONDITIONAL_LOOP\n\t\t\t| POST_CONDITIONAL_LOOP\n\t\t\t| METHODCALL\n\t\t\t| READ\n\t\t\t| STATMETHODS\n\t\t\t| RETURN \n\t\n\tASSIGNMENT : id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon \n\t\n\tREAD : scan lParenthesis VARCTE READ_A rParenthesis\n\t\n\tREAD_A : comma\n\t\t| empty\n\t\n\tISLIST : lSqrBracket EXP rSqrBracket\n\t\t\t| empty \n\t\n\tTYPEMETHOD : TYPE\n\t\t\t| void SAVE_TYPE\n\t\n\tCONDITION : if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL\n\t\n\tCONDITION_A : else GENERATE_GOTO_CONDITIONAL BLOCK\n\t\t\t\t| empty\n\t\n\tWRITE : print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon\n\t\n\tWRITE_A : comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A\n\t\t| empty\n\t\n\tVARCTE : id ISLIST \n\t\t| cte_i \n\t\t| cte_f \n\t\t| cte_str \n\t\t| BOOLEAN\n\t\n\tMETHOD : func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE\n\t\n\tMETHOD_A : PARAMS\n\t\t\t| empty\t\t\n\t\n\tPARAMS : TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A \n\t\n\tPARAMS_A : comma PARAMS\n\t\t| empty\n\t\n\tPRE_CONDITIONAL_LOOP : while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP\n\t\n\tPOST_CONDITIONAL_LOOP : do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP\n\t\n\tMETHODCALL : id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL\n\t\n\tMETHODCALL_A : comma EXP\n\t\t\t\t| empty\n\t\n\tRETURN : return EXPLOG semicolon\n\t\n\tBOOLEAN : FALSE\n\t\t\t| TRUE\n\t\n\tSTATMETHODS : ORDINARY_LEAST_SQUARES\n\t\t\t\t| LASSO\n\t\t\t\t| RIDGE\n\t\t\t\t| K_MEANS\n\t\t\t\t| MINI_BATCH_MEANS\n\t\t\t\t| TIME_SERIES_SPLIT\n\t\t\t\t| MEAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN_SQUARED_ERROR\n\t\t\t\t| MEDIAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN\n\t\t\t\t| MODE\n\t\t\t\t| MEDIAN\n\t\t\t\t| PROBABILITY\n\t\t\t\t| FREQUENCY\n\t\t\t\t| VARIANCE\n\t\t\t\t| STANDARD_DEVIATION\n\t\t\t\t| SKEWNESS\n\t\t\t\t| KURTOSI\n\t\n\tORDINARY_LEAST_SQUARES : ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon\n\t\n\tLASSO : las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon\n\t\n\tRIDGE : rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon\n\t\n\tK_MEANS : kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon\n\t\n\tMINI_BATCH_MEANS : mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tTIME_SERIES_SPLIT : tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tMEAN_ABSOLUTE_ERROR : mean_abs_err lParenthesis id comma id rParenthesis semicolon\n\t\n\tMEAN_SQUARED_ERROR : mean_sqr_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEDIAN_ABSOLUTE_ERROR : median_abs_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEAN : mean lParenthesis id MEAN_A rParenthesis semicolon\n\t\n\tMEAN_A : comma id MEAN_A\n\t\t| empty\n\t\n\tMODE : mode lParenthesis id MODE_A rParenthesis semicolon\n\t\n\tMODE_A : comma id MODE_A\n\t\t| empty\n\t\n\tMEDIAN : median lParenthesis id MEDIAN_A rParenthesis semicolon\n\t\n\tMEDIAN_A : comma id MEDIAN_A\n\t\t| empty\n\t\n\tPROBABILITY : prob lParenthesis id PROBABILITY_A rParenthesis semicolon\n\t\n\tPROBABILITY_A : comma id PROBABILITY_A\n\t\t| empty\n\t\n\tFREQUENCY : freq lParenthesis id FREQUENCY_A rParenthesis semicolon\n\t\n\tFREQUENCY_A : comma id FREQUENCY_A\n\t\t| empty\n\t\n\tVARIANCE : variance lParenthesis id VARIANCE_A rParenthesis semicolon\n\t\n\tVARIANCE_A : comma id VARIANCE_A\n\t\t| empty\n\t\n\tSTANDARD_DEVIATION : stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon\n\t\n\tSTANDARD_DEVIATION_A : comma id STANDARD_DEVIATION_A\n\t\t| empty\n\t\n\tSKEWNESS : skew lParenthesis id SKEWNESS_A rParenthesis semicolon\n\t\n\tSKEWNESS_A : comma id SKEWNESS_A\n\t\t| empty\n\t\n\tKURTOSI : kurt  lParenthesis id KURTOSI_A rParenthesis semicolon\n\t\n\tKURTOSI_A : comma id KURTOSI_A\n\t\t| empty\n\t\n    empty :\n    \n\tSTART_FUNCTION : empty\n\t\n\tSAVE_TYPE : empty\n\t\n\tSAVE_VAR : empty\n\t\n\tSAVE_ARRAY : empty\n\t\n\tINCREMENT_PARAM_COUNTER : empty\n\t\n\tSAVE_COUNTER_PARAM : empty\n\t\n\tSAVE_COUNTER_QUAD : empty\n\t\n\tEND_PROCEDURE : empty\n\t\n\tSAVE_PARAM_TYPE : empty\n\t\n\tVALIDATE_FUNCTION_NAME : empty\n\t\n    ERA : empty\n    \n    VALIDATE_PARAMETER : empty\n    \n\tVALIDATE_METHOD_CALL : empty\n\t\n\tPUSH_STACK_OPERANDS : empty\n\t\n\tPUSH_STACK_OPERATORS : empty\n\t\n\tPOP_STACK_OPERATORS : empty\n\t\n\tSOLVE_OPERATION_SUM_MINUS : empty\n\t\n\tSOLVE_OPERATION_TIMES_DIVIDE : empty\n\t\n\tSOLVE_OPERATION_RELATIONSHIP : empty\n\t\n\tSOLVE_OPERATION_LOGIC : empty\n\t\n\tSOLVE_OPERATION_ASSIGNMENT : empty\n\t\n\tGENERATE_GOTOF_CONDITIONAL : empty\n\t\n\tSOLVE_OPERATION_CONDITIONAL : empty\n\t\n\tGENERATE_GOTO_CONDITIONAL : empty\n\t\n\tPUSH_STACK_JUMPS : empty\n\t\n\tSOLVE_OPERATION_PRE_CONDITIONAL_LOOP : empty\n\t\n\tSOLVE_OPERATION_POST_CONDITIONAL_LOOP : empty\n\t\n\tGENERATE_QUAD_PRINT : empty\n\t\n\tPRINTQUADS : empty\n\t'
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,51,67,68,134,],[0,-148,-1,-177,-49,]),'void':([2,9,10,11,12,13,15,17,18,19,20,21,31,46,53,54,55,134,307,355,356,],[3,-148,16,-148,-148,-4,29,-2,-148,-3,-6,-7,-5,-148,-8,-11,-12,-49,-148,-80,-156,]),'globalFunc':([3,4,5,],[-148,6,-150,]),'start':([5,16,30,],[-150,-148,39,]),'colon':([5,22,23,24,25,26,33,34,35,36,],[-150,32,-148,-148,-148,-148,-45,-46,-47,-48,]),'id':([5,23,24,25,26,27,28,29,32,33,34,35,36,38,48,52,57,66,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,134,139,140,144,147,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,183,193,195,196,199,200,201,202,203,204,205,210,211,232,238,239,255,256,257,258,259,260,262,263,265,266,268,269,270,273,274,275,276,278,281,284,287,290,293,296,299,302,310,315,318,319,323,324,325,326,363,375,376,377,378,383,385,387,389,391,393,395,397,399,405,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,438,439,440,441,447,448,449,452,460,471,472,473,474,480,481,482,490,495,496,497,498,506,508,513,515,520,522,],[-150,-148,-148,-148,-148,37,-67,-148,43,-45,-46,-47,-48,-68,59,81,125,133,81,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,59,-49,59,59,186,59,-148,212,213,214,59,59,59,218,219,220,221,222,223,224,225,226,227,228,229,59,59,-91,59,59,59,-148,-148,-148,-148,-148,-148,59,-163,306,-148,59,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,328,329,330,59,334,335,336,338,340,342,344,346,348,350,352,354,59,59,59,-62,59,59,59,59,-148,59,59,59,59,-121,-124,-127,-130,-133,-136,-139,-142,-145,59,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,59,59,-148,-70,-88,-161,59,59,59,59,59,59,-112,59,59,59,59,59,59,59,59,59,-114,59,-115,-116,-113,]),'semicolon':([6,7,8,40,41,42,43,47,49,56,58,59,61,62,124,125,126,127,128,129,130,145,146,148,149,150,152,171,173,174,175,194,197,198,206,207,208,209,231,233,249,250,251,252,253,254,261,264,304,305,320,321,322,327,337,339,341,343,345,347,349,351,353,360,364,368,369,370,371,372,373,379,380,381,382,402,403,424,469,504,512,518,521,],[-148,9,-149,46,-9,-10,-148,-148,-151,-13,-15,-148,-148,-148,-14,-148,-148,-162,-148,-43,-44,193,-148,-24,-148,-148,-41,-42,-66,-148,-152,-148,-23,-148,-32,-165,-36,-166,-16,-18,-19,-168,-21,-22,-148,-148,-33,-37,-65,-17,-20,-25,-167,-148,383,385,387,389,391,393,395,397,399,-148,410,-34,-35,-38,-39,-40,-164,419,420,421,422,423,-169,440,474,508,515,520,522,]),'lParenthesis':([8,37,44,81,82,83,84,86,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,137,138,139,140,141,142,147,151,172,179,180,183,195,196,199,200,201,202,203,204,205,210,211,238,239,244,255,256,257,258,259,260,262,263,265,266,310,315,318,323,324,325,326,405,],[-149,-148,50,-148,139,140,-148,144,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,-148,-158,151,151,183,-173,151,-148,151,239,-159,151,151,151,151,-148,-148,-148,-148,-148,-148,151,-163,-148,151,318,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,151,151,151,151,151,151,151,151,]),'lCurlyBracket':([8,39,45,85,142,143,176,234,235,240,312,313,317,366,408,428,429,],[-149,-148,52,-148,-173,52,-148,52,-155,-148,52,-170,-148,52,-148,52,-172,]),'var':([9,11,21,46,53,54,55,],[14,14,-7,-148,-8,-11,-12,]),'func':([9,11,12,18,21,46,53,54,55,134,307,355,356,],[15,15,15,15,-7,-148,-8,-11,-12,-49,-148,-80,-156,]),'int':([14,15,46,50,358,],[23,23,23,23,23,]),'float':([14,15,46,50,358,511,],[24,24,24,24,24,514,]),'string':([14,15,46,50,271,272,358,462,488,503,505,],[25,25,25,25,331,332,25,467,492,507,509,]),'bool':([14,15,46,50,358,],[26,26,26,26,26,]),'lSqrBracket':([43,59,81,126,127,136,138,186,306,],[48,-148,-148,172,-162,172,-162,172,48,]),'comma':([43,47,49,59,61,62,125,126,127,128,129,130,133,148,149,150,152,171,173,174,175,177,182,185,186,187,188,189,190,191,192,206,207,208,209,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,236,237,241,242,248,254,261,264,304,308,309,311,321,322,327,328,329,330,331,332,338,340,342,344,346,348,350,352,354,361,362,365,368,369,370,371,372,373,411,414,415,416,417,418,442,443,444,445,446,454,455,456,457,458,465,466,467,468,475,476,477,478,483,484,485,486,491,492,493,494,499,501,502,507,510,514,],[-148,57,-151,-148,-148,-148,-148,-148,-162,-148,-43,-44,-148,-24,-148,-148,-41,-42,-66,232,-152,-148,-148,246,-148,-76,-77,-78,-79,-92,-93,-32,-165,-36,-166,268,269,270,271,272,273,274,275,276,278,281,284,287,290,293,296,299,302,-148,-157,315,-176,-75,-148,-33,-37,-65,358,-153,-148,-25,-167,-148,374,375,376,377,378,278,281,284,287,290,293,296,299,302,405,-160,-148,-34,-35,-38,-39,-40,-164,315,435,436,437,438,439,449,450,451,452,453,459,460,461,462,463,470,471,472,473,479,480,481,482,487,488,489,490,495,496,497,498,503,505,506,511,513,517,]),'cte_i':([48,105,139,140,144,147,151,156,157,158,172,183,195,196,199,200,201,202,203,204,205,210,211,238,239,255,256,257,258,259,260,262,263,265,266,273,310,315,318,323,324,325,326,375,376,377,378,405,438,439,449,452,460,471,472,473,480,481,482,490,495,496,497,498,506,513,],[61,61,61,61,187,61,-148,61,61,61,61,61,61,61,61,-148,-148,-148,-148,-148,-148,61,-163,-148,61,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'cte_f':([48,105,139,140,144,147,151,156,157,158,172,183,195,196,199,200,201,202,203,204,205,210,211,238,239,255,256,257,258,259,260,262,263,265,266,273,310,315,318,323,324,325,326,375,376,377,378,405,438,439,449,452,460,471,472,473,480,481,482,490,495,496,497,498,506,513,],[62,62,62,62,188,62,-148,62,62,62,62,62,62,62,62,-148,-148,-148,-148,-148,-148,62,-163,-148,62,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'rParenthesis':([49,50,59,61,62,63,64,65,126,127,129,130,131,132,133,146,148,149,150,152,171,173,177,181,182,185,186,187,188,189,190,191,192,194,197,198,206,207,208,209,221,222,223,224,225,226,227,228,229,236,237,241,242,243,245,246,247,248,249,250,251,252,253,254,261,264,267,277,279,280,282,283,285,286,288,289,291,292,294,295,297,298,300,301,303,304,308,309,311,314,316,320,321,322,327,333,334,335,336,338,340,342,344,346,348,350,352,354,357,359,361,362,365,367,368,369,370,371,372,373,384,386,388,390,392,394,396,398,400,401,404,406,411,425,430,464,500,509,516,519,],[-151,-148,-148,-148,-148,-148,-81,-82,-148,-162,-43,-44,176,-154,-148,-148,-24,-148,-148,-41,-42,-66,-148,240,-148,-148,-148,-76,-77,-78,-79,-92,-93,-148,-23,-148,-32,-165,-36,-166,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-157,-148,-176,317,319,-63,-64,-75,-19,-168,-21,-22,-148,-148,-33,-37,327,337,-123,339,-126,341,-129,343,-132,345,-135,347,-138,349,-141,351,-144,353,-147,-65,-148,-153,-148,364,-74,-20,-25,-167,-148,379,380,381,382,-148,-148,-148,-148,-148,-148,-148,-148,-148,-83,-85,-148,-160,-148,413,-34,-35,-38,-39,-40,-164,-122,-125,-128,-131,-134,-137,-140,-143,-146,-84,424,-90,-148,-89,-73,469,504,512,518,521,]),'rCurlyBracket':([52,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,135,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[-148,134,-148,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-50,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'if':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[82,82,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'print':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[83,83,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'while':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,184,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[84,84,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,244,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'do':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[85,85,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'scan':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[86,86,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'return':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[105,105,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'ols':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[106,106,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'las':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[107,107,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'rid':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[108,108,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kmeans':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[109,109,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mbm':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[110,110,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'tseries':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[111,111,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_abs_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[112,112,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_sqr_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[113,113,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median_abs_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[114,114,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[115,115,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mode':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[116,116,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[117,117,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'prob':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[118,118,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'freq':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[119,119,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'variance':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[120,120,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'stddev':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[121,121,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'skew':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[122,122,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kurt':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,134,193,319,363,383,385,387,389,391,393,395,397,399,407,409,410,412,413,419,420,421,422,423,426,427,431,432,433,434,440,441,447,448,474,508,515,520,522,],[123,123,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'rSqrBracket':([59,60,61,62,126,127,129,130,149,150,152,171,173,206,207,208,209,230,261,264,304,327,368,369,370,371,372,373,],[-148,128,-148,-148,-148,-162,-43,-44,-148,-148,-41,-42,-66,-32,-165,-36,-166,304,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'times':([59,61,62,126,127,129,130,150,152,171,173,208,209,304,327,372,373,],[-148,-148,-148,-148,-162,-43,-44,-148,-41,-42,-66,265,-166,-65,-148,-40,-164,]),'divide':([59,61,62,126,127,129,130,150,152,171,173,208,209,304,327,372,373,],[-148,-148,-148,-148,-162,-43,-44,-148,-41,-42,-66,266,-166,-65,-148,-40,-164,]),'plus':([59,61,62,126,127,129,130,149,150,152,171,173,206,207,208,209,264,304,327,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,-148,-148,-41,-42,-66,262,-165,-36,-166,-37,-65,-148,-38,-39,-40,-164,]),'minus':([59,61,62,126,127,129,130,149,150,152,171,173,206,207,208,209,264,304,327,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,-148,-148,-41,-42,-66,263,-165,-36,-166,-37,-65,-148,-38,-39,-40,-164,]),'greater':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,200,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'lessThan':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,201,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'greaterEquals':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,202,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'lessThanEquals':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,203,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'equals':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,204,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'notEquals':([59,61,62,126,127,129,130,148,149,150,152,171,173,206,207,208,209,261,264,304,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,205,-148,-148,-41,-42,-66,-32,-165,-36,-166,-33,-37,-65,-148,-34,-35,-38,-39,-40,-164,]),'and':([59,61,62,126,127,129,130,146,148,149,150,152,171,173,198,206,207,208,209,254,261,264,304,321,322,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,195,-24,-148,-148,-41,-42,-66,195,-32,-165,-36,-166,-148,-33,-37,-65,-25,-167,-148,-34,-35,-38,-39,-40,-164,]),'or':([59,61,62,126,127,129,130,146,148,149,150,152,171,173,198,206,207,208,209,254,261,264,304,321,322,327,368,369,370,371,372,373,],[-148,-148,-148,-148,-162,-43,-44,196,-24,-148,-148,-41,-42,-66,196,-32,-165,-36,-166,-148,-33,-37,-65,-25,-167,-148,-34,-35,-38,-39,-40,-164,]),'assign':([81,136,138,173,178,304,],[-148,-148,-162,-66,238,-65,]),'not':([105,139,151,183,195,196,210,211,238,310,318,],[147,147,-148,147,147,147,147,-163,-148,147,147,]),'else':([134,363,],[-49,408,]),'cte_str':([144,],[189,]),'FALSE':([144,374,435,436,437,450,451,453,459,461,463,470,479,487,489,517,],[191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,]),'TRUE':([144,374,435,436,437,450,451,453,459,461,463,470,479,487,489,517,],[192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'SAVE_TYPE':([3,16,23,24,25,26,29,],[4,30,33,34,35,36,38,]),'empty':([3,6,9,11,12,16,18,23,24,25,26,29,37,39,43,46,47,50,51,52,59,61,62,63,70,81,84,85,125,126,128,133,136,137,146,149,150,151,174,176,177,182,185,186,194,198,200,201,202,203,204,205,221,222,223,224,225,226,227,228,229,236,238,240,241,253,254,262,263,265,266,307,308,311,317,327,338,340,342,344,346,348,350,352,354,360,361,363,365,407,408,411,412,413,440,],[5,8,13,13,20,5,20,5,5,5,5,5,8,8,49,55,58,65,68,71,127,127,127,132,71,138,142,142,49,173,175,49,173,180,197,207,209,211,233,235,237,242,247,173,250,197,211,211,211,211,211,211,279,282,285,288,291,294,297,300,303,309,211,313,316,250,322,211,211,211,211,356,359,362,313,373,279,282,285,288,291,294,297,300,303,403,406,409,242,427,429,316,432,434,448,]),'START_FUNCTION':([6,37,39,],[7,44,45,]),'PROGRAM_A':([9,11,],[10,17,]),'VARS':([9,11,],[11,11,]),'METHOD':([9,11,12,18,],[12,12,18,18,]),'PROGRAM_B':([12,18,],[19,31,]),'VARS_A':([14,46,],[21,54,]),'TYPE':([14,15,46,50,358,],[22,28,22,66,66,]),'TYPEMETHOD':([15,],[27,]),'VARS_B':([32,],[40,]),'SIMPLE':([32,57,],[41,124,]),'LIST':([32,232,],[42,305,]),'SAVE_VAR':([43,125,133,],[47,47,177,]),'BLOCK':([45,143,234,312,366,428,],[51,184,307,363,412,441,]),'VARS_C':([46,],[53,]),'SIMPLE_A':([47,],[56,]),'VARCONSTAUX':([48,105,139,140,147,156,157,158,172,183,195,196,199,210,239,273,310,315,318,323,324,325,326,375,376,377,378,405,438,439,449,452,460,471,472,473,480,481,482,490,495,496,497,498,506,513,],[60,152,152,152,152,215,216,217,152,152,152,152,152,152,152,333,152,152,152,152,152,152,152,415,416,417,418,152,445,446,454,457,465,476,477,478,484,485,486,494,499,500,501,502,510,516,]),'METHOD_A':([50,],[63,]),'PARAMS':([50,358,],[64,401,]),'PRINTQUADS':([51,],[67,]),'BLOCK_A':([52,70,],[69,135,]),'STATEMENT':([52,70,],[70,70,]),'ASSIGNMENT':([52,70,],[72,72,]),'CONDITION':([52,70,],[73,73,]),'WRITE':([52,70,],[74,74,]),'PRE_CONDITIONAL_LOOP':([52,70,],[75,75,]),'POST_CONDITIONAL_LOOP':([52,70,],[76,76,]),'METHODCALL':([52,70,],[77,77,]),'READ':([52,70,],[78,78,]),'STATMETHODS':([52,70,],[79,79,]),'RETURN':([52,70,],[80,80,]),'ORDINARY_LEAST_SQUARES':([52,70,],[87,87,]),'LASSO':([52,70,],[88,88,]),'RIDGE':([52,70,],[89,89,]),'K_MEANS':([52,70,],[90,90,]),'MINI_BATCH_MEANS':([52,70,],[91,91,]),'TIME_SERIES_SPLIT':([52,70,],[92,92,]),'MEAN_ABSOLUTE_ERROR':([52,70,],[93,93,]),'MEAN_SQUARED_ERROR':([52,70,],[94,94,]),'MEDIAN_ABSOLUTE_ERROR':([52,70,],[95,95,]),'MEAN':([52,70,],[96,96,]),'MODE':([52,70,],[97,97,]),'MEDIAN':([52,70,],[98,98,]),'PROBABILITY':([52,70,],[99,99,]),'FREQUENCY':([52,70,],[100,100,]),'VARIANCE':([52,70,],[101,101,]),'STANDARD_DEVIATION':([52,70,],[102,102,]),'SKEWNESS':([52,70,],[103,103,]),'KURTOSI':([52,70,],[104,104,]),'PUSH_STACK_OPERANDS':([59,61,62,81,],[126,129,130,136,]),'SAVE_COUNTER_PARAM':([63,],[131,]),'VALIDATE_FUNCTION_NAME':([81,],[137,]),'PUSH_STACK_JUMPS':([84,85,],[141,143,]),'EXPLOG':([105,139,183,195,196,210,310,318,],[145,181,243,251,252,267,360,367,]),'EXPRESSION':([105,139,140,147,183,195,196,210,310,315,318,],[146,146,182,198,146,146,146,146,146,365,146,]),'EXP':([105,139,140,147,172,183,195,196,199,210,239,310,315,318,323,324,405,],[148,148,148,148,230,148,148,148,254,148,311,148,148,148,368,369,425,]),'TERM':([105,139,140,147,172,183,195,196,199,210,239,310,315,318,323,324,325,326,405,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,370,371,149,]),'FACTOR':([105,139,140,147,172,183,195,196,199,210,239,310,315,318,323,324,325,326,405,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'ISLIST':([126,136,186,],[171,178,248,]),'SAVE_ARRAY':([128,],[174,]),'ERA':([137,],[179,]),'VARCTE':([144,],[185,]),'BOOLEAN':([144,374,435,436,437,450,451,453,459,461,463,470,479,487,489,517,],[190,414,442,443,444,455,456,458,464,466,468,475,483,491,493,519,]),'EXPLOG_A':([146,198,],[194,253,]),'EXPRESSION_A':([148,],[199,]),'SOLVE_OPERATION_SUM_MINUS':([149,],[206,]),'SOLVE_OPERATION_TIMES_DIVIDE':([150,],[208,]),'PUSH_STACK_OPERATORS':([151,200,201,202,203,204,205,238,262,263,265,266,],[210,255,256,257,258,259,260,310,323,324,325,326,]),'LIST_A':([174,],[231,]),'SAVE_COUNTER_QUAD':([176,],[234,]),'SAVE_PARAM_TYPE':([177,],[236,]),'GENERATE_QUAD_PRINT':([182,365,],[241,411,]),'READ_A':([185,],[245,]),'SOLVE_OPERATION_LOGIC':([194,253,],[249,320,]),'EXP_A':([206,],[261,]),'TERM_A':([208,],[264,]),'MEAN_A':([221,338,],[277,384,]),'MODE_A':([222,340,],[280,386,]),'MEDIAN_A':([223,342,],[283,388,]),'PROBABILITY_A':([224,344,],[286,390,]),'FREQUENCY_A':([225,346,],[289,392,]),'VARIANCE_A':([226,348,],[292,394,]),'STANDARD_DEVIATION_A':([227,350,],[295,396,]),'SKEWNESS_A':([228,352,],[298,398,]),'KURTOSI_A':([229,354,],[301,400,]),'INCREMENT_PARAM_COUNTER':([236,],[308,]),'GENERATE_GOTOF_CONDITIONAL':([240,317,],[312,366,]),'WRITE_A':([241,411,],[314,430,]),'SOLVE_OPERATION_RELATIONSHIP':([254,],[321,]),'END_PROCEDURE':([307,],[355,]),'PARAMS_A':([308,],[357,]),'VALIDATE_PARAMETER':([311,],[361,]),'POP_STACK_OPERATORS':([327,],[372,]),'SOLVE_OPERATION_ASSIGNMENT':([360,],[402,]),'METHODCALL_A':([361,],[404,]),'CONDITION_A':([363,],[407,]),'SOLVE_OPERATION_CONDITIONAL':([407,],[426,]),'GENERATE_GOTO_CONDITIONAL':([408,],[428,]),'SOLVE_OPERATION_PRE_CONDITIONAL_LOOP':([412,],[431,]),'SOLVE_OPERATION_POST_CONDITIONAL_LOOP':([413,],[433,]),'VALIDATE_METHOD_CALL':([440,],[447,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS','PROGRAM',13,'p_PROGRAM','parser.py',94),
  ('PROGRAM_A -> VARS PROGRAM_A','PROGRAM_A',2,'p_PROGRAM_A','parser.py',99),
  ('PROGRAM_A -> METHOD PROGRAM_B','PROGRAM_A',2,'p_PROGRAM_A','parser.py',100),
  ('PROGRAM_A -> empty','PROGRAM_A',1,'p_PROGRAM_A','parser.py',101),
  ('PROGRAM_B -> METHOD PROGRAM_B','PROGRAM_B',2,'p_PROGRAM_B','parser.py',106),
  ('PROGRAM_B -> empty','PROGRAM_B',1,'p_PROGRAM_B','parser.py',107),
  ('VARS -> var VARS_A','VARS',2,'p_VARS','parser.py',112),
  ('VARS_A -> TYPE colon VARS_B semicolon VARS_C','VARS_A',5,'p_VARS_A','parser.py',117),
  ('VARS_B -> SIMPLE','VARS_B',1,'p_VARS_B','parser.py',122),
  ('VARS_B -> LIST','VARS_B',1,'p_VARS_B','parser.py',123),
  ('VARS_C -> VARS_A','VARS_C',1,'p_VARS_C','parser.py',128),
  ('VARS_C -> empty','VARS_C',1,'p_VARS_C','parser.py',129),
  ('SIMPLE -> id SAVE_VAR SIMPLE_A','SIMPLE',3,'p_SIMPLE','parser.py',134),
  ('SIMPLE_A -> comma SIMPLE','SIMPLE_A',2,'p_SIMPLE_A','parser.py',139),
  ('SIMPLE_A -> empty','SIMPLE_A',1,'p_SIMPLE_A','parser.py',140),
  ('LIST -> id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A','LIST',6,'p_LIST','parser.py',145),
  ('LIST_A -> comma LIST','LIST_A',2,'p_LIST_A','parser.py',150),
  ('LIST_A -> empty','LIST_A',1,'p_LIST_A','parser.py',151),
  ('EXPLOG -> EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',3,'p_EXPLOG','parser.py',156),
  ('EXPLOG -> not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',4,'p_EXPLOG','parser.py',157),
  ('EXPLOG_A -> and EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',163),
  ('EXPLOG_A -> or EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',164),
  ('EXPLOG_A -> empty','EXPLOG_A',1,'p_EXPLOG_A','parser.py',165),
  ('EXPRESSION -> EXP','EXPRESSION',1,'p_EXPRESSION','parser.py',171),
  ('EXPRESSION -> EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP','EXPRESSION',4,'p_EXPRESSION','parser.py',172),
  ('EXPRESSION_A -> greater PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',178),
  ('EXPRESSION_A -> lessThan PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',179),
  ('EXPRESSION_A -> greaterEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',180),
  ('EXPRESSION_A -> lessThanEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',181),
  ('EXPRESSION_A -> equals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',182),
  ('EXPRESSION_A -> notEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',183),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS','EXP',2,'p_EXP','parser.py',188),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS EXP_A','EXP',3,'p_EXP','parser.py',189),
  ('EXP_A -> plus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',195),
  ('EXP_A -> minus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',196),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE','TERM',2,'p_TERM','parser.py',202),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A','TERM',3,'p_TERM','parser.py',203),
  ('TERM_A -> times PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',209),
  ('TERM_A -> divide PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',210),
  ('FACTOR -> lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS','FACTOR',5,'p_FACTOR','parser.py',216),
  ('FACTOR -> VARCONSTAUX','FACTOR',1,'p_FACTOR','parser.py',217),
  ('VARCONSTAUX -> id PUSH_STACK_OPERANDS ISLIST','VARCONSTAUX',3,'p_VARCONSTAUX','parser.py',224),
  ('VARCONSTAUX -> cte_i PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',225),
  ('VARCONSTAUX -> cte_f PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',226),
  ('TYPE -> int SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',232),
  ('TYPE -> float SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',233),
  ('TYPE -> string SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',234),
  ('TYPE -> bool SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',235),
  ('BLOCK -> lCurlyBracket BLOCK_A rCurlyBracket','BLOCK',3,'p_BLOCK','parser.py',240),
  ('BLOCK_A -> STATEMENT BLOCK_A','BLOCK_A',2,'p_BLOCK_A','parser.py',245),
  ('BLOCK_A -> empty','BLOCK_A',1,'p_BLOCK_A','parser.py',246),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','parser.py',251),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',252),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',253),
  ('STATEMENT -> PRE_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',254),
  ('STATEMENT -> POST_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',255),
  ('STATEMENT -> METHODCALL','STATEMENT',1,'p_STATEMENT','parser.py',256),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',257),
  ('STATEMENT -> STATMETHODS','STATEMENT',1,'p_STATEMENT','parser.py',258),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',259),
  ('ASSIGNMENT -> id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon','ASSIGNMENT',8,'p_ASSIGNMENT','parser.py',264),
  ('READ -> scan lParenthesis VARCTE READ_A rParenthesis','READ',5,'p_READ','parser.py',269),
  ('READ_A -> comma','READ_A',1,'p_READ_A','parser.py',274),
  ('READ_A -> empty','READ_A',1,'p_READ_A','parser.py',275),
  ('ISLIST -> lSqrBracket EXP rSqrBracket','ISLIST',3,'p_ISLIST','parser.py',280),
  ('ISLIST -> empty','ISLIST',1,'p_ISLIST','parser.py',281),
  ('TYPEMETHOD -> TYPE','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',286),
  ('TYPEMETHOD -> void SAVE_TYPE','TYPEMETHOD',2,'p_TYPEMETHOD','parser.py',287),
  ('CONDITION -> if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL','CONDITION',8,'p_CONDITION','parser.py',292),
  ('CONDITION_A -> else GENERATE_GOTO_CONDITIONAL BLOCK','CONDITION_A',3,'p_CONDITION_A','parser.py',297),
  ('CONDITION_A -> empty','CONDITION_A',1,'p_CONDITION_A','parser.py',298),
  ('WRITE -> print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon','WRITE',7,'p_WRITE','parser.py',303),
  ('WRITE_A -> comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A','WRITE_A',4,'p_WRITE_A','parser.py',308),
  ('WRITE_A -> empty','WRITE_A',1,'p_WRITE_A','parser.py',309),
  ('VARCTE -> id ISLIST','VARCTE',2,'p_VARCTE','parser.py',314),
  ('VARCTE -> cte_i','VARCTE',1,'p_VARCTE','parser.py',315),
  ('VARCTE -> cte_f','VARCTE',1,'p_VARCTE','parser.py',316),
  ('VARCTE -> cte_str','VARCTE',1,'p_VARCTE','parser.py',317),
  ('VARCTE -> BOOLEAN','VARCTE',1,'p_VARCTE','parser.py',318),
  ('METHOD -> func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE','METHOD',11,'p_METHOD','parser.py',323),
  ('METHOD_A -> PARAMS','METHOD_A',1,'p_METHOD_A','parser.py',328),
  ('METHOD_A -> empty','METHOD_A',1,'p_METHOD_A','parser.py',329),
  ('PARAMS -> TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A','PARAMS',6,'p_PARAMS','parser.py',334),
  ('PARAMS_A -> comma PARAMS','PARAMS_A',2,'p_PARAMS_A','parser.py',339),
  ('PARAMS_A -> empty','PARAMS_A',1,'p_PARAMS_A','parser.py',340),
  ('PRE_CONDITIONAL_LOOP -> while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','PRE_CONDITIONAL_LOOP',8,'p_PRE_CONDITIONAL_LOOP','parser.py',345),
  ('POST_CONDITIONAL_LOOP -> do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP','POST_CONDITIONAL_LOOP',8,'p_POST_CONDITIONAL_LOOP','parser.py',350),
  ('METHODCALL -> id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL','METHODCALL',10,'p_METHODCALL','parser.py',355),
  ('METHODCALL_A -> comma EXP','METHODCALL_A',2,'p_METHODCALL_A','parser.py',360),
  ('METHODCALL_A -> empty','METHODCALL_A',1,'p_METHODCALL_A','parser.py',361),
  ('RETURN -> return EXPLOG semicolon','RETURN',3,'p_RETURN','parser.py',366),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN','parser.py',371),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN','parser.py',372),
  ('STATMETHODS -> ORDINARY_LEAST_SQUARES','STATMETHODS',1,'p_STATMETHODS','parser.py',377),
  ('STATMETHODS -> LASSO','STATMETHODS',1,'p_STATMETHODS','parser.py',378),
  ('STATMETHODS -> RIDGE','STATMETHODS',1,'p_STATMETHODS','parser.py',379),
  ('STATMETHODS -> K_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',380),
  ('STATMETHODS -> MINI_BATCH_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',381),
  ('STATMETHODS -> TIME_SERIES_SPLIT','STATMETHODS',1,'p_STATMETHODS','parser.py',382),
  ('STATMETHODS -> MEAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',383),
  ('STATMETHODS -> MEAN_SQUARED_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',384),
  ('STATMETHODS -> MEDIAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',385),
  ('STATMETHODS -> MEAN','STATMETHODS',1,'p_STATMETHODS','parser.py',386),
  ('STATMETHODS -> MODE','STATMETHODS',1,'p_STATMETHODS','parser.py',387),
  ('STATMETHODS -> MEDIAN','STATMETHODS',1,'p_STATMETHODS','parser.py',388),
  ('STATMETHODS -> PROBABILITY','STATMETHODS',1,'p_STATMETHODS','parser.py',389),
  ('STATMETHODS -> FREQUENCY','STATMETHODS',1,'p_STATMETHODS','parser.py',390),
  ('STATMETHODS -> VARIANCE','STATMETHODS',1,'p_STATMETHODS','parser.py',391),
  ('STATMETHODS -> STANDARD_DEVIATION','STATMETHODS',1,'p_STATMETHODS','parser.py',392),
  ('STATMETHODS -> SKEWNESS','STATMETHODS',1,'p_STATMETHODS','parser.py',393),
  ('STATMETHODS -> KURTOSI','STATMETHODS',1,'p_STATMETHODS','parser.py',394),
  ('ORDINARY_LEAST_SQUARES -> ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon','ORDINARY_LEAST_SQUARES',15,'p_ORDINARY_LEAST_SQUARES','parser.py',399),
  ('LASSO -> las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon','LASSO',29,'p_LASSO','parser.py',404),
  ('RIDGE -> rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon','RIDGE',23,'p_RIDGE','parser.py',409),
  ('K_MEANS -> kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon','K_MEANS',25,'p_K_MEANS','parser.py',414),
  ('MINI_BATCH_MEANS -> mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','MINI_BATCH_MEANS',27,'p_MINI_BATCH_MEANS','parser.py',419),
  ('TIME_SERIES_SPLIT -> tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','TIME_SERIES_SPLIT',7,'p_TIME_SERIES_SPLIT','parser.py',424),
  ('MEAN_ABSOLUTE_ERROR -> mean_abs_err lParenthesis id comma id rParenthesis semicolon','MEAN_ABSOLUTE_ERROR',7,'p_MEAN_ABSOLUTE_ERROR','parser.py',429),
  ('MEAN_SQUARED_ERROR -> mean_sqr_err lParenthesis id comma id rParenthesis semicolon','MEAN_SQUARED_ERROR',7,'p_MEAN_SQUARED_ERROR','parser.py',434),
  ('MEDIAN_ABSOLUTE_ERROR -> median_abs_err lParenthesis id comma id rParenthesis semicolon','MEDIAN_ABSOLUTE_ERROR',7,'p_MEDIAN_ABSOLUTE_ERROR','parser.py',439),
  ('MEAN -> mean lParenthesis id MEAN_A rParenthesis semicolon','MEAN',6,'p_MEAN','parser.py',444),
  ('MEAN_A -> comma id MEAN_A','MEAN_A',3,'p_MEAN_A','parser.py',449),
  ('MEAN_A -> empty','MEAN_A',1,'p_MEAN_A','parser.py',450),
  ('MODE -> mode lParenthesis id MODE_A rParenthesis semicolon','MODE',6,'p_MODE','parser.py',455),
  ('MODE_A -> comma id MODE_A','MODE_A',3,'p_MODE_A','parser.py',460),
  ('MODE_A -> empty','MODE_A',1,'p_MODE_A','parser.py',461),
  ('MEDIAN -> median lParenthesis id MEDIAN_A rParenthesis semicolon','MEDIAN',6,'p_MEDIAN','parser.py',466),
  ('MEDIAN_A -> comma id MEDIAN_A','MEDIAN_A',3,'p_MEDIAN_A','parser.py',471),
  ('MEDIAN_A -> empty','MEDIAN_A',1,'p_MEDIAN_A','parser.py',472),
  ('PROBABILITY -> prob lParenthesis id PROBABILITY_A rParenthesis semicolon','PROBABILITY',6,'p_PROBABILITY','parser.py',477),
  ('PROBABILITY_A -> comma id PROBABILITY_A','PROBABILITY_A',3,'p_PROBABILITY_A','parser.py',482),
  ('PROBABILITY_A -> empty','PROBABILITY_A',1,'p_PROBABILITY_A','parser.py',483),
  ('FREQUENCY -> freq lParenthesis id FREQUENCY_A rParenthesis semicolon','FREQUENCY',6,'p_FREQUENCY','parser.py',488),
  ('FREQUENCY_A -> comma id FREQUENCY_A','FREQUENCY_A',3,'p_FREQUENCY_A','parser.py',493),
  ('FREQUENCY_A -> empty','FREQUENCY_A',1,'p_FREQUENCY_A','parser.py',494),
  ('VARIANCE -> variance lParenthesis id VARIANCE_A rParenthesis semicolon','VARIANCE',6,'p_VARIANCE','parser.py',499),
  ('VARIANCE_A -> comma id VARIANCE_A','VARIANCE_A',3,'p_VARIANCE_A','parser.py',504),
  ('VARIANCE_A -> empty','VARIANCE_A',1,'p_VARIANCE_A','parser.py',505),
  ('STANDARD_DEVIATION -> stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon','STANDARD_DEVIATION',6,'p_STANDARD_DEVIATION','parser.py',510),
  ('STANDARD_DEVIATION_A -> comma id STANDARD_DEVIATION_A','STANDARD_DEVIATION_A',3,'p_STANDARD_DEVIATION_A','parser.py',515),
  ('STANDARD_DEVIATION_A -> empty','STANDARD_DEVIATION_A',1,'p_STANDARD_DEVIATION_A','parser.py',516),
  ('SKEWNESS -> skew lParenthesis id SKEWNESS_A rParenthesis semicolon','SKEWNESS',6,'p_SKEWNESS','parser.py',521),
  ('SKEWNESS_A -> comma id SKEWNESS_A','SKEWNESS_A',3,'p_SKEWNESS_A','parser.py',526),
  ('SKEWNESS_A -> empty','SKEWNESS_A',1,'p_SKEWNESS_A','parser.py',527),
  ('KURTOSI -> kurt lParenthesis id KURTOSI_A rParenthesis semicolon','KURTOSI',6,'p_KURTOSI','parser.py',532),
  ('KURTOSI_A -> comma id KURTOSI_A','KURTOSI_A',3,'p_KURTOSI_A','parser.py',537),
  ('KURTOSI_A -> empty','KURTOSI_A',1,'p_KURTOSI_A','parser.py',538),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',543),
  ('START_FUNCTION -> empty','START_FUNCTION',1,'p_START_FUNCTION','parser.py',581),
  ('SAVE_TYPE -> empty','SAVE_TYPE',1,'p_SAVE_TYPE','parser.py',598),
  ('SAVE_VAR -> empty','SAVE_VAR',1,'p_SAVE_VAR','parser.py',609),
  ('SAVE_ARRAY -> empty','SAVE_ARRAY',1,'p_SAVE_ARRAY','parser.py',640),
  ('INCREMENT_PARAM_COUNTER -> empty','INCREMENT_PARAM_COUNTER',1,'p_INCREMENT_PARAM_COUNTER','parser.py',662),
  ('SAVE_COUNTER_PARAM -> empty','SAVE_COUNTER_PARAM',1,'p_SAVE_COUNTER_PARAM','parser.py',673),
  ('SAVE_COUNTER_QUAD -> empty','SAVE_COUNTER_QUAD',1,'p_SAVE_COUNTER_QUAD','parser.py',685),
  ('END_PROCEDURE -> empty','END_PROCEDURE',1,'p_END_PROCEDURE','parser.py',699),
  ('SAVE_PARAM_TYPE -> empty','SAVE_PARAM_TYPE',1,'p_SAVE_PARAM_TYPE','parser.py',714),
  ('VALIDATE_FUNCTION_NAME -> empty','VALIDATE_FUNCTION_NAME',1,'p_VALIDATE_FUNCTION_NAME','parser.py',726),
  ('ERA -> empty','ERA',1,'p_ERA','parser.py',738),
  ('VALIDATE_PARAMETER -> empty','VALIDATE_PARAMETER',1,'p_VALIDATE_PARAMETER','parser.py',760),
  ('VALIDATE_METHOD_CALL -> empty','VALIDATE_METHOD_CALL',1,'p_VALIDATE_METHOD_CALL','parser.py',785),
  ('PUSH_STACK_OPERANDS -> empty','PUSH_STACK_OPERANDS',1,'p_PUSH_STACK_OPERANDS','parser.py',812),
  ('PUSH_STACK_OPERATORS -> empty','PUSH_STACK_OPERATORS',1,'p_PUSH_STACK_OPERATORS','parser.py',834),
  ('POP_STACK_OPERATORS -> empty','POP_STACK_OPERATORS',1,'p_POP_STACK_OPERATORS','parser.py',845),
  ('SOLVE_OPERATION_SUM_MINUS -> empty','SOLVE_OPERATION_SUM_MINUS',1,'p_SOLVE_OPERATION_SUM_MINUS','parser.py',893),
  ('SOLVE_OPERATION_TIMES_DIVIDE -> empty','SOLVE_OPERATION_TIMES_DIVIDE',1,'p_SOLVE_OPERATION_TIMES_DIVIDE','parser.py',907),
  ('SOLVE_OPERATION_RELATIONSHIP -> empty','SOLVE_OPERATION_RELATIONSHIP',1,'p_SOLVE_OPERATION_RELATIONSHIP','parser.py',921),
  ('SOLVE_OPERATION_LOGIC -> empty','SOLVE_OPERATION_LOGIC',1,'p_SOLVE_OPERATION_LOGIC','parser.py',934),
  ('SOLVE_OPERATION_ASSIGNMENT -> empty','SOLVE_OPERATION_ASSIGNMENT',1,'p_SOLVE_OPERATION_ASSIGNMENT','parser.py',980),
  ('GENERATE_GOTOF_CONDITIONAL -> empty','GENERATE_GOTOF_CONDITIONAL',1,'p_GENERATE_GOTOF_CONDITIONAL','parser.py',1006),
  ('SOLVE_OPERATION_CONDITIONAL -> empty','SOLVE_OPERATION_CONDITIONAL',1,'p_SOLVE_OPERATION_CONDITIONAL','parser.py',1035),
  ('GENERATE_GOTO_CONDITIONAL -> empty','GENERATE_GOTO_CONDITIONAL',1,'p_GENERATE_GOTO_CONDITIONAL','parser.py',1046),
  ('PUSH_STACK_JUMPS -> empty','PUSH_STACK_JUMPS',1,'p_PUSH_STACK_JUMPS','parser.py',1067),
  ('SOLVE_OPERATION_PRE_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_PRE_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','parser.py',1083),
  ('SOLVE_OPERATION_POST_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_POST_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_POST_CONDITIONAL_LOOP','parser.py',1110),
  ('GENERATE_QUAD_PRINT -> empty','GENERATE_QUAD_PRINT',1,'p_GENERATE_QUAD_PRINT','parser.py',1133),
  ('PRINTQUADS -> empty','PRINTQUADS',1,'p_PRINTQUADS','parser.py',1150),
]

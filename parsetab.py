
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'FALSE TRUE and assign bool colon comma cte_f cte_i cte_str divide do else equals float freq func globalFunc greater greaterEquals id if int kmeans kurt lCurlyBracket lParenthesis lSqrBracket las lessThan lessThanEquals mbm mean mean_abs_err mean_sqr_err median median_abs_err minus mode not notEquals ols or plus print prob program rCurlyBracket rParenthesis rSqrBracket return rid scan semicolon skew start stddev string times tseries var variance void while\n\tPROGRAM : program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A start BLOCK PRINTQUADS\n\t\n\tPROGRAM_A : VARS PROGRAM_A\n\t\t\t| METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tPROGRAM_B : METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tVARS : var VARS_A\n\t\n\tVARS_A : TYPE colon VARS_B semicolon VARS_C\n\t\n\tVARS_B : SIMPLE\n\t\t| LIST\n\t\n\tVARS_C : VARS_A\n\t\t\t| empty\n\t\n\tSIMPLE : id SAVE_VAR SIMPLE_A\n\t\n\tSIMPLE_A : comma SIMPLE\n\t\t\t| empty\n\t\n\tLIST : id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A\n\t\n\tLIST_A : comma LIST\n\t\t| empty\n\t\n\tEXPLOG : EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\t| not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\n\tEXPLOG_A : and EXPLOG\n\t\t| or EXPLOG\n\t\t| empty\n\t\n\tEXPRESSION : EXP \n\t\t\t\t| EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP\n\t\n\tEXPRESSION_A : greater PUSH_STACK_OPERATORS\n\t\t\t\t| lessThan PUSH_STACK_OPERATORS\n\t\t\t\t| greaterEquals PUSH_STACK_OPERATORS\n\t\t\t\t| lessThanEquals PUSH_STACK_OPERATORS\n\t\t\t\t| equals PUSH_STACK_OPERATORS\n\t\t\t\t| notEquals PUSH_STACK_OPERATORS\n\t\n\tEXP : TERM SOLVE_OPERATION_SUM_MINUS\n\t\t| TERM SOLVE_OPERATION_SUM_MINUS EXP_A \n\t\n\tEXP_A : plus PUSH_STACK_OPERATORS EXP\n\t\t| minus PUSH_STACK_OPERATORS EXP\n\t\n\tTERM : FACTOR SOLVE_OPERATION_TIMES_DIVIDE\n\t\t| FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A \n\t\n\tTERM_A : times PUSH_STACK_OPERATORS TERM\n\t\t\t| divide PUSH_STACK_OPERATORS TERM\n\t\n\tFACTOR : lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS\n\t\t\t| VARCONSTAUX\n\t\n\tVARCONSTAUX : id PUSH_STACK_OPERANDS ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS\n\t\t| cte_f PUSH_STACK_OPERANDS\n\t\n\tTYPE : int SAVE_TYPE\n\t\t| float SAVE_TYPE\n\t\t| string SAVE_TYPE\n\t\t| bool SAVE_TYPE\n\t\n\tBLOCK : lCurlyBracket BLOCK_A rCurlyBracket\n\t\n\tBLOCK_A : STATEMENT BLOCK_A\n\t\t\t| empty\n\t\n\tSTATEMENT : ASSIGNMENT\n\t\t\t| CONDITION\n\t\t\t| WRITE\n\t\t\t| PRE_CONDITIONAL_LOOP\n\t\t\t| POST_CONDITIONAL_LOOP\n\t\t\t| METHODCALL\n\t\t\t| READ\n\t\t\t| STATMETHODS\n\t\t\t| RETURN \n\t\n\tASSIGNMENT : id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon \n\t\n\tREAD : scan lParenthesis VARCTE READ_A rParenthesis\n\t\n\tREAD_A : comma\n\t\t| empty\n\t\n\tISLIST : lSqrBracket EXP rSqrBracket\n\t\t\t| empty \n\t\n\tTYPEMETHOD : TYPE\n\t\t\t| void SAVE_TYPE\n\t\n\tCONDITION : if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL\n\t\n\tCONDITION_A : else GENERATE_GOTO_CONDITIONAL BLOCK\n\t\t\t\t| empty\n\t\n\tWRITE : print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon\n\t\n\tWRITE_A : comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A\n\t\t| empty\n\t\n\tVARCTE : id ISLIST \n\t\t| cte_i \n\t\t| cte_f \n\t\t| cte_str \n\t\t| BOOLEAN\n\t\n\tMETHOD : func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE\n\t\n\tMETHOD_A : PARAMS\n\t\t\t| empty\t\t\n\t\n\tPARAMS : TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A \n\t\n\tPARAMS_A : comma PARAMS\n\t\t| empty\n\t\n\tPRE_CONDITIONAL_LOOP : while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP\n\t\n\tPOST_CONDITIONAL_LOOP : do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP\n\t\n\tMETHODCALL : id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL\n\t\n\tMETHODCALL_A : comma EXP\n\t\t\t\t| empty\n\t\n\tRETURN : return EXPLOG semicolon\n\t\n\tBOOLEAN : FALSE\n\t\t\t| TRUE\n\t\n\tSTATMETHODS : ORDINARY_LEAST_SQUARES\n\t\t\t\t| LASSO\n\t\t\t\t| RIDGE\n\t\t\t\t| K_MEANS\n\t\t\t\t| MINI_BATCH_MEANS\n\t\t\t\t| TIME_SERIES_SPLIT\n\t\t\t\t| MEAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN_SQUARED_ERROR\n\t\t\t\t| MEDIAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN\n\t\t\t\t| MODE\n\t\t\t\t| MEDIAN\n\t\t\t\t| PROBABILITY\n\t\t\t\t| FREQUENCY\n\t\t\t\t| VARIANCE\n\t\t\t\t| STANDARD_DEVIATION\n\t\t\t\t| SKEWNESS\n\t\t\t\t| KURTOSI\n\t\n\tORDINARY_LEAST_SQUARES : ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon\n\t\n\tLASSO : las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon\n\t\n\tRIDGE : rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon\n\t\n\tK_MEANS : kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon\n\t\n\tMINI_BATCH_MEANS : mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tTIME_SERIES_SPLIT : tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tMEAN_ABSOLUTE_ERROR : mean_abs_err lParenthesis id comma id rParenthesis semicolon\n\t\n\tMEAN_SQUARED_ERROR : mean_sqr_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEDIAN_ABSOLUTE_ERROR : median_abs_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEAN : mean lParenthesis id MEAN_A rParenthesis semicolon\n\t\n\tMEAN_A : comma id MEAN_A\n\t\t| empty\n\t\n\tMODE : mode lParenthesis id MODE_A rParenthesis semicolon\n\t\n\tMODE_A : comma id MODE_A\n\t\t| empty\n\t\n\tMEDIAN : median lParenthesis id MEDIAN_A rParenthesis semicolon\n\t\n\tMEDIAN_A : comma id MEDIAN_A\n\t\t| empty\n\t\n\tPROBABILITY : prob lParenthesis id PROBABILITY_A rParenthesis semicolon\n\t\n\tPROBABILITY_A : comma id PROBABILITY_A\n\t\t| empty\n\t\n\tFREQUENCY : freq lParenthesis id FREQUENCY_A rParenthesis semicolon\n\t\n\tFREQUENCY_A : comma id FREQUENCY_A\n\t\t| empty\n\t\n\tVARIANCE : variance lParenthesis id VARIANCE_A rParenthesis semicolon\n\t\n\tVARIANCE_A : comma id VARIANCE_A\n\t\t| empty\n\t\n\tSTANDARD_DEVIATION : stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon\n\t\n\tSTANDARD_DEVIATION_A : comma id STANDARD_DEVIATION_A\n\t\t| empty\n\t\n\tSKEWNESS : skew lParenthesis id SKEWNESS_A rParenthesis semicolon\n\t\n\tSKEWNESS_A : comma id SKEWNESS_A\n\t\t| empty\n\t\n\tKURTOSI : kurt  lParenthesis id KURTOSI_A rParenthesis semicolon\n\t\n\tKURTOSI_A : comma id KURTOSI_A\n\t\t| empty\n\t\n    empty :\n    \n\tSTART_FUNCTION : empty\n\t\n\tSAVE_TYPE : empty\n\t\n\tSAVE_VAR : empty\n\t\n\tSAVE_ARRAY : empty\n\t\n\tINCREMENT_PARAM_COUNTER : empty\n\t\n\tSAVE_COUNTER_PARAM : empty\n\t\n\tSAVE_COUNTER_QUAD : empty\n\t\n\tEND_PROCEDURE : empty\n\t\n\tSAVE_PARAM_TYPE : empty\n\t\n\tVALIDATE_FUNCTION_NAME : empty\n\t\n    ERA : empty\n    \n    VALIDATE_PARAMETER : empty\n    \n\tVALIDATE_METHOD_CALL : empty\n\t\n\tPUSH_STACK_OPERANDS : empty\n\t\n\tPUSH_STACK_OPERATORS : empty\n\t\n\tPOP_STACK_OPERATORS : empty\n\t\n\tSOLVE_OPERATION_SUM_MINUS : empty\n\t\n\tSOLVE_OPERATION_TIMES_DIVIDE : empty\n\t\n\tSOLVE_OPERATION_RELATIONSHIP : empty\n\t\n\tSOLVE_OPERATION_LOGIC : empty\n\t\n\tSOLVE_OPERATION_ASSIGNMENT : empty\n\t\n\tGENERATE_GOTOF_CONDITIONAL : empty\n\t\n\tSOLVE_OPERATION_CONDITIONAL : empty\n\t\n\tGENERATE_GOTO_CONDITIONAL : empty\n\t\n\tPUSH_STACK_JUMPS : empty\n\t\n\tSOLVE_OPERATION_PRE_CONDITIONAL_LOOP : empty\n\t\n\tSOLVE_OPERATION_POST_CONDITIONAL_LOOP : empty\n\t\n\tGENERATE_QUAD_PRINT : empty\n\t\n\tPRINTQUADS : empty\n\t'
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,30,40,41,102,],[0,-148,-1,-177,-49,]),'void':([2,15,],[3,29,]),'globalFunc':([3,4,5,],[-148,6,-150,]),'colon':([5,22,23,24,25,26,34,35,36,37,],[-150,33,-148,-148,-148,-148,-45,-46,-47,-48,]),'id':([5,23,24,25,26,27,28,29,31,33,34,35,36,37,39,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,102,107,108,112,115,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,148,154,164,166,167,170,171,172,173,174,175,176,181,182,209,215,216,218,234,235,236,237,238,239,241,242,244,245,248,249,250,253,254,255,256,258,261,264,267,270,273,276,279,282,290,296,299,300,304,305,306,307,343,355,356,357,358,363,365,367,369,371,373,375,377,379,382,391,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,429,430,436,437,444,445,446,449,457,468,469,470,471,477,478,479,487,492,493,494,495,503,505,510,512,517,519,],[-150,-148,-148,-148,-148,38,-67,-148,54,100,-45,-46,-47,-48,-68,54,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,121,-49,121,121,157,121,-148,187,188,189,121,121,121,193,194,195,196,197,198,199,200,201,202,203,204,121,121,121,-91,121,121,121,-148,-148,-148,-148,-148,-148,121,-163,285,289,-148,121,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,309,310,311,121,315,316,317,319,321,323,325,327,329,331,333,335,121,121,121,-62,121,121,121,121,-148,121,121,121,121,-121,-124,-127,-130,-133,-136,-139,-142,-145,410,121,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,121,121,-148,-70,-88,-161,121,121,121,121,121,121,-112,121,121,121,121,121,121,121,121,121,-114,121,-115,-116,-113,]),'semicolon':([6,7,8,97,98,99,100,113,114,116,117,118,120,121,122,123,143,145,149,165,168,169,177,178,179,180,183,184,185,186,208,210,228,229,230,231,232,233,240,243,247,284,285,286,291,301,302,303,308,318,320,322,324,326,328,330,332,334,336,337,340,344,348,349,350,351,352,353,359,360,361,362,381,383,388,389,409,415,466,501,509,515,518,],[-148,9,-149,142,-9,-10,-148,164,-148,-24,-148,-148,-41,-148,-148,-148,-148,-151,-66,-148,-23,-148,-32,-165,-36,-166,-148,-162,-43,-44,-13,-15,-19,-168,-21,-22,-148,-148,-33,-37,-42,-14,-148,-148,-65,-20,-25,-167,-148,363,365,367,369,371,373,375,377,379,-148,-152,-148,396,-34,-35,-38,-39,-40,-164,405,406,407,408,-16,-18,414,-169,-17,436,471,505,512,517,519,]),'lParenthesis':([8,38,54,55,56,57,59,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,101,105,106,107,108,109,110,115,119,148,150,151,154,166,167,170,171,172,173,174,175,176,181,182,216,218,223,234,235,236,237,238,239,241,242,244,245,290,296,299,304,305,306,307,391,],[-149,-148,-148,107,108,-148,112,119,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,146,-148,-158,119,119,154,-173,119,-148,119,218,-159,119,119,119,119,-148,-148,-148,-148,-148,-148,119,-163,-148,119,299,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,119,119,119,119,119,119,119,119,]),'var':([9,11,21,142,205,206,207,],[14,14,-7,-148,-8,-11,-12,]),'func':([9,11,12,18,21,102,142,205,206,207,411,431,432,],[15,15,15,15,-7,-49,-148,-8,-11,-12,-148,-80,-156,]),'start':([9,10,11,12,13,17,18,19,20,21,32,102,142,205,206,207,411,431,432,],[-148,16,-148,-148,-4,-2,-148,-3,-6,-7,-5,-49,-148,-8,-11,-12,-148,-80,-156,]),'int':([14,15,142,146,434,],[23,23,23,23,23,]),'float':([14,15,142,146,434,508,],[24,24,24,24,24,511,]),'string':([14,15,142,146,251,252,434,459,485,500,502,],[25,25,25,25,312,313,25,464,489,504,506,]),'bool':([14,15,142,146,434,],[26,26,26,26,26,]),'lCurlyBracket':([16,58,110,111,219,293,294,298,338,346,384,385,394,419,420,],[31,-148,-173,31,-148,31,-170,-148,-148,31,31,-155,-148,31,-172,]),'rCurlyBracket':([31,42,43,44,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,103,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[-148,102,-148,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-50,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'if':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[55,55,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'print':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[56,56,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'while':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,155,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[57,57,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,223,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'do':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[58,58,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'scan':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[59,59,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'return':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[78,78,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'ols':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[79,79,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'las':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[80,80,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'rid':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[81,81,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kmeans':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[82,82,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mbm':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[83,83,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'tseries':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[84,84,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_abs_err':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[85,85,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_sqr_err':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[86,86,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median_abs_err':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[87,87,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[88,88,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mode':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[89,89,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[90,90,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'prob':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[91,91,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'freq':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[92,92,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'variance':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[93,93,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'stddev':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[94,94,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'skew':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[95,95,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kurt':([31,43,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,102,164,300,343,363,365,367,369,371,373,375,377,379,393,395,396,398,399,405,406,407,408,414,417,418,422,423,424,425,436,437,444,445,471,505,512,517,519,],[96,96,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-171,-86,-174,-87,-175,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'lSqrBracket':([54,100,104,106,121,157,183,184,410,],[-148,144,148,-162,-148,148,148,-162,144,]),'assign':([54,104,106,147,149,291,],[-148,-148,-162,216,-66,-65,]),'not':([78,107,119,154,166,167,181,182,216,290,299,],[115,115,-148,115,115,115,115,-163,-148,115,115,]),'cte_i':([78,107,108,112,115,119,127,128,129,144,148,154,166,167,170,171,172,173,174,175,176,181,182,216,218,234,235,236,237,238,239,241,242,244,245,253,290,296,299,304,305,306,307,355,356,357,358,391,429,430,446,449,457,468,469,470,477,478,479,487,492,493,494,495,503,510,],[122,122,122,158,122,-148,122,122,122,122,122,122,122,122,122,-148,-148,-148,-148,-148,-148,122,-163,-148,122,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'cte_f':([78,107,108,112,115,119,127,128,129,144,148,154,166,167,170,171,172,173,174,175,176,181,182,216,218,234,235,236,237,238,239,241,242,244,245,253,290,296,299,304,305,306,307,355,356,357,358,391,429,430,446,449,457,468,469,470,477,478,479,487,492,493,494,495,503,510,],[123,123,123,159,123,-148,123,123,123,123,123,123,123,123,123,-148,-148,-148,-148,-148,-148,123,-163,-148,123,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'comma':([100,116,117,118,120,121,122,123,143,145,149,153,156,157,158,159,160,161,162,163,177,178,179,180,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,220,221,227,233,240,243,247,285,286,289,291,292,302,303,308,309,310,311,312,313,319,321,323,325,327,329,331,333,335,336,337,339,341,342,345,348,349,350,351,352,353,386,387,397,400,401,402,403,404,412,413,438,439,440,441,442,451,452,453,454,455,462,463,464,465,472,473,474,475,480,481,482,483,488,489,490,491,496,498,499,504,507,511,],[-148,-24,-148,-148,-41,-148,-148,-148,209,-151,-66,-148,225,-148,-76,-77,-78,-79,-92,-93,-32,-165,-36,-166,-148,-162,-43,-44,248,249,250,251,252,253,254,255,256,258,261,264,267,270,273,276,279,282,296,-176,-75,-148,-33,-37,-42,-148,-148,-148,-65,-148,-25,-167,-148,354,355,356,357,358,258,261,264,267,270,273,276,279,282,382,-152,-148,391,-160,-148,-34,-35,-38,-39,-40,-164,-148,-157,296,426,427,428,429,430,434,-153,446,447,448,449,450,456,457,458,459,460,467,468,469,470,476,477,478,479,484,485,486,487,492,493,494,495,500,502,503,508,510,514,]),'else':([102,343,],[-49,394,]),'cte_str':([112,],[160,]),'FALSE':([112,354,426,427,428,447,448,450,456,458,460,467,476,484,486,514,],[162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,]),'TRUE':([112,354,426,427,428,447,448,450,456,458,460,467,476,484,486,514,],[163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,]),'and':([114,116,117,118,120,121,122,123,149,169,177,178,179,180,183,184,185,186,233,240,243,247,291,302,303,308,348,349,350,351,352,353,],[166,-24,-148,-148,-41,-148,-148,-148,-66,166,-32,-165,-36,-166,-148,-162,-43,-44,-148,-33,-37,-42,-65,-25,-167,-148,-34,-35,-38,-39,-40,-164,]),'or':([114,116,117,118,120,121,122,123,149,169,177,178,179,180,183,184,185,186,233,240,243,247,291,302,303,308,348,349,350,351,352,353,],[167,-24,-148,-148,-41,-148,-148,-148,-66,167,-32,-165,-36,-166,-148,-162,-43,-44,-148,-33,-37,-42,-65,-25,-167,-148,-34,-35,-38,-39,-40,-164,]),'rParenthesis':([114,116,117,118,120,121,122,123,145,146,149,152,153,156,157,158,159,160,161,162,163,165,168,169,177,178,179,180,183,184,185,186,196,197,198,199,200,201,202,203,204,212,213,214,220,221,222,224,225,226,227,228,229,230,231,232,233,240,243,246,247,257,259,260,262,263,265,266,268,269,271,272,274,275,277,278,280,281,283,287,288,289,291,292,295,297,301,302,303,308,314,315,316,317,319,321,323,325,327,329,331,333,335,339,341,342,345,347,348,349,350,351,352,353,364,366,368,370,372,374,376,378,380,386,387,390,392,397,412,413,416,421,433,435,443,461,497,506,513,516,],[-148,-24,-148,-148,-41,-148,-148,-148,-151,-148,-66,219,-148,-148,-148,-76,-77,-78,-79,-92,-93,-148,-23,-148,-32,-165,-36,-166,-148,-162,-43,-44,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-81,-82,-148,-176,298,300,-63,-64,-75,-19,-168,-21,-22,-148,-148,-33,-37,308,-42,318,-123,320,-126,322,-129,324,-132,326,-135,328,-138,330,-141,332,-144,334,-147,338,-154,-148,-65,-148,344,-74,-20,-25,-167,-148,359,360,361,362,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-160,-148,399,-34,-35,-38,-39,-40,-164,-122,-125,-128,-131,-134,-137,-140,-143,-146,-148,-157,415,-90,-148,-148,-153,-89,-73,-83,-85,-84,466,501,509,515,518,]),'greater':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[171,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'lessThan':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[172,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'greaterEquals':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[173,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'lessThanEquals':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[174,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'equals':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[175,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'notEquals':([116,117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,240,243,247,291,308,348,349,350,351,352,353,],[176,-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'plus':([117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,243,247,291,308,350,351,352,353,],[-148,-148,-41,-148,-148,-148,-66,241,-165,-36,-166,-148,-162,-43,-44,-37,-42,-65,-148,-38,-39,-40,-164,]),'minus':([117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,243,247,291,308,350,351,352,353,],[-148,-148,-41,-148,-148,-148,-66,242,-165,-36,-166,-148,-162,-43,-44,-37,-42,-65,-148,-38,-39,-40,-164,]),'rSqrBracket':([117,118,120,121,122,123,149,177,178,179,180,183,184,185,186,211,217,240,243,247,291,308,348,349,350,351,352,353,],[-148,-148,-41,-148,-148,-148,-66,-32,-165,-36,-166,-148,-162,-43,-44,286,291,-33,-37,-42,-65,-148,-34,-35,-38,-39,-40,-164,]),'times':([118,120,121,122,123,149,179,180,183,184,185,186,247,291,308,352,353,],[-148,-41,-148,-148,-148,-66,244,-166,-148,-162,-43,-44,-42,-65,-148,-40,-164,]),'divide':([118,120,121,122,123,149,179,180,183,184,185,186,247,291,308,352,353,],[-148,-41,-148,-148,-148,-66,245,-166,-148,-162,-43,-44,-42,-65,-148,-40,-164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'SAVE_TYPE':([3,23,24,25,26,29,],[4,34,35,36,37,39,]),'empty':([3,6,9,11,12,18,23,24,25,26,29,30,31,38,43,54,57,58,100,104,105,114,117,118,119,121,122,123,142,143,146,153,156,157,165,169,171,172,173,174,175,176,183,196,197,198,199,200,201,202,203,204,212,216,219,220,232,233,241,242,244,245,285,286,289,292,298,308,319,321,323,325,327,329,331,333,335,336,338,339,340,341,343,345,386,393,394,397,398,399,411,412,436,],[5,8,13,13,20,20,5,5,5,5,5,41,44,8,44,106,110,110,145,149,151,168,178,180,182,184,184,184,207,210,214,221,226,149,229,168,182,182,182,182,182,182,149,259,262,265,268,271,274,277,280,283,288,182,294,297,229,303,182,182,182,182,145,337,145,342,294,353,259,262,265,268,271,274,277,280,283,383,385,387,389,392,395,221,413,418,420,297,423,425,432,435,445,]),'START_FUNCTION':([6,38,],[7,101,]),'PROGRAM_A':([9,11,],[10,17,]),'VARS':([9,11,],[11,11,]),'METHOD':([9,11,12,18,],[12,12,18,18,]),'PROGRAM_B':([12,18,],[19,32,]),'VARS_A':([14,142,],[21,206,]),'TYPE':([14,15,142,146,434,],[22,28,22,215,215,]),'TYPEMETHOD':([15,],[27,]),'BLOCK':([16,111,293,346,384,419,],[30,155,343,398,411,437,]),'PRINTQUADS':([30,],[40,]),'BLOCK_A':([31,43,],[42,103,]),'STATEMENT':([31,43,],[43,43,]),'ASSIGNMENT':([31,43,],[45,45,]),'CONDITION':([31,43,],[46,46,]),'WRITE':([31,43,],[47,47,]),'PRE_CONDITIONAL_LOOP':([31,43,],[48,48,]),'POST_CONDITIONAL_LOOP':([31,43,],[49,49,]),'METHODCALL':([31,43,],[50,50,]),'READ':([31,43,],[51,51,]),'STATMETHODS':([31,43,],[52,52,]),'RETURN':([31,43,],[53,53,]),'ORDINARY_LEAST_SQUARES':([31,43,],[60,60,]),'LASSO':([31,43,],[61,61,]),'RIDGE':([31,43,],[62,62,]),'K_MEANS':([31,43,],[63,63,]),'MINI_BATCH_MEANS':([31,43,],[64,64,]),'TIME_SERIES_SPLIT':([31,43,],[65,65,]),'MEAN_ABSOLUTE_ERROR':([31,43,],[66,66,]),'MEAN_SQUARED_ERROR':([31,43,],[67,67,]),'MEDIAN_ABSOLUTE_ERROR':([31,43,],[68,68,]),'MEAN':([31,43,],[69,69,]),'MODE':([31,43,],[70,70,]),'MEDIAN':([31,43,],[71,71,]),'PROBABILITY':([31,43,],[72,72,]),'FREQUENCY':([31,43,],[73,73,]),'VARIANCE':([31,43,],[74,74,]),'STANDARD_DEVIATION':([31,43,],[75,75,]),'SKEWNESS':([31,43,],[76,76,]),'KURTOSI':([31,43,],[77,77,]),'VARS_B':([33,],[97,]),'SIMPLE':([33,209,],[98,284,]),'LIST':([33,382,],[99,409,]),'PUSH_STACK_OPERANDS':([54,121,122,123,],[104,183,185,186,]),'VALIDATE_FUNCTION_NAME':([54,],[105,]),'PUSH_STACK_JUMPS':([57,58,],[109,111,]),'EXPLOG':([78,107,154,166,167,181,290,299,],[113,152,222,230,231,246,340,347,]),'EXPRESSION':([78,107,108,115,154,166,167,181,290,296,299,],[114,114,153,169,114,114,114,114,114,345,114,]),'EXP':([78,107,108,115,148,154,166,167,170,181,218,290,296,299,304,305,391,],[116,116,116,116,217,116,116,116,233,116,292,116,116,116,348,349,416,]),'TERM':([78,107,108,115,148,154,166,167,170,181,218,290,296,299,304,305,306,307,391,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,350,351,117,]),'FACTOR':([78,107,108,115,148,154,166,167,170,181,218,290,296,299,304,305,306,307,391,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'VARCONSTAUX':([78,107,108,115,127,128,129,144,148,154,166,167,170,181,218,253,290,296,299,304,305,306,307,355,356,357,358,391,429,430,446,449,457,468,469,470,477,478,479,487,492,493,494,495,503,510,],[120,120,120,120,190,191,192,211,120,120,120,120,120,120,120,314,120,120,120,120,120,120,120,401,402,403,404,120,441,442,451,454,462,473,474,475,481,482,483,491,496,497,498,499,507,513,]),'SAVE_VAR':([100,285,289,],[143,143,339,]),'ISLIST':([104,157,183,],[147,227,247,]),'ERA':([105,],[150,]),'VARCTE':([112,],[156,]),'BOOLEAN':([112,354,426,427,428,447,448,450,456,458,460,467,476,484,486,514,],[161,400,438,439,440,452,453,455,461,463,465,472,480,488,490,516,]),'EXPLOG_A':([114,169,],[165,232,]),'EXPRESSION_A':([116,],[170,]),'SOLVE_OPERATION_SUM_MINUS':([117,],[177,]),'SOLVE_OPERATION_TIMES_DIVIDE':([118,],[179,]),'PUSH_STACK_OPERATORS':([119,171,172,173,174,175,176,216,241,242,244,245,],[181,234,235,236,237,238,239,290,304,305,306,307,]),'VARS_C':([142,],[205,]),'SIMPLE_A':([143,],[208,]),'METHOD_A':([146,],[212,]),'PARAMS':([146,434,],[213,443,]),'GENERATE_QUAD_PRINT':([153,345,],[220,397,]),'READ_A':([156,],[224,]),'SOLVE_OPERATION_LOGIC':([165,232,],[228,301,]),'EXP_A':([177,],[240,]),'TERM_A':([179,],[243,]),'MEAN_A':([196,319,],[257,364,]),'MODE_A':([197,321,],[260,366,]),'MEDIAN_A':([198,323,],[263,368,]),'PROBABILITY_A':([199,325,],[266,370,]),'FREQUENCY_A':([200,327,],[269,372,]),'VARIANCE_A':([201,329,],[272,374,]),'STANDARD_DEVIATION_A':([202,331,],[275,376,]),'SKEWNESS_A':([203,333,],[278,378,]),'KURTOSI_A':([204,335,],[281,380,]),'SAVE_COUNTER_PARAM':([212,],[287,]),'GENERATE_GOTOF_CONDITIONAL':([219,298,],[293,346,]),'WRITE_A':([220,397,],[295,421,]),'SOLVE_OPERATION_RELATIONSHIP':([233,],[302,]),'SAVE_ARRAY':([286,],[336,]),'VALIDATE_PARAMETER':([292,],[341,]),'POP_STACK_OPERATORS':([308,],[352,]),'LIST_A':([336,],[381,]),'SAVE_COUNTER_QUAD':([338,],[384,]),'SAVE_PARAM_TYPE':([339,],[386,]),'SOLVE_OPERATION_ASSIGNMENT':([340,],[388,]),'METHODCALL_A':([341,],[390,]),'CONDITION_A':([343,],[393,]),'INCREMENT_PARAM_COUNTER':([386,],[412,]),'SOLVE_OPERATION_CONDITIONAL':([393,],[417,]),'GENERATE_GOTO_CONDITIONAL':([394,],[419,]),'SOLVE_OPERATION_PRE_CONDITIONAL_LOOP':([398,],[422,]),'SOLVE_OPERATION_POST_CONDITIONAL_LOOP':([399,],[424,]),'END_PROCEDURE':([411,],[431,]),'PARAMS_A':([412,],[433,]),'VALIDATE_METHOD_CALL':([436,],[444,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A start BLOCK PRINTQUADS','PROGRAM',10,'p_PROGRAM','parser.py',79),
  ('PROGRAM_A -> VARS PROGRAM_A','PROGRAM_A',2,'p_PROGRAM_A','parser.py',84),
  ('PROGRAM_A -> METHOD PROGRAM_B','PROGRAM_A',2,'p_PROGRAM_A','parser.py',85),
  ('PROGRAM_A -> empty','PROGRAM_A',1,'p_PROGRAM_A','parser.py',86),
  ('PROGRAM_B -> METHOD PROGRAM_B','PROGRAM_B',2,'p_PROGRAM_B','parser.py',91),
  ('PROGRAM_B -> empty','PROGRAM_B',1,'p_PROGRAM_B','parser.py',92),
  ('VARS -> var VARS_A','VARS',2,'p_VARS','parser.py',97),
  ('VARS_A -> TYPE colon VARS_B semicolon VARS_C','VARS_A',5,'p_VARS_A','parser.py',102),
  ('VARS_B -> SIMPLE','VARS_B',1,'p_VARS_B','parser.py',107),
  ('VARS_B -> LIST','VARS_B',1,'p_VARS_B','parser.py',108),
  ('VARS_C -> VARS_A','VARS_C',1,'p_VARS_C','parser.py',113),
  ('VARS_C -> empty','VARS_C',1,'p_VARS_C','parser.py',114),
  ('SIMPLE -> id SAVE_VAR SIMPLE_A','SIMPLE',3,'p_SIMPLE','parser.py',119),
  ('SIMPLE_A -> comma SIMPLE','SIMPLE_A',2,'p_SIMPLE_A','parser.py',124),
  ('SIMPLE_A -> empty','SIMPLE_A',1,'p_SIMPLE_A','parser.py',125),
  ('LIST -> id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A','LIST',6,'p_LIST','parser.py',130),
  ('LIST_A -> comma LIST','LIST_A',2,'p_LIST_A','parser.py',135),
  ('LIST_A -> empty','LIST_A',1,'p_LIST_A','parser.py',136),
  ('EXPLOG -> EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',3,'p_EXPLOG','parser.py',141),
  ('EXPLOG -> not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',4,'p_EXPLOG','parser.py',142),
  ('EXPLOG_A -> and EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',148),
  ('EXPLOG_A -> or EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',149),
  ('EXPLOG_A -> empty','EXPLOG_A',1,'p_EXPLOG_A','parser.py',150),
  ('EXPRESSION -> EXP','EXPRESSION',1,'p_EXPRESSION','parser.py',156),
  ('EXPRESSION -> EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP','EXPRESSION',4,'p_EXPRESSION','parser.py',157),
  ('EXPRESSION_A -> greater PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',163),
  ('EXPRESSION_A -> lessThan PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',164),
  ('EXPRESSION_A -> greaterEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',165),
  ('EXPRESSION_A -> lessThanEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',166),
  ('EXPRESSION_A -> equals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',167),
  ('EXPRESSION_A -> notEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',168),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS','EXP',2,'p_EXP','parser.py',173),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS EXP_A','EXP',3,'p_EXP','parser.py',174),
  ('EXP_A -> plus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',180),
  ('EXP_A -> minus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',181),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE','TERM',2,'p_TERM','parser.py',187),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A','TERM',3,'p_TERM','parser.py',188),
  ('TERM_A -> times PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',194),
  ('TERM_A -> divide PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',195),
  ('FACTOR -> lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS','FACTOR',5,'p_FACTOR','parser.py',201),
  ('FACTOR -> VARCONSTAUX','FACTOR',1,'p_FACTOR','parser.py',202),
  ('VARCONSTAUX -> id PUSH_STACK_OPERANDS ISLIST','VARCONSTAUX',3,'p_VARCONSTAUX','parser.py',209),
  ('VARCONSTAUX -> cte_i PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',210),
  ('VARCONSTAUX -> cte_f PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',211),
  ('TYPE -> int SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',217),
  ('TYPE -> float SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',218),
  ('TYPE -> string SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',219),
  ('TYPE -> bool SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',220),
  ('BLOCK -> lCurlyBracket BLOCK_A rCurlyBracket','BLOCK',3,'p_BLOCK','parser.py',225),
  ('BLOCK_A -> STATEMENT BLOCK_A','BLOCK_A',2,'p_BLOCK_A','parser.py',230),
  ('BLOCK_A -> empty','BLOCK_A',1,'p_BLOCK_A','parser.py',231),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','parser.py',236),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',237),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',238),
  ('STATEMENT -> PRE_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',239),
  ('STATEMENT -> POST_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',240),
  ('STATEMENT -> METHODCALL','STATEMENT',1,'p_STATEMENT','parser.py',241),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',242),
  ('STATEMENT -> STATMETHODS','STATEMENT',1,'p_STATEMENT','parser.py',243),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',244),
  ('ASSIGNMENT -> id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon','ASSIGNMENT',8,'p_ASSIGNMENT','parser.py',249),
  ('READ -> scan lParenthesis VARCTE READ_A rParenthesis','READ',5,'p_READ','parser.py',254),
  ('READ_A -> comma','READ_A',1,'p_READ_A','parser.py',259),
  ('READ_A -> empty','READ_A',1,'p_READ_A','parser.py',260),
  ('ISLIST -> lSqrBracket EXP rSqrBracket','ISLIST',3,'p_ISLIST','parser.py',265),
  ('ISLIST -> empty','ISLIST',1,'p_ISLIST','parser.py',266),
  ('TYPEMETHOD -> TYPE','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',271),
  ('TYPEMETHOD -> void SAVE_TYPE','TYPEMETHOD',2,'p_TYPEMETHOD','parser.py',272),
  ('CONDITION -> if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL','CONDITION',8,'p_CONDITION','parser.py',277),
  ('CONDITION_A -> else GENERATE_GOTO_CONDITIONAL BLOCK','CONDITION_A',3,'p_CONDITION_A','parser.py',282),
  ('CONDITION_A -> empty','CONDITION_A',1,'p_CONDITION_A','parser.py',283),
  ('WRITE -> print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon','WRITE',7,'p_WRITE','parser.py',288),
  ('WRITE_A -> comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A','WRITE_A',4,'p_WRITE_A','parser.py',293),
  ('WRITE_A -> empty','WRITE_A',1,'p_WRITE_A','parser.py',294),
  ('VARCTE -> id ISLIST','VARCTE',2,'p_VARCTE','parser.py',299),
  ('VARCTE -> cte_i','VARCTE',1,'p_VARCTE','parser.py',300),
  ('VARCTE -> cte_f','VARCTE',1,'p_VARCTE','parser.py',301),
  ('VARCTE -> cte_str','VARCTE',1,'p_VARCTE','parser.py',302),
  ('VARCTE -> BOOLEAN','VARCTE',1,'p_VARCTE','parser.py',303),
  ('METHOD -> func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE','METHOD',11,'p_METHOD','parser.py',308),
  ('METHOD_A -> PARAMS','METHOD_A',1,'p_METHOD_A','parser.py',313),
  ('METHOD_A -> empty','METHOD_A',1,'p_METHOD_A','parser.py',314),
  ('PARAMS -> TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A','PARAMS',6,'p_PARAMS','parser.py',319),
  ('PARAMS_A -> comma PARAMS','PARAMS_A',2,'p_PARAMS_A','parser.py',324),
  ('PARAMS_A -> empty','PARAMS_A',1,'p_PARAMS_A','parser.py',325),
  ('PRE_CONDITIONAL_LOOP -> while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','PRE_CONDITIONAL_LOOP',8,'p_PRE_CONDITIONAL_LOOP','parser.py',330),
  ('POST_CONDITIONAL_LOOP -> do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP','POST_CONDITIONAL_LOOP',8,'p_POST_CONDITIONAL_LOOP','parser.py',335),
  ('METHODCALL -> id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL','METHODCALL',10,'p_METHODCALL','parser.py',340),
  ('METHODCALL_A -> comma EXP','METHODCALL_A',2,'p_METHODCALL_A','parser.py',345),
  ('METHODCALL_A -> empty','METHODCALL_A',1,'p_METHODCALL_A','parser.py',346),
  ('RETURN -> return EXPLOG semicolon','RETURN',3,'p_RETURN','parser.py',351),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN','parser.py',356),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN','parser.py',357),
  ('STATMETHODS -> ORDINARY_LEAST_SQUARES','STATMETHODS',1,'p_STATMETHODS','parser.py',362),
  ('STATMETHODS -> LASSO','STATMETHODS',1,'p_STATMETHODS','parser.py',363),
  ('STATMETHODS -> RIDGE','STATMETHODS',1,'p_STATMETHODS','parser.py',364),
  ('STATMETHODS -> K_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',365),
  ('STATMETHODS -> MINI_BATCH_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',366),
  ('STATMETHODS -> TIME_SERIES_SPLIT','STATMETHODS',1,'p_STATMETHODS','parser.py',367),
  ('STATMETHODS -> MEAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',368),
  ('STATMETHODS -> MEAN_SQUARED_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',369),
  ('STATMETHODS -> MEDIAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',370),
  ('STATMETHODS -> MEAN','STATMETHODS',1,'p_STATMETHODS','parser.py',371),
  ('STATMETHODS -> MODE','STATMETHODS',1,'p_STATMETHODS','parser.py',372),
  ('STATMETHODS -> MEDIAN','STATMETHODS',1,'p_STATMETHODS','parser.py',373),
  ('STATMETHODS -> PROBABILITY','STATMETHODS',1,'p_STATMETHODS','parser.py',374),
  ('STATMETHODS -> FREQUENCY','STATMETHODS',1,'p_STATMETHODS','parser.py',375),
  ('STATMETHODS -> VARIANCE','STATMETHODS',1,'p_STATMETHODS','parser.py',376),
  ('STATMETHODS -> STANDARD_DEVIATION','STATMETHODS',1,'p_STATMETHODS','parser.py',377),
  ('STATMETHODS -> SKEWNESS','STATMETHODS',1,'p_STATMETHODS','parser.py',378),
  ('STATMETHODS -> KURTOSI','STATMETHODS',1,'p_STATMETHODS','parser.py',379),
  ('ORDINARY_LEAST_SQUARES -> ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon','ORDINARY_LEAST_SQUARES',15,'p_ORDINARY_LEAST_SQUARES','parser.py',384),
  ('LASSO -> las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon','LASSO',29,'p_LASSO','parser.py',389),
  ('RIDGE -> rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon','RIDGE',23,'p_RIDGE','parser.py',394),
  ('K_MEANS -> kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon','K_MEANS',25,'p_K_MEANS','parser.py',399),
  ('MINI_BATCH_MEANS -> mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','MINI_BATCH_MEANS',27,'p_MINI_BATCH_MEANS','parser.py',404),
  ('TIME_SERIES_SPLIT -> tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','TIME_SERIES_SPLIT',7,'p_TIME_SERIES_SPLIT','parser.py',409),
  ('MEAN_ABSOLUTE_ERROR -> mean_abs_err lParenthesis id comma id rParenthesis semicolon','MEAN_ABSOLUTE_ERROR',7,'p_MEAN_ABSOLUTE_ERROR','parser.py',414),
  ('MEAN_SQUARED_ERROR -> mean_sqr_err lParenthesis id comma id rParenthesis semicolon','MEAN_SQUARED_ERROR',7,'p_MEAN_SQUARED_ERROR','parser.py',419),
  ('MEDIAN_ABSOLUTE_ERROR -> median_abs_err lParenthesis id comma id rParenthesis semicolon','MEDIAN_ABSOLUTE_ERROR',7,'p_MEDIAN_ABSOLUTE_ERROR','parser.py',424),
  ('MEAN -> mean lParenthesis id MEAN_A rParenthesis semicolon','MEAN',6,'p_MEAN','parser.py',429),
  ('MEAN_A -> comma id MEAN_A','MEAN_A',3,'p_MEAN_A','parser.py',434),
  ('MEAN_A -> empty','MEAN_A',1,'p_MEAN_A','parser.py',435),
  ('MODE -> mode lParenthesis id MODE_A rParenthesis semicolon','MODE',6,'p_MODE','parser.py',440),
  ('MODE_A -> comma id MODE_A','MODE_A',3,'p_MODE_A','parser.py',445),
  ('MODE_A -> empty','MODE_A',1,'p_MODE_A','parser.py',446),
  ('MEDIAN -> median lParenthesis id MEDIAN_A rParenthesis semicolon','MEDIAN',6,'p_MEDIAN','parser.py',451),
  ('MEDIAN_A -> comma id MEDIAN_A','MEDIAN_A',3,'p_MEDIAN_A','parser.py',456),
  ('MEDIAN_A -> empty','MEDIAN_A',1,'p_MEDIAN_A','parser.py',457),
  ('PROBABILITY -> prob lParenthesis id PROBABILITY_A rParenthesis semicolon','PROBABILITY',6,'p_PROBABILITY','parser.py',462),
  ('PROBABILITY_A -> comma id PROBABILITY_A','PROBABILITY_A',3,'p_PROBABILITY_A','parser.py',467),
  ('PROBABILITY_A -> empty','PROBABILITY_A',1,'p_PROBABILITY_A','parser.py',468),
  ('FREQUENCY -> freq lParenthesis id FREQUENCY_A rParenthesis semicolon','FREQUENCY',6,'p_FREQUENCY','parser.py',473),
  ('FREQUENCY_A -> comma id FREQUENCY_A','FREQUENCY_A',3,'p_FREQUENCY_A','parser.py',478),
  ('FREQUENCY_A -> empty','FREQUENCY_A',1,'p_FREQUENCY_A','parser.py',479),
  ('VARIANCE -> variance lParenthesis id VARIANCE_A rParenthesis semicolon','VARIANCE',6,'p_VARIANCE','parser.py',484),
  ('VARIANCE_A -> comma id VARIANCE_A','VARIANCE_A',3,'p_VARIANCE_A','parser.py',489),
  ('VARIANCE_A -> empty','VARIANCE_A',1,'p_VARIANCE_A','parser.py',490),
  ('STANDARD_DEVIATION -> stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon','STANDARD_DEVIATION',6,'p_STANDARD_DEVIATION','parser.py',495),
  ('STANDARD_DEVIATION_A -> comma id STANDARD_DEVIATION_A','STANDARD_DEVIATION_A',3,'p_STANDARD_DEVIATION_A','parser.py',500),
  ('STANDARD_DEVIATION_A -> empty','STANDARD_DEVIATION_A',1,'p_STANDARD_DEVIATION_A','parser.py',501),
  ('SKEWNESS -> skew lParenthesis id SKEWNESS_A rParenthesis semicolon','SKEWNESS',6,'p_SKEWNESS','parser.py',506),
  ('SKEWNESS_A -> comma id SKEWNESS_A','SKEWNESS_A',3,'p_SKEWNESS_A','parser.py',511),
  ('SKEWNESS_A -> empty','SKEWNESS_A',1,'p_SKEWNESS_A','parser.py',512),
  ('KURTOSI -> kurt lParenthesis id KURTOSI_A rParenthesis semicolon','KURTOSI',6,'p_KURTOSI','parser.py',517),
  ('KURTOSI_A -> comma id KURTOSI_A','KURTOSI_A',3,'p_KURTOSI_A','parser.py',522),
  ('KURTOSI_A -> empty','KURTOSI_A',1,'p_KURTOSI_A','parser.py',523),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',528),
  ('START_FUNCTION -> empty','START_FUNCTION',1,'p_START_FUNCTION','parser.py',566),
  ('SAVE_TYPE -> empty','SAVE_TYPE',1,'p_SAVE_TYPE','parser.py',583),
  ('SAVE_VAR -> empty','SAVE_VAR',1,'p_SAVE_VAR','parser.py',594),
  ('SAVE_ARRAY -> empty','SAVE_ARRAY',1,'p_SAVE_ARRAY','parser.py',618),
  ('INCREMENT_PARAM_COUNTER -> empty','INCREMENT_PARAM_COUNTER',1,'p_INCREMENT_PARAM_COUNTER','parser.py',640),
  ('SAVE_COUNTER_PARAM -> empty','SAVE_COUNTER_PARAM',1,'p_SAVE_COUNTER_PARAM','parser.py',651),
  ('SAVE_COUNTER_QUAD -> empty','SAVE_COUNTER_QUAD',1,'p_SAVE_COUNTER_QUAD','parser.py',663),
  ('END_PROCEDURE -> empty','END_PROCEDURE',1,'p_END_PROCEDURE','parser.py',674),
  ('SAVE_PARAM_TYPE -> empty','SAVE_PARAM_TYPE',1,'p_SAVE_PARAM_TYPE','parser.py',689),
  ('VALIDATE_FUNCTION_NAME -> empty','VALIDATE_FUNCTION_NAME',1,'p_VALIDATE_FUNCTION_NAME','parser.py',701),
  ('ERA -> empty','ERA',1,'p_ERA','parser.py',713),
  ('VALIDATE_PARAMETER -> empty','VALIDATE_PARAMETER',1,'p_VALIDATE_PARAMETER','parser.py',735),
  ('VALIDATE_METHOD_CALL -> empty','VALIDATE_METHOD_CALL',1,'p_VALIDATE_METHOD_CALL','parser.py',760),
  ('PUSH_STACK_OPERANDS -> empty','PUSH_STACK_OPERANDS',1,'p_PUSH_STACK_OPERANDS','parser.py',786),
  ('PUSH_STACK_OPERATORS -> empty','PUSH_STACK_OPERATORS',1,'p_PUSH_STACK_OPERATORS','parser.py',803),
  ('POP_STACK_OPERATORS -> empty','POP_STACK_OPERATORS',1,'p_POP_STACK_OPERATORS','parser.py',814),
  ('SOLVE_OPERATION_SUM_MINUS -> empty','SOLVE_OPERATION_SUM_MINUS',1,'p_SOLVE_OPERATION_SUM_MINUS','parser.py',874),
  ('SOLVE_OPERATION_TIMES_DIVIDE -> empty','SOLVE_OPERATION_TIMES_DIVIDE',1,'p_SOLVE_OPERATION_TIMES_DIVIDE','parser.py',888),
  ('SOLVE_OPERATION_RELATIONSHIP -> empty','SOLVE_OPERATION_RELATIONSHIP',1,'p_SOLVE_OPERATION_RELATIONSHIP','parser.py',902),
  ('SOLVE_OPERATION_LOGIC -> empty','SOLVE_OPERATION_LOGIC',1,'p_SOLVE_OPERATION_LOGIC','parser.py',915),
  ('SOLVE_OPERATION_ASSIGNMENT -> empty','SOLVE_OPERATION_ASSIGNMENT',1,'p_SOLVE_OPERATION_ASSIGNMENT','parser.py',961),
  ('GENERATE_GOTOF_CONDITIONAL -> empty','GENERATE_GOTOF_CONDITIONAL',1,'p_GENERATE_GOTOF_CONDITIONAL','parser.py',987),
  ('SOLVE_OPERATION_CONDITIONAL -> empty','SOLVE_OPERATION_CONDITIONAL',1,'p_SOLVE_OPERATION_CONDITIONAL','parser.py',1016),
  ('GENERATE_GOTO_CONDITIONAL -> empty','GENERATE_GOTO_CONDITIONAL',1,'p_GENERATE_GOTO_CONDITIONAL','parser.py',1027),
  ('PUSH_STACK_JUMPS -> empty','PUSH_STACK_JUMPS',1,'p_PUSH_STACK_JUMPS','parser.py',1048),
  ('SOLVE_OPERATION_PRE_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_PRE_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','parser.py',1064),
  ('SOLVE_OPERATION_POST_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_POST_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_POST_CONDITIONAL_LOOP','parser.py',1091),
  ('GENERATE_QUAD_PRINT -> empty','GENERATE_QUAD_PRINT',1,'p_GENERATE_QUAD_PRINT','parser.py',1114),
  ('PRINTQUADS -> empty','PRINTQUADS',1,'p_PRINTQUADS','parser.py',1131),
]

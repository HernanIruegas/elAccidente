
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'FALSE TRUE and assign bool colon comma cte_f cte_i cte_str divide do else equals float freq func globalFunc greater greaterEquals id if int kmeans kurt lCurlyBracket lParenthesis lSqrBracket las lessThan lessThanEquals mbm mean mean_abs_err mean_sqr_err median median_abs_err minus mode not notEquals ols or plus print prob program rCurlyBracket rParenthesis rSqrBracket return rid scan semicolon skew start stddev string times tseries var variance void while\n    PROGRAM : program globalFunc START_GLOBAL_FUNCTION semicolon PROGRAM_A start BLOCK PRINTQUADS\n    \n    PROGRAM_A : VARS PROGRAM_A\n            | METHOD PROGRAM_B\n            | empty\n    \n    PROGRAM_B : METHOD PROGRAM_B\n            | empty\n    \n    VARS : var VARS_A\n    \n    VARS_A : TYPE colon VARS_B semicolon VARS_C\n    \n    VARS_B : SIMPLE\n        | LIST\n    \n    VARS_C : VARS_A\n            | empty\n    \n    SIMPLE : id SAVE_VAR SIMPLE_A\n    \n    SIMPLE_A : comma SIMPLE\n            | empty\n    \n    LIST : id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A\n    \n    LIST_A : comma LIST\n        | empty\n    \n    EXPLOG : EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n        | not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n    \n    EXPLOG_A : and EXPLOG\n        | or EXPLOG\n        | empty\n    \n    EXPRESSION : EXP\n                | EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP\n    \n    EXPRESSION_A : greater PUSH_STACK_OPERATORS\n                | lessThan PUSH_STACK_OPERATORS\n                | greaterEquals PUSH_STACK_OPERATORS\n                | lessThanEquals PUSH_STACK_OPERATORS\n                | equals PUSH_STACK_OPERATORS\n                | notEquals PUSH_STACK_OPERATORS\n    \n    EXP : TERM SOLVE_OPERATION_SUM_MINUS\n        | TERM SOLVE_OPERATION_SUM_MINUS EXP_A\n    \n    EXP_A : plus PUSH_STACK_OPERATORS EXP\n        | minus PUSH_STACK_OPERATORS EXP\n    \n    TERM : FACTOR SOLVE_OPERATION_TIMES_DIVIDE\n        | FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A\n    \n    TERM_A : times PUSH_STACK_OPERATORS TERM\n            | divide PUSH_STACK_OPERATORS TERM\n    \n    FACTOR : lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS\n            | VARCONSTAUX\n    \n    VARCONSTAUX : id PUSH_STACK_OPERANDS ISLIST\n        | cte_i PUSH_STACK_OPERANDS\n        | cte_f PUSH_STACK_OPERANDS\n    \n    TYPE : int SAVE_TYPE\n        | float SAVE_TYPE\n        | string SAVE_TYPE\n        | bool SAVE_TYPE\n    \n    BLOCK : lCurlyBracket BLOCK_A rCurlyBracket\n    \n    BLOCK_A : STATEMENT BLOCK_A\n            | empty\n    \n    STATEMENT : ASSIGNMENT\n            | CONDITION\n            | WRITE\n            | PRE_CONDITIONAL_LOOP\n            | POST_CONDITIONAL_LOOP\n            | METHODCALL\n            | READ\n            | STATMETHODS\n            | RETURN\n    \n    ASSIGNMENT : id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon\n    \n    READ : scan lParenthesis VARCTE READ_A rParenthesis\n    \n    READ_A : comma\n        | empty\n    \n    ISLIST : lSqrBracket EXP rSqrBracket\n            | empty\n    \n    TYPEMETHOD : TYPE\n            | void\n    \n    CONDITION : if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL\n    \n    CONDITION_A : else GENERATE_GOTO_CONDITIONAL BLOCK\n                | empty\n    \n    WRITE : print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon\n    \n    WRITE_A : comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A\n        | empty\n    \n    VARCTE : id ISLIST\n        | cte_i\n        | cte_f\n        | cte_str\n        | BOOLEAN\n    \n    METHOD : func TYPEMETHOD id lParenthesis PARAMS rParenthesis BLOCK semicolon\n    \n    PARAMS : EXP PARAMS_A\n    \n    PARAMS_A : comma EXP PARAMS_A\n        | empty\n    \n    PRE_CONDITIONAL_LOOP : while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP\n    \n    POST_CONDITIONAL_LOOP : do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP\n    \n    METHODCALL : id lParenthesis EXP METHODCALL_A rParenthesis semicolon\n    \n    METHODCALL_A : comma EXP\n                | empty\n    \n    RETURN : return EXPLOG semicolon\n    \n    BOOLEAN : FALSE\n            | TRUE\n    \n    STATMETHODS : ORDINARY_LEAST_SQUARES\n                | LASSO\n                | RIDGE\n                | K_MEANS\n                | MINI_BATCH_MEANS\n                | TIME_SERIES_SPLIT\n                | MEAN_ABSOLUTE_ERROR\n                | MEAN_SQUARED_ERROR\n                | MEDIAN_ABSOLUTE_ERROR\n                | MEAN\n                | MODE\n                | MEDIAN\n                | PROBABILITY\n                | FREQUENCY\n                | VARIANCE\n                | STANDARD_DEVIATION\n                | SKEWNESS\n                | KURTOSI\n    \n    ORDINARY_LEAST_SQUARES : ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon\n    \n    LASSO : las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon\n    \n    RIDGE : rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon\n    \n    K_MEANS : kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon\n    \n    MINI_BATCH_MEANS : mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon\n    \n    TIME_SERIES_SPLIT : tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon\n    \n    MEAN_ABSOLUTE_ERROR : mean_abs_err lParenthesis id comma id rParenthesis semicolon\n    \n    MEAN_SQUARED_ERROR : mean_sqr_err lParenthesis id comma id rParenthesis semicolon\n    \n    MEDIAN_ABSOLUTE_ERROR : median_abs_err lParenthesis id comma id rParenthesis semicolon\n    \n    MEAN : mean lParenthesis id MEAN_A rParenthesis semicolon\n    \n    MEAN_A : comma id MEAN_A\n        | empty\n    \n    MODE : mode lParenthesis id MODE_A rParenthesis semicolon\n    \n    MODE_A : comma id MODE_A\n        | empty\n    \n    MEDIAN : median lParenthesis id MEDIAN_A rParenthesis semicolon\n    \n    MEDIAN_A : comma id MEDIAN_A\n        | empty\n    \n    PROBABILITY : prob lParenthesis id PROBABILITY_A rParenthesis semicolon\n    \n    PROBABILITY_A : comma id PROBABILITY_A\n        | empty\n    \n    FREQUENCY : freq lParenthesis id FREQUENCY_A rParenthesis semicolon\n    \n    FREQUENCY_A : comma id FREQUENCY_A\n        | empty\n    \n    VARIANCE : variance lParenthesis id VARIANCE_A rParenthesis semicolon\n    \n    VARIANCE_A : comma id VARIANCE_A\n        | empty\n    \n    STANDARD_DEVIATION : stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon\n    \n    STANDARD_DEVIATION_A : comma id STANDARD_DEVIATION_A\n        | empty\n    \n    SKEWNESS : skew lParenthesis id SKEWNESS_A rParenthesis semicolon\n    \n    SKEWNESS_A : comma id SKEWNESS_A\n        | empty\n    \n    KURTOSI : kurt  lParenthesis id KURTOSI_A rParenthesis semicolon\n    \n    KURTOSI_A : comma id KURTOSI_A\n        | empty\n    \n    empty :\n    \n    START_GLOBAL_FUNCTION : empty\n    \n    SAVE_TYPE : empty\n    \n    SAVE_VAR : empty\n    \n    SAVE_ARRAY : empty\n    \n\tPUSH_STACK_OPERANDS : empty\n\t\n    PUSH_STACK_OPERATORS : empty\n    \n    POP_STACK_OPERATORS : empty\n    \n    SOLVE_OPERATION_SUM_MINUS : empty\n    \n    SOLVE_OPERATION_TIMES_DIVIDE : empty\n    \n    SOLVE_OPERATION_RELATIONSHIP : empty\n    \n    SOLVE_OPERATION_LOGIC : empty\n    \n    SOLVE_OPERATION_ASSIGNMENT : empty\n    \n    GENERATE_GOTOF_CONDITIONAL : empty\n    \n    SOLVE_OPERATION_CONDITIONAL : empty\n    \n    GENERATE_GOTO_CONDITIONAL : empty\n    \n    PUSH_STACK_JUMPS : empty\n    \n    SOLVE_OPERATION_PRE_CONDITIONAL_LOOP : empty\n    \n    SOLVE_OPERATION_POST_CONDITIONAL_LOOP : empty\n    \n    GENERATE_QUAD_PRINT : empty\n    \n    PRINTQUADS : empty\n    '
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,27,37,38,99,],[0,-146,-1,-166,-49,]),'globalFunc':([2,],[3,]),'semicolon':([3,4,5,94,95,96,97,99,103,110,111,113,114,115,117,118,119,120,140,142,147,162,165,166,174,175,176,177,180,181,182,204,206,226,227,228,229,230,231,238,241,245,282,283,284,285,288,289,299,300,301,306,316,318,320,322,324,326,328,330,332,334,335,338,341,345,346,347,348,349,350,356,357,358,359,378,380,381,382,399,442,477,485,491,494,],[-146,6,-147,139,-9,-10,-146,-49,-151,161,-146,-24,-146,-146,-41,-146,-146,-146,-146,-149,-66,-146,-23,-146,-32,-154,-36,-155,-146,-43,-44,-13,-15,-19,-157,-21,-22,-146,-146,-33,-37,-42,-14,-146,-146,336,-65,339,-20,-25,-156,-146,360,362,364,366,368,370,372,374,376,-146,-150,-146,386,-34,-35,-38,-39,-40,-153,395,396,397,398,-16,-18,401,-158,-17,447,481,488,493,495,]),'var':([6,8,18,139,201,202,203,],[11,11,-7,-146,-8,-11,-12,]),'func':([6,8,9,15,18,139,201,202,203,336,],[12,12,12,12,-7,-146,-8,-11,-12,-80,]),'start':([6,7,8,9,10,14,15,16,17,18,29,139,201,202,203,336,],[-146,13,-146,-146,-4,-2,-146,-3,-6,-7,-5,-146,-8,-11,-12,-80,]),'int':([11,12,139,],[20,20,20,]),'float':([11,12,139,484,],[21,21,21,487,]),'string':([11,12,139,249,250,435,461,476,478,],[22,22,22,310,311,440,465,480,482,]),'bool':([11,12,139,],[23,23,23,]),'void':([12,],[26,]),'lCurlyBracket':([13,55,107,108,208,217,291,292,296,343,384,404,405,],[28,-146,-162,28,28,-146,28,-159,-146,28,-146,28,-161,]),'colon':([19,20,21,22,23,31,32,33,34,35,],[30,-146,-146,-146,-146,-45,-148,-46,-47,-48,]),'id':([20,21,22,23,24,25,26,28,30,31,32,33,34,35,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,98,99,102,104,105,109,112,116,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,146,151,161,163,164,167,168,169,170,171,172,173,178,179,205,210,212,215,232,233,234,235,236,237,239,240,242,243,246,247,248,251,252,253,254,256,259,262,265,268,271,274,277,280,287,294,297,298,302,303,304,305,339,340,352,353,354,355,360,362,364,366,368,370,372,374,376,379,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,414,415,416,422,425,433,444,445,446,447,453,454,455,463,468,469,470,471,479,481,486,488,493,495,],[-146,-146,-146,-146,36,-67,-68,51,97,-45,-148,-46,-47,-48,51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,118,118,-49,118,118,118,154,118,-146,183,184,185,118,118,118,189,190,191,192,193,194,195,196,197,198,199,200,118,118,118,-89,118,118,118,-146,-146,-146,-146,-146,-146,118,-152,283,118,-146,118,-26,-27,-28,-29,-30,-31,-146,-146,-146,-146,307,308,309,118,313,314,315,317,319,321,323,325,327,329,331,333,118,118,118,-62,118,118,118,118,-86,-146,118,118,118,118,-119,-122,-125,-128,-131,-134,-137,-140,-143,400,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,118,118,-70,118,118,118,118,118,118,-110,118,118,118,118,118,118,118,118,118,-112,118,-113,-114,-111,]),'rCurlyBracket':([28,39,40,41,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,100,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[-146,99,-146,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-50,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'if':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[52,52,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'print':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[53,53,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'while':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,152,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[54,54,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,221,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'do':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[55,55,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'scan':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[56,56,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'return':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[75,75,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'ols':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[76,76,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'las':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[77,77,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'rid':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[78,78,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'kmeans':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[79,79,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'mbm':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[80,80,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'tseries':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[81,81,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'mean_abs_err':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[82,82,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'mean_sqr_err':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[83,83,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'median_abs_err':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[84,84,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'mean':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[85,85,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'mode':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[86,86,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'median':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[87,87,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'prob':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[88,88,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'freq':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[89,89,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'variance':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[90,90,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'stddev':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[91,91,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'skew':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[92,92,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'kurt':([28,40,42,43,44,45,46,47,48,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,99,161,298,339,340,360,362,364,366,368,370,372,374,376,383,385,386,388,389,395,396,397,398,401,402,403,407,408,409,410,416,447,481,488,493,495,],[93,93,-52,-53,-54,-55,-56,-57,-58,-59,-60,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-49,-89,-62,-86,-146,-119,-122,-125,-128,-131,-134,-137,-140,-143,-146,-71,-72,-146,-146,-115,-116,-117,-118,-61,-69,-160,-84,-163,-85,-164,-70,-110,-112,-113,-114,-111,]),'lParenthesis':([36,51,52,53,54,56,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,102,104,105,106,107,112,116,146,151,163,164,167,168,169,170,171,172,173,178,179,210,212,215,221,232,233,234,235,236,237,239,240,242,243,287,294,297,302,303,304,305,],[98,102,104,105,-146,109,116,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,116,116,116,116,151,-162,116,-146,116,116,116,116,116,-146,-146,-146,-146,-146,-146,116,-152,116,-146,116,297,-26,-27,-28,-29,-30,-31,-146,-146,-146,-146,116,116,116,116,116,116,116,]),'lSqrBracket':([51,97,101,103,118,154,180,400,],[-146,141,146,-151,-146,146,146,141,]),'assign':([51,101,103,145,147,288,],[-146,-146,-151,212,-66,-65,]),'not':([75,104,116,151,163,164,178,179,212,287,297,],[112,112,-146,112,112,112,112,-152,-146,112,112,]),'cte_i':([75,98,102,104,105,109,112,116,124,125,126,141,146,151,163,164,167,168,169,170,171,172,173,178,179,210,212,215,232,233,234,235,236,237,239,240,242,243,251,287,294,297,302,303,304,305,352,353,354,355,414,415,422,425,433,444,445,446,453,454,455,463,468,469,470,471,479,486,],[119,119,119,119,119,155,119,-146,119,119,119,119,119,119,119,119,119,-146,-146,-146,-146,-146,-146,119,-152,119,-146,119,-26,-27,-28,-29,-30,-31,-146,-146,-146,-146,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'cte_f':([75,98,102,104,105,109,112,116,124,125,126,141,146,151,163,164,167,168,169,170,171,172,173,178,179,210,212,215,232,233,234,235,236,237,239,240,242,243,251,287,294,297,302,303,304,305,352,353,354,355,414,415,422,425,433,444,445,446,453,454,455,463,468,469,470,471,479,486,],[120,120,120,120,120,156,120,-146,120,120,120,120,120,120,120,120,120,-146,-146,-146,-146,-146,-146,120,-152,120,-146,120,-26,-27,-28,-29,-30,-31,-146,-146,-146,-146,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'comma':([97,103,113,114,115,117,118,119,120,140,142,144,147,148,150,153,154,155,156,157,158,159,160,174,175,176,177,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,218,219,225,231,238,241,245,283,284,286,288,300,301,306,307,308,309,310,311,317,319,321,323,325,327,329,331,333,334,335,342,345,346,347,348,349,350,387,390,391,392,393,394,417,418,419,420,421,427,428,429,430,431,438,439,440,441,448,449,450,451,456,457,458,459,464,465,466,467,472,474,475,480,483,487,],[-146,-151,-24,-146,-146,-41,-146,-146,-146,205,-149,210,-66,215,-146,223,-146,-76,-77,-78,-79,-90,-91,-32,-154,-36,-155,-146,-43,-44,246,247,248,249,250,251,252,253,254,256,259,262,265,268,271,274,277,280,294,-165,-75,-146,-33,-37,-42,-146,-146,210,-65,-25,-156,-146,351,352,353,354,355,256,259,262,265,268,271,274,277,280,379,-150,-146,-34,-35,-38,-39,-40,-153,294,411,412,413,414,415,422,423,424,425,426,432,433,434,435,436,443,444,445,446,452,453,454,455,460,461,462,463,468,469,470,471,476,478,479,484,486,490,]),'else':([99,340,],[-49,384,]),'times':([103,115,117,118,119,120,147,176,177,180,181,182,245,288,306,349,350,],[-151,-146,-41,-146,-146,-146,-66,242,-155,-146,-43,-44,-42,-65,-146,-40,-153,]),'divide':([103,115,117,118,119,120,147,176,177,180,181,182,245,288,306,349,350,],[-151,-146,-41,-146,-146,-146,-66,243,-155,-146,-43,-44,-42,-65,-146,-40,-153,]),'plus':([103,114,115,117,118,119,120,147,174,175,176,177,180,181,182,241,245,288,306,347,348,349,350,],[-151,-146,-146,-41,-146,-146,-146,-66,239,-154,-36,-155,-146,-43,-44,-37,-42,-65,-146,-38,-39,-40,-153,]),'minus':([103,114,115,117,118,119,120,147,174,175,176,177,180,181,182,241,245,288,306,347,348,349,350,],[-151,-146,-146,-41,-146,-146,-146,-66,240,-154,-36,-155,-146,-43,-44,-37,-42,-65,-146,-38,-39,-40,-153,]),'greater':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,168,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'lessThan':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,169,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'greaterEquals':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,170,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'lessThanEquals':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,171,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'equals':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,172,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'notEquals':([103,113,114,115,117,118,119,120,147,174,175,176,177,180,181,182,238,241,245,288,306,345,346,347,348,349,350,],[-151,173,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'and':([103,111,113,114,115,117,118,119,120,147,166,174,175,176,177,180,181,182,231,238,241,245,288,300,301,306,345,346,347,348,349,350,],[-151,163,-24,-146,-146,-41,-146,-146,-146,-66,163,-32,-154,-36,-155,-146,-43,-44,-146,-33,-37,-42,-65,-25,-156,-146,-34,-35,-38,-39,-40,-153,]),'or':([103,111,113,114,115,117,118,119,120,147,166,174,175,176,177,180,181,182,231,238,241,245,288,300,301,306,345,346,347,348,349,350,],[-151,164,-24,-146,-146,-41,-146,-146,-146,-66,164,-32,-154,-36,-155,-146,-43,-44,-146,-33,-37,-42,-65,-25,-156,-146,-34,-35,-38,-39,-40,-153,]),'rParenthesis':([103,111,113,114,115,117,118,119,120,143,144,147,148,149,150,153,154,155,156,157,158,159,160,162,165,166,174,175,176,177,180,181,182,192,193,194,195,196,197,198,199,200,209,211,214,216,218,219,220,222,223,224,225,226,227,228,229,230,231,238,241,244,245,255,257,258,260,261,263,264,266,267,269,270,272,273,275,276,278,279,281,286,288,290,293,295,299,300,301,306,312,313,314,315,317,319,321,323,325,327,329,331,333,337,342,344,345,346,347,348,349,350,361,363,365,367,369,371,373,375,377,387,406,437,473,482,489,492,],[-151,-146,-24,-146,-146,-41,-146,-146,-146,208,-146,-66,-146,217,-146,-146,-146,-76,-77,-78,-79,-90,-91,-146,-23,-146,-32,-154,-36,-155,-146,-43,-44,-146,-146,-146,-146,-146,-146,-146,-146,-146,-81,-83,289,-88,-146,-165,296,298,-63,-64,-75,-19,-157,-21,-22,-146,-146,-33,-37,306,-42,316,-121,318,-124,320,-127,322,-130,324,-133,326,-136,328,-139,330,-142,332,-145,-146,-65,-87,341,-74,-20,-25,-156,-146,356,357,358,359,-146,-146,-146,-146,-146,-146,-146,-146,-146,-82,-146,389,-34,-35,-38,-39,-40,-153,-120,-123,-126,-129,-132,-135,-138,-141,-144,-146,-73,442,477,485,491,494,]),'rSqrBracket':([103,114,115,117,118,119,120,147,174,175,176,177,180,181,182,207,213,238,241,245,288,306,345,346,347,348,349,350,],[-151,-146,-146,-41,-146,-146,-146,-66,-32,-154,-36,-155,-146,-43,-44,284,288,-33,-37,-42,-65,-146,-34,-35,-38,-39,-40,-153,]),'cte_str':([109,],[157,]),'FALSE':([109,351,411,412,413,423,424,426,432,434,436,443,452,460,462,490,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'TRUE':([109,351,411,412,413,423,424,426,432,434,436,443,452,460,462,490,],[160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'START_GLOBAL_FUNCTION':([3,],[4,]),'empty':([3,6,8,9,15,20,21,22,23,27,28,40,51,54,55,97,101,111,114,115,116,118,119,120,139,140,144,148,150,153,154,162,166,168,169,170,171,172,173,180,192,193,194,195,196,197,198,199,200,212,217,218,230,231,239,240,242,243,283,284,286,296,306,317,319,321,323,325,327,329,331,333,334,338,340,342,383,384,387,388,389,],[5,10,10,17,17,32,32,32,32,38,41,41,103,107,107,142,147,165,175,177,179,103,103,103,203,206,211,216,219,224,147,227,165,179,179,179,179,179,179,147,257,260,263,266,269,272,275,278,281,179,292,295,227,301,179,179,179,179,142,335,211,292,350,257,260,263,266,269,272,275,278,281,380,382,385,219,403,405,295,408,410,]),'PROGRAM_A':([6,8,],[7,14,]),'VARS':([6,8,],[8,8,]),'METHOD':([6,8,9,15,],[9,9,15,15,]),'PROGRAM_B':([9,15,],[16,29,]),'VARS_A':([11,139,],[18,202,]),'TYPE':([11,12,139,],[19,25,19,]),'TYPEMETHOD':([12,],[24,]),'BLOCK':([13,108,208,291,343,404,],[27,152,285,340,388,416,]),'SAVE_TYPE':([20,21,22,23,],[31,33,34,35,]),'PRINTQUADS':([27,],[37,]),'BLOCK_A':([28,40,],[39,100,]),'STATEMENT':([28,40,],[40,40,]),'ASSIGNMENT':([28,40,],[42,42,]),'CONDITION':([28,40,],[43,43,]),'WRITE':([28,40,],[44,44,]),'PRE_CONDITIONAL_LOOP':([28,40,],[45,45,]),'POST_CONDITIONAL_LOOP':([28,40,],[46,46,]),'METHODCALL':([28,40,],[47,47,]),'READ':([28,40,],[48,48,]),'STATMETHODS':([28,40,],[49,49,]),'RETURN':([28,40,],[50,50,]),'ORDINARY_LEAST_SQUARES':([28,40,],[57,57,]),'LASSO':([28,40,],[58,58,]),'RIDGE':([28,40,],[59,59,]),'K_MEANS':([28,40,],[60,60,]),'MINI_BATCH_MEANS':([28,40,],[61,61,]),'TIME_SERIES_SPLIT':([28,40,],[62,62,]),'MEAN_ABSOLUTE_ERROR':([28,40,],[63,63,]),'MEAN_SQUARED_ERROR':([28,40,],[64,64,]),'MEDIAN_ABSOLUTE_ERROR':([28,40,],[65,65,]),'MEAN':([28,40,],[66,66,]),'MODE':([28,40,],[67,67,]),'MEDIAN':([28,40,],[68,68,]),'PROBABILITY':([28,40,],[69,69,]),'FREQUENCY':([28,40,],[70,70,]),'VARIANCE':([28,40,],[71,71,]),'STANDARD_DEVIATION':([28,40,],[72,72,]),'SKEWNESS':([28,40,],[73,73,]),'KURTOSI':([28,40,],[74,74,]),'VARS_B':([30,],[94,]),'SIMPLE':([30,205,],[95,282,]),'LIST':([30,379,],[96,399,]),'PUSH_STACK_OPERANDS':([51,118,119,120,],[101,180,181,182,]),'PUSH_STACK_JUMPS':([54,55,],[106,108,]),'EXPLOG':([75,104,151,163,164,178,287,297,],[110,149,220,228,229,244,338,344,]),'EXPRESSION':([75,104,105,112,151,163,164,178,287,294,297,],[111,111,150,166,111,111,111,111,111,342,111,]),'EXP':([75,98,102,104,105,112,146,151,163,164,167,178,210,215,287,294,297,302,303,],[113,144,148,113,113,113,213,113,113,113,231,113,286,290,113,113,113,345,346,]),'TERM':([75,98,102,104,105,112,146,151,163,164,167,178,210,215,287,294,297,302,303,304,305,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,347,348,]),'FACTOR':([75,98,102,104,105,112,146,151,163,164,167,178,210,215,287,294,297,302,303,304,305,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'VARCONSTAUX':([75,98,102,104,105,112,124,125,126,141,146,151,163,164,167,178,210,215,251,287,294,297,302,303,304,305,352,353,354,355,414,415,422,425,433,444,445,446,453,454,455,463,468,469,470,471,479,486,],[117,117,117,117,117,117,186,187,188,207,117,117,117,117,117,117,117,117,312,117,117,117,117,117,117,117,391,392,393,394,420,421,427,430,438,449,450,451,457,458,459,467,472,473,474,475,483,489,]),'SAVE_VAR':([97,283,],[140,140,]),'PARAMS':([98,],[143,]),'ISLIST':([101,154,180,],[145,225,245,]),'VARCTE':([109,],[153,]),'BOOLEAN':([109,351,411,412,413,423,424,426,432,434,436,443,452,460,462,490,],[158,390,417,418,419,428,429,431,437,439,441,448,456,464,466,492,]),'EXPLOG_A':([111,166,],[162,230,]),'EXPRESSION_A':([113,],[167,]),'SOLVE_OPERATION_SUM_MINUS':([114,],[174,]),'SOLVE_OPERATION_TIMES_DIVIDE':([115,],[176,]),'PUSH_STACK_OPERATORS':([116,168,169,170,171,172,173,212,239,240,242,243,],[178,232,233,234,235,236,237,287,302,303,304,305,]),'VARS_C':([139,],[201,]),'SIMPLE_A':([140,],[204,]),'PARAMS_A':([144,286,],[209,337,]),'METHODCALL_A':([148,],[214,]),'GENERATE_QUAD_PRINT':([150,342,],[218,387,]),'READ_A':([153,],[222,]),'SOLVE_OPERATION_LOGIC':([162,230,],[226,299,]),'EXP_A':([174,],[238,]),'TERM_A':([176,],[241,]),'MEAN_A':([192,317,],[255,361,]),'MODE_A':([193,319,],[258,363,]),'MEDIAN_A':([194,321,],[261,365,]),'PROBABILITY_A':([195,323,],[264,367,]),'FREQUENCY_A':([196,325,],[267,369,]),'VARIANCE_A':([197,327,],[270,371,]),'STANDARD_DEVIATION_A':([198,329,],[273,373,]),'SKEWNESS_A':([199,331,],[276,375,]),'KURTOSI_A':([200,333,],[279,377,]),'GENERATE_GOTOF_CONDITIONAL':([217,296,],[291,343,]),'WRITE_A':([218,387,],[293,406,]),'SOLVE_OPERATION_RELATIONSHIP':([231,],[300,]),'SAVE_ARRAY':([284,],[334,]),'POP_STACK_OPERATORS':([306,],[349,]),'LIST_A':([334,],[378,]),'SOLVE_OPERATION_ASSIGNMENT':([338,],[381,]),'CONDITION_A':([340,],[383,]),'SOLVE_OPERATION_CONDITIONAL':([383,],[402,]),'GENERATE_GOTO_CONDITIONAL':([384,],[404,]),'SOLVE_OPERATION_PRE_CONDITIONAL_LOOP':([388,],[407,]),'SOLVE_OPERATION_POST_CONDITIONAL_LOOP':([389,],[409,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> program globalFunc START_GLOBAL_FUNCTION semicolon PROGRAM_A start BLOCK PRINTQUADS','PROGRAM',8,'p_PROGRAM','parser.py',25),
  ('PROGRAM_A -> VARS PROGRAM_A','PROGRAM_A',2,'p_PROGRAM_A','parser.py',31),
  ('PROGRAM_A -> METHOD PROGRAM_B','PROGRAM_A',2,'p_PROGRAM_A','parser.py',32),
  ('PROGRAM_A -> empty','PROGRAM_A',1,'p_PROGRAM_A','parser.py',33),
  ('PROGRAM_B -> METHOD PROGRAM_B','PROGRAM_B',2,'p_PROGRAM_B','parser.py',39),
  ('PROGRAM_B -> empty','PROGRAM_B',1,'p_PROGRAM_B','parser.py',40),
  ('VARS -> var VARS_A','VARS',2,'p_VARS','parser.py',46),
  ('VARS_A -> TYPE colon VARS_B semicolon VARS_C','VARS_A',5,'p_VARS_A','parser.py',52),
  ('VARS_B -> SIMPLE','VARS_B',1,'p_VARS_B','parser.py',58),
  ('VARS_B -> LIST','VARS_B',1,'p_VARS_B','parser.py',59),
  ('VARS_C -> VARS_A','VARS_C',1,'p_VARS_C','parser.py',65),
  ('VARS_C -> empty','VARS_C',1,'p_VARS_C','parser.py',66),
  ('SIMPLE -> id SAVE_VAR SIMPLE_A','SIMPLE',3,'p_SIMPLE','parser.py',72),
  ('SIMPLE_A -> comma SIMPLE','SIMPLE_A',2,'p_SIMPLE_A','parser.py',78),
  ('SIMPLE_A -> empty','SIMPLE_A',1,'p_SIMPLE_A','parser.py',79),
  ('LIST -> id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A','LIST',6,'p_LIST','parser.py',85),
  ('LIST_A -> comma LIST','LIST_A',2,'p_LIST_A','parser.py',91),
  ('LIST_A -> empty','LIST_A',1,'p_LIST_A','parser.py',92),
  ('EXPLOG -> EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',3,'p_EXPLOG','parser.py',98),
  ('EXPLOG -> not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',4,'p_EXPLOG','parser.py',99),
  ('EXPLOG_A -> and EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',107),
  ('EXPLOG_A -> or EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',108),
  ('EXPLOG_A -> empty','EXPLOG_A',1,'p_EXPLOG_A','parser.py',109),
  ('EXPRESSION -> EXP','EXPRESSION',1,'p_EXPRESSION','parser.py',117),
  ('EXPRESSION -> EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP','EXPRESSION',4,'p_EXPRESSION','parser.py',118),
  ('EXPRESSION_A -> greater PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',126),
  ('EXPRESSION_A -> lessThan PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',127),
  ('EXPRESSION_A -> greaterEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',128),
  ('EXPRESSION_A -> lessThanEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',129),
  ('EXPRESSION_A -> equals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',130),
  ('EXPRESSION_A -> notEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',131),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS','EXP',2,'p_EXP','parser.py',137),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS EXP_A','EXP',3,'p_EXP','parser.py',138),
  ('EXP_A -> plus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',146),
  ('EXP_A -> minus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',147),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE','TERM',2,'p_TERM','parser.py',155),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A','TERM',3,'p_TERM','parser.py',156),
  ('TERM_A -> times PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',164),
  ('TERM_A -> divide PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',165),
  ('FACTOR -> lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS','FACTOR',5,'p_FACTOR','parser.py',173),
  ('FACTOR -> VARCONSTAUX','FACTOR',1,'p_FACTOR','parser.py',174),
  ('VARCONSTAUX -> id PUSH_STACK_OPERANDS ISLIST','VARCONSTAUX',3,'p_VARCONSTAUX','parser.py',183),
  ('VARCONSTAUX -> cte_i PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',184),
  ('VARCONSTAUX -> cte_f PUSH_STACK_OPERANDS','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',185),
  ('TYPE -> int SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',193),
  ('TYPE -> float SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',194),
  ('TYPE -> string SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',195),
  ('TYPE -> bool SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',196),
  ('BLOCK -> lCurlyBracket BLOCK_A rCurlyBracket','BLOCK',3,'p_BLOCK','parser.py',202),
  ('BLOCK_A -> STATEMENT BLOCK_A','BLOCK_A',2,'p_BLOCK_A','parser.py',208),
  ('BLOCK_A -> empty','BLOCK_A',1,'p_BLOCK_A','parser.py',209),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','parser.py',215),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',216),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',217),
  ('STATEMENT -> PRE_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',218),
  ('STATEMENT -> POST_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',219),
  ('STATEMENT -> METHODCALL','STATEMENT',1,'p_STATEMENT','parser.py',220),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',221),
  ('STATEMENT -> STATMETHODS','STATEMENT',1,'p_STATEMENT','parser.py',222),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',223),
  ('ASSIGNMENT -> id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon','ASSIGNMENT',8,'p_ASSIGNMENT','parser.py',229),
  ('READ -> scan lParenthesis VARCTE READ_A rParenthesis','READ',5,'p_READ','parser.py',235),
  ('READ_A -> comma','READ_A',1,'p_READ_A','parser.py',241),
  ('READ_A -> empty','READ_A',1,'p_READ_A','parser.py',242),
  ('ISLIST -> lSqrBracket EXP rSqrBracket','ISLIST',3,'p_ISLIST','parser.py',248),
  ('ISLIST -> empty','ISLIST',1,'p_ISLIST','parser.py',249),
  ('TYPEMETHOD -> TYPE','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',255),
  ('TYPEMETHOD -> void','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',256),
  ('CONDITION -> if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL','CONDITION',8,'p_CONDITION','parser.py',262),
  ('CONDITION_A -> else GENERATE_GOTO_CONDITIONAL BLOCK','CONDITION_A',3,'p_CONDITION_A','parser.py',268),
  ('CONDITION_A -> empty','CONDITION_A',1,'p_CONDITION_A','parser.py',269),
  ('WRITE -> print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon','WRITE',7,'p_WRITE','parser.py',275),
  ('WRITE_A -> comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A','WRITE_A',4,'p_WRITE_A','parser.py',281),
  ('WRITE_A -> empty','WRITE_A',1,'p_WRITE_A','parser.py',282),
  ('VARCTE -> id ISLIST','VARCTE',2,'p_VARCTE','parser.py',288),
  ('VARCTE -> cte_i','VARCTE',1,'p_VARCTE','parser.py',289),
  ('VARCTE -> cte_f','VARCTE',1,'p_VARCTE','parser.py',290),
  ('VARCTE -> cte_str','VARCTE',1,'p_VARCTE','parser.py',291),
  ('VARCTE -> BOOLEAN','VARCTE',1,'p_VARCTE','parser.py',292),
  ('METHOD -> func TYPEMETHOD id lParenthesis PARAMS rParenthesis BLOCK semicolon','METHOD',8,'p_METHOD','parser.py',298),
  ('PARAMS -> EXP PARAMS_A','PARAMS',2,'p_PARAMS','parser.py',304),
  ('PARAMS_A -> comma EXP PARAMS_A','PARAMS_A',3,'p_PARAMS_A','parser.py',310),
  ('PARAMS_A -> empty','PARAMS_A',1,'p_PARAMS_A','parser.py',311),
  ('PRE_CONDITIONAL_LOOP -> while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','PRE_CONDITIONAL_LOOP',8,'p_PRE_CONDITIONAL_LOOP','parser.py',317),
  ('POST_CONDITIONAL_LOOP -> do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP','POST_CONDITIONAL_LOOP',8,'p_POST_CONDITIONAL_LOOP','parser.py',323),
  ('METHODCALL -> id lParenthesis EXP METHODCALL_A rParenthesis semicolon','METHODCALL',6,'p_METHODCALL','parser.py',329),
  ('METHODCALL_A -> comma EXP','METHODCALL_A',2,'p_METHODCALL_A','parser.py',335),
  ('METHODCALL_A -> empty','METHODCALL_A',1,'p_METHODCALL_A','parser.py',336),
  ('RETURN -> return EXPLOG semicolon','RETURN',3,'p_RETURN','parser.py',342),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN','parser.py',348),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN','parser.py',349),
  ('STATMETHODS -> ORDINARY_LEAST_SQUARES','STATMETHODS',1,'p_STATMETHODS','parser.py',355),
  ('STATMETHODS -> LASSO','STATMETHODS',1,'p_STATMETHODS','parser.py',356),
  ('STATMETHODS -> RIDGE','STATMETHODS',1,'p_STATMETHODS','parser.py',357),
  ('STATMETHODS -> K_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',358),
  ('STATMETHODS -> MINI_BATCH_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',359),
  ('STATMETHODS -> TIME_SERIES_SPLIT','STATMETHODS',1,'p_STATMETHODS','parser.py',360),
  ('STATMETHODS -> MEAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',361),
  ('STATMETHODS -> MEAN_SQUARED_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',362),
  ('STATMETHODS -> MEDIAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',363),
  ('STATMETHODS -> MEAN','STATMETHODS',1,'p_STATMETHODS','parser.py',364),
  ('STATMETHODS -> MODE','STATMETHODS',1,'p_STATMETHODS','parser.py',365),
  ('STATMETHODS -> MEDIAN','STATMETHODS',1,'p_STATMETHODS','parser.py',366),
  ('STATMETHODS -> PROBABILITY','STATMETHODS',1,'p_STATMETHODS','parser.py',367),
  ('STATMETHODS -> FREQUENCY','STATMETHODS',1,'p_STATMETHODS','parser.py',368),
  ('STATMETHODS -> VARIANCE','STATMETHODS',1,'p_STATMETHODS','parser.py',369),
  ('STATMETHODS -> STANDARD_DEVIATION','STATMETHODS',1,'p_STATMETHODS','parser.py',370),
  ('STATMETHODS -> SKEWNESS','STATMETHODS',1,'p_STATMETHODS','parser.py',371),
  ('STATMETHODS -> KURTOSI','STATMETHODS',1,'p_STATMETHODS','parser.py',372),
  ('ORDINARY_LEAST_SQUARES -> ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon','ORDINARY_LEAST_SQUARES',15,'p_ORDINARY_LEAST_SQUARES','parser.py',378),
  ('LASSO -> las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon','LASSO',29,'p_LASSO','parser.py',384),
  ('RIDGE -> rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon','RIDGE',23,'p_RIDGE','parser.py',390),
  ('K_MEANS -> kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon','K_MEANS',25,'p_K_MEANS','parser.py',396),
  ('MINI_BATCH_MEANS -> mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','MINI_BATCH_MEANS',27,'p_MINI_BATCH_MEANS','parser.py',402),
  ('TIME_SERIES_SPLIT -> tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','TIME_SERIES_SPLIT',7,'p_TIME_SERIES_SPLIT','parser.py',408),
  ('MEAN_ABSOLUTE_ERROR -> mean_abs_err lParenthesis id comma id rParenthesis semicolon','MEAN_ABSOLUTE_ERROR',7,'p_MEAN_ABSOLUTE_ERROR','parser.py',414),
  ('MEAN_SQUARED_ERROR -> mean_sqr_err lParenthesis id comma id rParenthesis semicolon','MEAN_SQUARED_ERROR',7,'p_MEAN_SQUARED_ERROR','parser.py',420),
  ('MEDIAN_ABSOLUTE_ERROR -> median_abs_err lParenthesis id comma id rParenthesis semicolon','MEDIAN_ABSOLUTE_ERROR',7,'p_MEDIAN_ABSOLUTE_ERROR','parser.py',426),
  ('MEAN -> mean lParenthesis id MEAN_A rParenthesis semicolon','MEAN',6,'p_MEAN','parser.py',432),
  ('MEAN_A -> comma id MEAN_A','MEAN_A',3,'p_MEAN_A','parser.py',438),
  ('MEAN_A -> empty','MEAN_A',1,'p_MEAN_A','parser.py',439),
  ('MODE -> mode lParenthesis id MODE_A rParenthesis semicolon','MODE',6,'p_MODE','parser.py',445),
  ('MODE_A -> comma id MODE_A','MODE_A',3,'p_MODE_A','parser.py',451),
  ('MODE_A -> empty','MODE_A',1,'p_MODE_A','parser.py',452),
  ('MEDIAN -> median lParenthesis id MEDIAN_A rParenthesis semicolon','MEDIAN',6,'p_MEDIAN','parser.py',458),
  ('MEDIAN_A -> comma id MEDIAN_A','MEDIAN_A',3,'p_MEDIAN_A','parser.py',464),
  ('MEDIAN_A -> empty','MEDIAN_A',1,'p_MEDIAN_A','parser.py',465),
  ('PROBABILITY -> prob lParenthesis id PROBABILITY_A rParenthesis semicolon','PROBABILITY',6,'p_PROBABILITY','parser.py',471),
  ('PROBABILITY_A -> comma id PROBABILITY_A','PROBABILITY_A',3,'p_PROBABILITY_A','parser.py',477),
  ('PROBABILITY_A -> empty','PROBABILITY_A',1,'p_PROBABILITY_A','parser.py',478),
  ('FREQUENCY -> freq lParenthesis id FREQUENCY_A rParenthesis semicolon','FREQUENCY',6,'p_FREQUENCY','parser.py',484),
  ('FREQUENCY_A -> comma id FREQUENCY_A','FREQUENCY_A',3,'p_FREQUENCY_A','parser.py',490),
  ('FREQUENCY_A -> empty','FREQUENCY_A',1,'p_FREQUENCY_A','parser.py',491),
  ('VARIANCE -> variance lParenthesis id VARIANCE_A rParenthesis semicolon','VARIANCE',6,'p_VARIANCE','parser.py',497),
  ('VARIANCE_A -> comma id VARIANCE_A','VARIANCE_A',3,'p_VARIANCE_A','parser.py',503),
  ('VARIANCE_A -> empty','VARIANCE_A',1,'p_VARIANCE_A','parser.py',504),
  ('STANDARD_DEVIATION -> stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon','STANDARD_DEVIATION',6,'p_STANDARD_DEVIATION','parser.py',510),
  ('STANDARD_DEVIATION_A -> comma id STANDARD_DEVIATION_A','STANDARD_DEVIATION_A',3,'p_STANDARD_DEVIATION_A','parser.py',516),
  ('STANDARD_DEVIATION_A -> empty','STANDARD_DEVIATION_A',1,'p_STANDARD_DEVIATION_A','parser.py',517),
  ('SKEWNESS -> skew lParenthesis id SKEWNESS_A rParenthesis semicolon','SKEWNESS',6,'p_SKEWNESS','parser.py',523),
  ('SKEWNESS_A -> comma id SKEWNESS_A','SKEWNESS_A',3,'p_SKEWNESS_A','parser.py',529),
  ('SKEWNESS_A -> empty','SKEWNESS_A',1,'p_SKEWNESS_A','parser.py',530),
  ('KURTOSI -> kurt lParenthesis id KURTOSI_A rParenthesis semicolon','KURTOSI',6,'p_KURTOSI','parser.py',536),
  ('KURTOSI_A -> comma id KURTOSI_A','KURTOSI_A',3,'p_KURTOSI_A','parser.py',542),
  ('KURTOSI_A -> empty','KURTOSI_A',1,'p_KURTOSI_A','parser.py',543),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',549),
  ('START_GLOBAL_FUNCTION -> empty','START_GLOBAL_FUNCTION',1,'p_START_GLOBAL_FUNCTION','parser.py',580),
  ('SAVE_TYPE -> empty','SAVE_TYPE',1,'p_SAVE_TYPE','parser.py',592),
  ('SAVE_VAR -> empty','SAVE_VAR',1,'p_SAVE_VAR','parser.py',602),
  ('SAVE_ARRAY -> empty','SAVE_ARRAY',1,'p_SAVE_ARRAY','parser.py',618),
  ('PUSH_STACK_OPERANDS -> empty','PUSH_STACK_OPERANDS',1,'p_PUSH_STACK_OPERANDS','parser.py',636),
  ('PUSH_STACK_OPERATORS -> empty','PUSH_STACK_OPERATORS',1,'p_PUSH_STACK_OPERATORS','parser.py',663),
  ('POP_STACK_OPERATORS -> empty','POP_STACK_OPERATORS',1,'p_POP_STACK_OPERATORS','parser.py',674),
  ('SOLVE_OPERATION_SUM_MINUS -> empty','SOLVE_OPERATION_SUM_MINUS',1,'p_SOLVE_OPERATION_SUM_MINUS','parser.py',734),
  ('SOLVE_OPERATION_TIMES_DIVIDE -> empty','SOLVE_OPERATION_TIMES_DIVIDE',1,'p_SOLVE_OPERATION_TIMES_DIVIDE','parser.py',748),
  ('SOLVE_OPERATION_RELATIONSHIP -> empty','SOLVE_OPERATION_RELATIONSHIP',1,'p_SOLVE_OPERATION_RELATIONSHIP','parser.py',762),
  ('SOLVE_OPERATION_LOGIC -> empty','SOLVE_OPERATION_LOGIC',1,'p_SOLVE_OPERATION_LOGIC','parser.py',775),
  ('SOLVE_OPERATION_ASSIGNMENT -> empty','SOLVE_OPERATION_ASSIGNMENT',1,'p_SOLVE_OPERATION_ASSIGNMENT','parser.py',822),
  ('GENERATE_GOTOF_CONDITIONAL -> empty','GENERATE_GOTOF_CONDITIONAL',1,'p_GENERATE_GOTOF_CONDITIONAL','parser.py',844),
  ('SOLVE_OPERATION_CONDITIONAL -> empty','SOLVE_OPERATION_CONDITIONAL',1,'p_SOLVE_OPERATION_CONDITIONAL','parser.py',873),
  ('GENERATE_GOTO_CONDITIONAL -> empty','GENERATE_GOTO_CONDITIONAL',1,'p_GENERATE_GOTO_CONDITIONAL','parser.py',884),
  ('PUSH_STACK_JUMPS -> empty','PUSH_STACK_JUMPS',1,'p_PUSH_STACK_JUMPS','parser.py',904),
  ('SOLVE_OPERATION_PRE_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_PRE_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','parser.py',916),
  ('SOLVE_OPERATION_POST_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_POST_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_POST_CONDITIONAL_LOOP','parser.py',943),
  ('GENERATE_QUAD_PRINT -> empty','GENERATE_QUAD_PRINT',1,'p_GENERATE_QUAD_PRINT','parser.py',962),
  ('PRINTQUADS -> empty','PRINTQUADS',1,'p_PRINTQUADS','parser.py',979),
]

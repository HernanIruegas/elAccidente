
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'FALSE TRUE and assign bool colon comma cte_f cte_i cte_str divide do else equals float freq func globalFunc greater greaterEquals id if int kmeans kurt lCurlyBracket lParenthesis lSqrBracket las lessThan lessThanEquals mbm mean mean_abs_err mean_sqr_err median median_abs_err minus mode not notEquals ols or plus print prob program rCurlyBracket rParenthesis rSqrBracket return rid scan semicolon skew start stddev string times tseries var variance void while\n\tPROGRAM : program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS\n\t\n\tPROGRAM_A : VARS PROGRAM_A\n\t\t\t| METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tPROGRAM_B : METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tVARS : var TYPE colon VARS_A semicolon VARS_B\n\t\n\tVARS_A : id assign VARCTE_AUX_VARS SIMPLE\n\t\t\t| id SAVE_VAR SIMPLE\n\t\t\t| id VALIDATE_NAME_ARRAY lSqrBracket cte_i ACUMULATE_R LIST rSqrBracket CALCULATE_ARRAY LIST_A\n\t\t\t| empty\n\t\n\tVARS_B : VARS\n\t\t\t| empty\n\t\n\tSIMPLE : comma VARS_A\n\t\t\t| empty\n\t\n\tLIST : comma cte_i ACUMULATE_R LIST\n\t\t\t| empty\n\t\n\tLIST_A : comma VARS_A\n\t\t| empty\n\t\n\tVARCTE_AUX_VARS : id ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR\n\t\t| cte_f PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR\n\t\t| cte_str PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR\n\t\t| BOOLEAN_AUX_VARS\n\t\n\tBOOLEAN_AUX_VARS : FALSE SAVE_ASSIGNED_VAR\n\t\t\t\t\t| TRUE SAVE_ASSIGNED_VAR\n\t\n\tVALIDATE_NAME_ARRAY : empty\t\n\t\n\tACUMULATE_R : empty\n\t\n\tCALCULATE_ARRAY : empty\n\t\n\tEXPLOG : EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\t| not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\n\tEXPLOG_A : and EXPLOG\n\t\t| or EXPLOG\n\t\t| empty\n\t\n\tEXPRESSION : EXP \n\t\t\t\t| EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP\n\t\n\tEXPRESSION_A : greater PUSH_STACK_OPERATORS\n\t\t\t\t| lessThan PUSH_STACK_OPERATORS\n\t\t\t\t| greaterEquals PUSH_STACK_OPERATORS\n\t\t\t\t| lessThanEquals PUSH_STACK_OPERATORS\n\t\t\t\t| equals PUSH_STACK_OPERATORS\n\t\t\t\t| notEquals PUSH_STACK_OPERATORS\n\t\n\tEXP : TERM SOLVE_OPERATION_SUM_MINUS\n\t\t| TERM SOLVE_OPERATION_SUM_MINUS EXP_A \n\t\n\tEXP_A : plus PUSH_STACK_OPERATORS EXP\n\t\t| minus PUSH_STACK_OPERATORS EXP\n\t\n\tTERM : FACTOR SOLVE_OPERATION_TIMES_DIVIDE\n\t\t| FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A \n\t\n\tTERM_A : times PUSH_STACK_OPERATORS TERM\n\t\t\t| divide PUSH_STACK_OPERATORS TERM\n\t\n\tFACTOR : lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS\n\t\t\t| VARCONSTAUX\n\t\n\tVARCONSTAUX : id PUSH_STACK_OPERANDS ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS_CONSTANT\n\t\t| cte_f PUSH_STACK_OPERANDS_CONSTANT\n\t\n\tTYPE : int SAVE_TYPE\n\t\t| float SAVE_TYPE\n\t\t| string SAVE_TYPE\n\t\t| bool SAVE_TYPE\n\t\n\tBLOCK : lCurlyBracket BLOCK_A rCurlyBracket\n\t\n\tBLOCK_A : STATEMENT BLOCK_A\n\t\t\t| empty\n\t\n\tSTATEMENT : ASSIGNMENT\n\t\t\t| CONDITION\n\t\t\t| WRITE\n\t\t\t| PRE_CONDITIONAL_LOOP\n\t\t\t| POST_CONDITIONAL_LOOP\n\t\t\t| METHODCALL\n\t\t\t| READ\n\t\t\t| STATMETHODS\n\t\t\t| RETURN \n\t\n\tASSIGNMENT : id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon \n\t\n\tREAD : scan lParenthesis VARCTE READ_A rParenthesis\n\t\n\tREAD_A : comma\n\t\t| empty\n\t\n\tISLIST : lSqrBracket EXP rSqrBracket\n\t\t\t| empty \n\t\n\tTYPEMETHOD : TYPE\n\t\t\t| void SAVE_TYPE\n\t\n\tCONDITION : if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL\n\t\n\tCONDITION_A : else GENERATE_GOTO_CONDITIONAL BLOCK\n\t\t\t\t| empty\n\t\n\tWRITE : print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon\n\t\n\tWRITE_A : comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A\n\t\t| empty\n\t\n\tVARCTE : id ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS_CONSTANT\n\t\t| cte_f PUSH_STACK_OPERANDS_CONSTANT\n\t\t| cte_str PUSH_STACK_OPERANDS_CONSTANT\n\t\t| BOOLEAN\n\t\n\tMETHOD : func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE\n\t\n\tMETHOD_A : PARAMS\n\t\t\t| empty\t\t\n\t\n\tPARAMS : TYPE id SAVE_PARAM SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A \n\t\n\tPARAMS_A : comma PARAMS\n\t\t| empty\n\t\n\tPRE_CONDITIONAL_LOOP : while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP\n\t\n\tPOST_CONDITIONAL_LOOP : do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP\n\t\n\tMETHODCALL : id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL\n\t\n\tMETHODCALL_A : comma EXP\n\t\t\t\t| empty\n\t\n\tRETURN : return EXPLOG semicolon\n\t\n\tBOOLEAN : FALSE PUSH_STACK_OPERANDS_CONSTANT\n\t\t\t| TRUE PUSH_STACK_OPERANDS_CONSTANT\n\t\n\tSTATMETHODS : ORDINARY_LEAST_SQUARES\n\t\t\t\t| LASSO\n\t\t\t\t| RIDGE\n\t\t\t\t| K_MEANS\n\t\t\t\t| MINI_BATCH_MEANS\n\t\t\t\t| TIME_SERIES_SPLIT\n\t\t\t\t| MEAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN_SQUARED_ERROR\n\t\t\t\t| MEDIAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN\n\t\t\t\t| MODE\n\t\t\t\t| MEDIAN\n\t\t\t\t| PROBABILITY\n\t\t\t\t| FREQUENCY\n\t\t\t\t| VARIANCE\n\t\t\t\t| STANDARD_DEVIATION\n\t\t\t\t| SKEWNESS\n\t\t\t\t| KURTOSI\n\t\n\tORDINARY_LEAST_SQUARES : ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon\n\t\n\tLASSO : las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon\n\t\n\tRIDGE : rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon\n\t\n\tK_MEANS : kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon\n\t\n\tMINI_BATCH_MEANS : mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tTIME_SERIES_SPLIT : tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tMEAN_ABSOLUTE_ERROR : mean_abs_err lParenthesis id comma id rParenthesis semicolon\n\t\n\tMEAN_SQUARED_ERROR : mean_sqr_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEDIAN_ABSOLUTE_ERROR : median_abs_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEAN : mean lParenthesis id MEAN_A rParenthesis semicolon\n\t\n\tMEAN_A : comma id MEAN_A\n\t\t| empty\n\t\n\tMODE : mode lParenthesis id MODE_A rParenthesis semicolon\n\t\n\tMODE_A : comma id MODE_A\n\t\t| empty\n\t\n\tMEDIAN : median lParenthesis id MEDIAN_A rParenthesis semicolon\n\t\n\tMEDIAN_A : comma id MEDIAN_A\n\t\t| empty\n\t\n\tPROBABILITY : prob lParenthesis id PROBABILITY_A rParenthesis semicolon\n\t\n\tPROBABILITY_A : comma id PROBABILITY_A\n\t\t| empty\n\t\n\tFREQUENCY : freq lParenthesis id FREQUENCY_A rParenthesis semicolon\n\t\n\tFREQUENCY_A : comma id FREQUENCY_A\n\t\t| empty\n\t\n\tVARIANCE : variance lParenthesis id VARIANCE_A rParenthesis semicolon\n\t\n\tVARIANCE_A : comma id VARIANCE_A\n\t\t| empty\n\t\n\tSTANDARD_DEVIATION : stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon\n\t\n\tSTANDARD_DEVIATION_A : comma id STANDARD_DEVIATION_A\n\t\t| empty\n\t\n\tSKEWNESS : skew lParenthesis id SKEWNESS_A rParenthesis semicolon\n\t\n\tSKEWNESS_A : comma id SKEWNESS_A\n\t\t| empty\n\t\n\tKURTOSI : kurt  lParenthesis id KURTOSI_A rParenthesis semicolon\n\t\n\tKURTOSI_A : comma id KURTOSI_A\n\t\t| empty\n\t\n    empty :\n    \n\tSTART_FUNCTION : empty\n\t\n\tSAVE_TYPE : empty\n\t\n\tSAVE_VAR : empty\n\t\n\tSAVE_ASSIGNED_VAR : empty\n\t\n\tSAVE_PARAM : empty\n\t\n\tINCREMENT_PARAM_COUNTER : empty\n\t\n\tSAVE_COUNTER_PARAM : empty\n\t\n\tSAVE_COUNTER_QUAD : empty\n\t\n\tEND_PROCEDURE : empty\n\t\n\tSAVE_PARAM_TYPE : empty\n\t\n\tVALIDATE_FUNCTION_NAME : empty\n\t\n    ERA : empty\n    \n    VALIDATE_PARAMETER : empty\n    \n\tVALIDATE_METHOD_CALL : empty\n\t\n\tPUSH_STACK_OPERANDS : empty\n\t\n\tPUSH_STACK_OPERANDS_CONSTANT : empty\n\t\n\tPUSH_STACK_OPERATORS : empty\n\t\n\tPOP_STACK_OPERATORS : empty\n\t\n\tSOLVE_OPERATION_SUM_MINUS : empty\n\t\n\tSOLVE_OPERATION_TIMES_DIVIDE : empty\n\t\n\tSOLVE_OPERATION_RELATIONSHIP : empty\n\t\n\tSOLVE_OPERATION_LOGIC : empty\n\t\n\tSOLVE_OPERATION_ASSIGNMENT : empty\n\t\n\tGENERATE_GOTOF_CONDITIONAL : empty\n\t\n\tSOLVE_OPERATION_CONDITIONAL : empty\n\t\n\tGENERATE_GOTO_CONDITIONAL : empty\n\t\n\tPUSH_STACK_JUMPS : empty\n\t\n\tSOLVE_OPERATION_PRE_CONDITIONAL_LOOP : empty\n\t\n\tSOLVE_OPERATION_POST_CONDITIONAL_LOOP : empty\n\t\n\tGENERATE_QUAD_PRINT : empty\n\t\n\tPRINTQUADS : empty\n\t'
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,50,71,72,144,],[0,-159,-1,-190,-60,]),'void':([2,9,10,11,12,13,15,17,18,19,20,30,44,52,53,54,144,331,382,383,],[3,-159,16,-159,-159,-4,28,-2,-159,-3,-6,-5,-159,-7,-12,-13,-60,-159,-91,-168,]),'globalFunc':([3,4,5,],[-159,6,-161,]),'start':([5,16,29,],[-161,-159,38,]),'colon':([5,21,22,23,24,25,32,33,34,35,],[-161,31,-159,-159,-159,-159,-56,-57,-58,-59,]),'id':([5,22,23,24,25,26,27,28,31,32,33,34,35,37,45,51,64,70,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,129,144,149,150,154,157,161,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,198,208,210,211,214,215,216,217,218,219,220,225,226,257,258,279,280,281,282,283,284,286,287,289,290,293,294,295,298,299,300,301,303,306,309,312,315,318,321,324,327,334,339,342,343,347,348,349,350,390,402,403,404,405,410,412,414,416,418,420,422,424,426,429,436,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,470,471,472,473,479,480,481,484,492,503,504,505,506,512,513,514,522,527,528,529,530,538,540,545,547,552,554,],[-161,-159,-159,-159,-159,36,-78,-159,40,-56,-57,-58,-59,-79,55,85,40,143,85,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,163,163,-60,163,163,201,163,-159,231,232,233,163,163,163,237,238,239,240,241,242,243,244,245,246,247,248,163,-102,163,163,163,-159,-159,-159,-159,-159,-159,163,-176,-159,163,-37,-38,-39,-40,-41,-42,-159,-159,-159,-159,352,353,354,163,358,359,360,362,364,366,368,370,372,374,376,378,163,163,163,-73,163,163,163,163,-159,163,163,163,163,-132,-135,-138,-141,-144,-147,-150,-153,-156,40,163,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,163,163,-159,-81,-99,-173,163,163,163,163,163,163,-123,163,163,163,163,163,163,163,163,163,-125,163,-126,-127,-124,]),'semicolon':([6,7,8,31,39,40,41,46,48,55,56,57,58,59,60,61,62,63,64,65,128,130,131,132,133,134,135,136,137,138,139,155,156,158,159,160,162,163,164,165,185,186,187,209,212,213,221,222,223,224,227,228,229,230,249,273,274,275,276,277,278,285,288,292,329,344,345,346,351,361,363,365,367,369,371,373,375,377,379,380,387,391,395,396,397,398,399,400,406,407,408,409,428,429,430,433,434,454,456,501,536,544,550,553,],[-159,9,-160,-159,44,-159,-11,-159,-162,-159,-159,-159,-159,-159,-24,-159,-159,-9,-159,-15,-20,-77,-8,-159,-175,-159,-159,-25,-163,-26,-14,208,-159,-35,-159,-159,-52,-159,-159,-159,-21,-22,-23,-159,-34,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-30,-181,-32,-33,-159,-159,-44,-48,-53,-159,-31,-36,-180,-159,410,412,414,416,418,420,422,424,426,-159,-29,-159,441,-45,-46,-49,-50,-51,-177,450,451,452,453,-10,-159,-19,455,-182,-18,472,506,540,547,552,554,]),'lParenthesis':([8,36,42,85,86,87,88,90,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,147,148,149,150,151,152,157,161,194,195,198,210,211,214,215,216,217,218,219,220,225,226,257,258,263,279,280,281,282,283,284,286,287,289,290,334,339,342,347,348,349,350,436,],[-160,-159,49,-159,149,150,-159,154,161,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,161,-159,-170,161,161,198,-186,161,-159,258,-171,161,161,161,161,-159,-159,-159,-159,-159,-159,161,-176,-159,161,342,-37,-38,-39,-40,-41,-42,-159,-159,-159,-159,161,161,161,161,161,161,161,161,]),'lCurlyBracket':([8,38,43,89,152,153,190,253,254,259,336,337,341,393,439,460,461,],[-160,-159,51,-159,-186,51,-159,51,-167,-159,51,-183,-159,51,-159,51,-185,]),'var':([9,11,44,52,53,54,],[14,14,14,-7,-12,-13,]),'func':([9,11,12,18,44,52,53,54,144,331,382,383,],[15,15,15,15,-159,-7,-12,-13,-60,-159,-91,-168,]),'int':([14,15,49,385,],[22,22,22,22,]),'float':([14,15,49,385,543,],[23,23,23,23,546,]),'string':([14,15,49,296,297,385,494,520,535,537,],[24,24,24,355,356,24,499,524,539,541,]),'bool':([14,15,49,385,],[25,25,25,25,]),'assign':([40,85,130,146,148,193,249,],[45,-159,-77,-159,-174,257,-76,]),'comma':([40,46,48,55,56,57,58,59,60,61,62,128,130,132,133,134,135,136,137,138,140,143,158,159,160,162,163,164,165,185,186,187,188,189,191,192,197,200,201,202,203,204,205,206,207,221,222,223,224,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,255,256,260,261,267,268,269,270,271,272,278,285,288,292,329,330,332,333,335,345,346,351,352,353,354,355,356,362,364,366,368,370,372,374,376,378,379,380,381,388,389,392,395,396,397,398,399,400,442,445,446,447,448,449,474,475,476,477,478,486,487,488,489,490,497,498,499,500,507,508,509,510,515,516,517,518,523,524,525,526,531,533,534,539,542,546,],[-159,64,-162,-159,64,-159,-159,-159,-24,-159,-159,-20,-77,-159,-175,-159,-159,-25,-163,-26,-159,-159,-35,-159,-159,-52,-159,-159,-159,-21,-22,-23,251,-28,-159,-164,-159,265,-159,-159,-159,-159,-90,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,293,294,295,296,297,298,299,300,301,303,306,309,312,315,318,321,324,327,-76,-159,-169,339,-189,-86,-87,-88,-89,-103,-104,-159,-44,-48,-53,-159,-159,385,-165,-159,-36,-180,-159,401,402,403,404,405,303,306,309,312,315,318,321,324,327,429,-29,251,436,-172,-159,-45,-46,-49,-50,-51,-177,339,467,468,469,470,471,481,482,483,484,485,491,492,493,494,495,502,503,504,505,511,512,513,514,519,520,521,522,527,528,529,530,535,537,538,543,545,549,]),'lSqrBracket':([40,47,48,55,85,146,148,163,201,227,228,],[-159,66,-27,129,-159,129,-174,-159,129,129,-174,]),'cte_i':([45,66,109,129,149,150,154,157,161,169,170,171,198,210,211,214,215,216,217,218,219,220,225,226,251,257,258,279,280,281,282,283,284,286,287,289,290,298,334,339,342,347,348,349,350,402,403,404,405,436,470,471,481,484,492,503,504,505,512,513,514,522,527,528,529,530,538,545,],[57,140,164,164,164,164,202,164,-159,164,164,164,164,164,164,164,-159,-159,-159,-159,-159,-159,164,-176,330,-159,164,-37,-38,-39,-40,-41,-42,-159,-159,-159,-159,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,]),'cte_f':([45,109,129,149,150,154,157,161,169,170,171,198,210,211,214,215,216,217,218,219,220,225,226,257,258,279,280,281,282,283,284,286,287,289,290,298,334,339,342,347,348,349,350,402,403,404,405,436,470,471,481,484,492,503,504,505,512,513,514,522,527,528,529,530,538,545,],[58,165,165,165,165,203,165,-159,165,165,165,165,165,165,165,-159,-159,-159,-159,-159,-159,165,-176,-159,165,-37,-38,-39,-40,-41,-42,-159,-159,-159,-159,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'cte_str':([45,154,],[59,204,]),'FALSE':([45,154,401,467,468,469,482,483,485,491,493,495,502,511,519,521,549,],[61,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,]),'TRUE':([45,154,401,467,468,469,482,483,485,491,493,495,502,511,519,521,549,],[62,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,]),'rParenthesis':([49,67,68,69,130,133,141,142,143,156,158,159,160,162,163,164,165,191,192,196,197,200,201,202,203,204,205,206,207,209,212,213,221,222,223,224,227,228,229,230,240,241,242,243,244,245,246,247,248,249,255,256,260,261,262,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,285,288,291,292,302,304,305,307,308,310,311,313,314,316,317,319,320,322,323,325,326,328,332,333,335,338,340,344,345,346,351,357,358,359,360,362,364,366,368,370,372,374,376,378,384,386,388,389,392,394,395,396,397,398,399,400,411,413,415,417,419,421,423,425,427,432,435,437,442,457,462,496,532,541,548,551,],[-159,-159,-92,-93,-77,-175,190,-166,-159,-159,-35,-159,-159,-52,-159,-159,-159,-159,-164,259,-159,-159,-159,-159,-159,-159,-90,-159,-159,-159,-34,-159,-43,-178,-47,-179,-159,-174,-54,-55,-159,-159,-159,-159,-159,-159,-159,-159,-159,-76,-159,-169,-159,-189,341,343,-74,-75,-86,-87,-88,-89,-103,-104,-30,-181,-32,-33,-159,-159,-44,-48,351,-53,361,-134,363,-137,365,-140,367,-143,369,-146,371,-149,373,-152,375,-155,377,-158,-159,-165,-159,391,-85,-31,-36,-180,-159,406,407,408,409,-159,-159,-159,-159,-159,-159,-159,-159,-159,-94,-96,-159,-172,-159,444,-45,-46,-49,-50,-51,-177,-133,-136,-139,-142,-145,-148,-151,-154,-157,-95,456,-101,-159,-100,-84,501,536,544,550,553,]),'rCurlyBracket':([51,73,74,75,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,145,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[-159,144,-159,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-61,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'if':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[86,86,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'print':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[87,87,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'while':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,199,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[88,88,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,263,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'do':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[89,89,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'scan':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[90,90,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'return':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[109,109,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'ols':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[110,110,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'las':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[111,111,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'rid':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[112,112,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'kmeans':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[113,113,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'mbm':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[114,114,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'tseries':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[115,115,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'mean_abs_err':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[116,116,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'mean_sqr_err':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[117,117,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'median_abs_err':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[118,118,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'mean':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[119,119,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'mode':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[120,120,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'median':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[121,121,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'prob':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[122,122,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'freq':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[123,123,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'variance':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[124,124,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'stddev':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[125,125,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'skew':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[126,126,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'kurt':([51,74,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,144,208,343,390,410,412,414,416,418,420,422,424,426,438,440,441,443,444,450,451,452,453,455,458,459,463,464,465,466,472,473,479,480,506,540,547,552,554,],[127,127,-63,-64,-65,-66,-67,-68,-69,-70,-71,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-60,-102,-73,-159,-132,-135,-138,-141,-144,-147,-150,-153,-156,-159,-82,-83,-159,-159,-128,-129,-130,-131,-72,-80,-184,-97,-187,-98,-188,-159,-81,-99,-173,-123,-125,-126,-127,-124,]),'not':([109,149,161,198,210,211,225,226,257,334,342,],[157,157,-159,157,157,157,157,-176,-159,157,157,]),'times':([130,133,160,162,163,164,165,223,224,227,228,229,230,249,292,351,399,400,],[-77,-175,-159,-52,-159,-159,-159,289,-179,-159,-174,-54,-55,-76,-53,-159,-51,-177,]),'divide':([130,133,160,162,163,164,165,223,224,227,228,229,230,249,292,351,399,400,],[-77,-175,-159,-52,-159,-159,-159,290,-179,-159,-174,-54,-55,-76,-53,-159,-51,-177,]),'plus':([130,133,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,288,292,351,397,398,399,400,],[-77,-175,-159,-159,-52,-159,-159,-159,286,-178,-47,-179,-159,-174,-54,-55,-76,-48,-53,-159,-49,-50,-51,-177,]),'minus':([130,133,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,288,292,351,397,398,399,400,],[-77,-175,-159,-159,-52,-159,-159,-159,287,-178,-47,-179,-159,-174,-54,-55,-76,-48,-53,-159,-49,-50,-51,-177,]),'greater':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,215,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'lessThan':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,216,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'greaterEquals':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,217,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'lessThanEquals':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,218,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'equals':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,219,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'notEquals':([130,133,158,159,160,162,163,164,165,221,222,223,224,227,228,229,230,249,285,288,292,351,395,396,397,398,399,400,],[-77,-175,220,-159,-159,-52,-159,-159,-159,-43,-178,-47,-179,-159,-174,-54,-55,-76,-44,-48,-53,-159,-45,-46,-49,-50,-51,-177,]),'and':([130,133,156,158,159,160,162,163,164,165,213,221,222,223,224,227,228,229,230,249,278,285,288,292,345,346,351,395,396,397,398,399,400,],[-77,-175,210,-35,-159,-159,-52,-159,-159,-159,210,-43,-178,-47,-179,-159,-174,-54,-55,-76,-159,-44,-48,-53,-36,-180,-159,-45,-46,-49,-50,-51,-177,]),'or':([130,133,156,158,159,160,162,163,164,165,213,221,222,223,224,227,228,229,230,249,278,285,288,292,345,346,351,395,396,397,398,399,400,],[-77,-175,211,-35,-159,-159,-52,-159,-159,-159,211,-43,-178,-47,-179,-159,-174,-54,-55,-76,-159,-44,-48,-53,-36,-180,-159,-45,-46,-49,-50,-51,-177,]),'rSqrBracket':([130,133,140,159,160,162,163,164,165,184,188,189,221,222,223,224,227,228,229,230,249,250,252,285,288,292,330,351,381,395,396,397,398,399,400,431,],[-77,-175,-159,-159,-159,-52,-159,-159,-159,249,-159,-28,-43,-178,-47,-179,-159,-174,-54,-55,-76,329,-17,-44,-48,-53,-159,-159,-159,-45,-46,-49,-50,-51,-177,-16,]),'else':([144,390,],[-60,439,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'SAVE_TYPE':([3,16,22,23,24,25,28,],[4,29,32,33,34,35,37,]),'empty':([3,6,9,11,12,16,18,22,23,24,25,28,31,36,38,40,44,46,49,50,51,55,56,57,58,59,61,62,64,67,74,85,88,89,132,134,135,140,143,146,147,156,159,160,161,163,164,165,188,190,191,197,200,201,202,203,204,206,207,209,213,215,216,217,218,219,220,227,240,241,242,243,244,245,246,247,248,255,257,259,260,277,278,286,287,289,290,329,330,331,332,335,341,351,362,364,366,368,370,372,374,376,378,379,381,387,388,390,392,429,438,439,442,443,444,472,],[5,8,13,13,20,5,20,5,5,5,5,5,41,8,8,48,54,65,69,72,75,130,65,133,133,133,137,137,41,142,75,148,152,152,137,137,137,189,192,130,195,212,222,224,226,228,133,133,252,254,256,261,266,130,133,133,133,133,133,274,212,226,226,226,226,226,226,130,304,307,310,313,316,319,322,325,328,333,226,337,340,274,346,226,226,226,226,380,189,383,386,389,337,400,304,307,310,313,316,319,322,325,328,430,252,434,437,440,261,41,459,461,340,464,466,480,]),'START_FUNCTION':([6,36,38,],[7,42,43,]),'PROGRAM_A':([9,11,],[10,17,]),'VARS':([9,11,44,],[11,11,53,]),'METHOD':([9,11,12,18,],[12,12,18,18,]),'PROGRAM_B':([12,18,],[19,30,]),'TYPE':([14,15,49,385,],[21,27,70,70,]),'TYPEMETHOD':([15,],[26,]),'VARS_A':([31,64,429,],[39,139,454,]),'SAVE_VAR':([40,],[46,]),'VALIDATE_NAME_ARRAY':([40,],[47,]),'BLOCK':([43,153,253,336,393,460,],[50,199,331,390,443,473,]),'VARS_B':([44,],[52,]),'VARCTE_AUX_VARS':([45,],[56,]),'BOOLEAN_AUX_VARS':([45,],[60,]),'SIMPLE':([46,56,],[63,131,]),'METHOD_A':([49,],[67,]),'PARAMS':([49,385,],[68,432,]),'PRINTQUADS':([50,],[71,]),'BLOCK_A':([51,74,],[73,145,]),'STATEMENT':([51,74,],[74,74,]),'ASSIGNMENT':([51,74,],[76,76,]),'CONDITION':([51,74,],[77,77,]),'WRITE':([51,74,],[78,78,]),'PRE_CONDITIONAL_LOOP':([51,74,],[79,79,]),'POST_CONDITIONAL_LOOP':([51,74,],[80,80,]),'METHODCALL':([51,74,],[81,81,]),'READ':([51,74,],[82,82,]),'STATMETHODS':([51,74,],[83,83,]),'RETURN':([51,74,],[84,84,]),'ORDINARY_LEAST_SQUARES':([51,74,],[91,91,]),'LASSO':([51,74,],[92,92,]),'RIDGE':([51,74,],[93,93,]),'K_MEANS':([51,74,],[94,94,]),'MINI_BATCH_MEANS':([51,74,],[95,95,]),'TIME_SERIES_SPLIT':([51,74,],[96,96,]),'MEAN_ABSOLUTE_ERROR':([51,74,],[97,97,]),'MEAN_SQUARED_ERROR':([51,74,],[98,98,]),'MEDIAN_ABSOLUTE_ERROR':([51,74,],[99,99,]),'MEAN':([51,74,],[100,100,]),'MODE':([51,74,],[101,101,]),'MEDIAN':([51,74,],[102,102,]),'PROBABILITY':([51,74,],[103,103,]),'FREQUENCY':([51,74,],[104,104,]),'VARIANCE':([51,74,],[105,105,]),'STANDARD_DEVIATION':([51,74,],[106,106,]),'SKEWNESS':([51,74,],[107,107,]),'KURTOSI':([51,74,],[108,108,]),'ISLIST':([55,146,201,227,],[128,193,267,292,]),'PUSH_STACK_OPERANDS_CONSTANT':([57,58,59,164,165,202,203,204,206,207,],[132,134,135,229,230,268,269,270,271,272,]),'SAVE_ASSIGNED_VAR':([61,62,132,134,135,],[136,138,185,186,187,]),'SAVE_COUNTER_PARAM':([67,],[141,]),'PUSH_STACK_OPERANDS':([85,163,],[146,227,]),'VALIDATE_FUNCTION_NAME':([85,],[147,]),'PUSH_STACK_JUMPS':([88,89,],[151,153,]),'EXPLOG':([109,149,198,210,211,225,334,342,],[155,196,262,275,276,291,387,394,]),'EXPRESSION':([109,149,150,157,198,210,211,225,334,339,342,],[156,156,197,213,156,156,156,156,156,392,156,]),'EXP':([109,129,149,150,157,198,210,211,214,225,258,334,339,342,347,348,436,],[158,184,158,158,158,158,158,158,278,158,335,158,158,158,395,396,457,]),'TERM':([109,129,149,150,157,198,210,211,214,225,258,334,339,342,347,348,349,350,436,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,397,398,159,]),'FACTOR':([109,129,149,150,157,198,210,211,214,225,258,334,339,342,347,348,349,350,436,],[160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),'VARCONSTAUX':([109,129,149,150,157,169,170,171,198,210,211,214,225,258,298,334,339,342,347,348,349,350,402,403,404,405,436,470,471,481,484,492,503,504,505,512,513,514,522,527,528,529,530,538,545,],[162,162,162,162,162,234,235,236,162,162,162,162,162,162,357,162,162,162,162,162,162,162,446,447,448,449,162,477,478,486,489,497,508,509,510,516,517,518,526,531,532,533,534,542,548,]),'ACUMULATE_R':([140,330,],[188,381,]),'SAVE_PARAM':([143,],[191,]),'ERA':([147,],[194,]),'VARCTE':([154,],[200,]),'BOOLEAN':([154,401,467,468,469,482,483,485,491,493,495,502,511,519,521,549,],[205,445,474,475,476,487,488,490,496,498,500,507,515,523,525,551,]),'EXPLOG_A':([156,213,],[209,277,]),'EXPRESSION_A':([158,],[214,]),'SOLVE_OPERATION_SUM_MINUS':([159,],[221,]),'SOLVE_OPERATION_TIMES_DIVIDE':([160,],[223,]),'PUSH_STACK_OPERATORS':([161,215,216,217,218,219,220,257,286,287,289,290,],[225,279,280,281,282,283,284,334,347,348,349,350,]),'LIST':([188,381,],[250,431,]),'SAVE_COUNTER_QUAD':([190,],[253,]),'SAVE_PARAM_TYPE':([191,],[255,]),'GENERATE_QUAD_PRINT':([197,392,],[260,442,]),'READ_A':([200,],[264,]),'SOLVE_OPERATION_LOGIC':([209,277,],[273,344,]),'EXP_A':([221,],[285,]),'TERM_A':([223,],[288,]),'MEAN_A':([240,362,],[302,411,]),'MODE_A':([241,364,],[305,413,]),'MEDIAN_A':([242,366,],[308,415,]),'PROBABILITY_A':([243,368,],[311,417,]),'FREQUENCY_A':([244,370,],[314,419,]),'VARIANCE_A':([245,372,],[317,421,]),'STANDARD_DEVIATION_A':([246,374,],[320,423,]),'SKEWNESS_A':([247,376,],[323,425,]),'KURTOSI_A':([248,378,],[326,427,]),'INCREMENT_PARAM_COUNTER':([255,],[332,]),'GENERATE_GOTOF_CONDITIONAL':([259,341,],[336,393,]),'WRITE_A':([260,442,],[338,462,]),'SOLVE_OPERATION_RELATIONSHIP':([278,],[345,]),'CALCULATE_ARRAY':([329,],[379,]),'END_PROCEDURE':([331,],[382,]),'PARAMS_A':([332,],[384,]),'VALIDATE_PARAMETER':([335,],[388,]),'POP_STACK_OPERATORS':([351,],[399,]),'LIST_A':([379,],[428,]),'SOLVE_OPERATION_ASSIGNMENT':([387,],[433,]),'METHODCALL_A':([388,],[435,]),'CONDITION_A':([390,],[438,]),'SOLVE_OPERATION_CONDITIONAL':([438,],[458,]),'GENERATE_GOTO_CONDITIONAL':([439,],[460,]),'SOLVE_OPERATION_PRE_CONDITIONAL_LOOP':([443,],[463,]),'SOLVE_OPERATION_POST_CONDITIONAL_LOOP':([444,],[465,]),'VALIDATE_METHOD_CALL':([472,],[479,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS','PROGRAM',13,'p_PROGRAM','parser.py',97),
  ('PROGRAM_A -> VARS PROGRAM_A','PROGRAM_A',2,'p_PROGRAM_A','parser.py',102),
  ('PROGRAM_A -> METHOD PROGRAM_B','PROGRAM_A',2,'p_PROGRAM_A','parser.py',103),
  ('PROGRAM_A -> empty','PROGRAM_A',1,'p_PROGRAM_A','parser.py',104),
  ('PROGRAM_B -> METHOD PROGRAM_B','PROGRAM_B',2,'p_PROGRAM_B','parser.py',109),
  ('PROGRAM_B -> empty','PROGRAM_B',1,'p_PROGRAM_B','parser.py',110),
  ('VARS -> var TYPE colon VARS_A semicolon VARS_B','VARS',6,'p_VARS','parser.py',115),
  ('VARS_A -> id assign VARCTE_AUX_VARS SIMPLE','VARS_A',4,'p_VARS_A','parser.py',120),
  ('VARS_A -> id SAVE_VAR SIMPLE','VARS_A',3,'p_VARS_A','parser.py',121),
  ('VARS_A -> id VALIDATE_NAME_ARRAY lSqrBracket cte_i ACUMULATE_R LIST rSqrBracket CALCULATE_ARRAY LIST_A','VARS_A',9,'p_VARS_A','parser.py',122),
  ('VARS_A -> empty','VARS_A',1,'p_VARS_A','parser.py',123),
  ('VARS_B -> VARS','VARS_B',1,'p_VARS_B','parser.py',128),
  ('VARS_B -> empty','VARS_B',1,'p_VARS_B','parser.py',129),
  ('SIMPLE -> comma VARS_A','SIMPLE',2,'p_SIMPLE','parser.py',134),
  ('SIMPLE -> empty','SIMPLE',1,'p_SIMPLE','parser.py',135),
  ('LIST -> comma cte_i ACUMULATE_R LIST','LIST',4,'p_LIST','parser.py',140),
  ('LIST -> empty','LIST',1,'p_LIST','parser.py',141),
  ('LIST_A -> comma VARS_A','LIST_A',2,'p_LIST_A','parser.py',146),
  ('LIST_A -> empty','LIST_A',1,'p_LIST_A','parser.py',147),
  ('VARCTE_AUX_VARS -> id ISLIST','VARCTE_AUX_VARS',2,'p_VARCTE_AUX_VARS','parser.py',153),
  ('VARCTE_AUX_VARS -> cte_i PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR','VARCTE_AUX_VARS',3,'p_VARCTE_AUX_VARS','parser.py',154),
  ('VARCTE_AUX_VARS -> cte_f PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR','VARCTE_AUX_VARS',3,'p_VARCTE_AUX_VARS','parser.py',155),
  ('VARCTE_AUX_VARS -> cte_str PUSH_STACK_OPERANDS_CONSTANT SAVE_ASSIGNED_VAR','VARCTE_AUX_VARS',3,'p_VARCTE_AUX_VARS','parser.py',156),
  ('VARCTE_AUX_VARS -> BOOLEAN_AUX_VARS','VARCTE_AUX_VARS',1,'p_VARCTE_AUX_VARS','parser.py',157),
  ('BOOLEAN_AUX_VARS -> FALSE SAVE_ASSIGNED_VAR','BOOLEAN_AUX_VARS',2,'p_BOOLEAN_AUX_VARS','parser.py',163),
  ('BOOLEAN_AUX_VARS -> TRUE SAVE_ASSIGNED_VAR','BOOLEAN_AUX_VARS',2,'p_BOOLEAN_AUX_VARS','parser.py',164),
  ('VALIDATE_NAME_ARRAY -> empty','VALIDATE_NAME_ARRAY',1,'p_VALIDATE_NAME_ARRAY','parser.py',176),
  ('ACUMULATE_R -> empty','ACUMULATE_R',1,'p_ACUMULATE_R','parser.py',197),
  ('CALCULATE_ARRAY -> empty','CALCULATE_ARRAY',1,'p_CALCULATE_ARRAY','parser.py',232),
  ('EXPLOG -> EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',3,'p_EXPLOG','parser.py',283),
  ('EXPLOG -> not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',4,'p_EXPLOG','parser.py',284),
  ('EXPLOG_A -> and EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',289),
  ('EXPLOG_A -> or EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',290),
  ('EXPLOG_A -> empty','EXPLOG_A',1,'p_EXPLOG_A','parser.py',291),
  ('EXPRESSION -> EXP','EXPRESSION',1,'p_EXPRESSION','parser.py',296),
  ('EXPRESSION -> EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP','EXPRESSION',4,'p_EXPRESSION','parser.py',297),
  ('EXPRESSION_A -> greater PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',302),
  ('EXPRESSION_A -> lessThan PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',303),
  ('EXPRESSION_A -> greaterEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',304),
  ('EXPRESSION_A -> lessThanEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',305),
  ('EXPRESSION_A -> equals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',306),
  ('EXPRESSION_A -> notEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',307),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS','EXP',2,'p_EXP','parser.py',312),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS EXP_A','EXP',3,'p_EXP','parser.py',313),
  ('EXP_A -> plus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',318),
  ('EXP_A -> minus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',319),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE','TERM',2,'p_TERM','parser.py',324),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A','TERM',3,'p_TERM','parser.py',325),
  ('TERM_A -> times PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',330),
  ('TERM_A -> divide PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',331),
  ('FACTOR -> lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS','FACTOR',5,'p_FACTOR','parser.py',336),
  ('FACTOR -> VARCONSTAUX','FACTOR',1,'p_FACTOR','parser.py',337),
  ('VARCONSTAUX -> id PUSH_STACK_OPERANDS ISLIST','VARCONSTAUX',3,'p_VARCONSTAUX','parser.py',343),
  ('VARCONSTAUX -> cte_i PUSH_STACK_OPERANDS_CONSTANT','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',344),
  ('VARCONSTAUX -> cte_f PUSH_STACK_OPERANDS_CONSTANT','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',345),
  ('TYPE -> int SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',350),
  ('TYPE -> float SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',351),
  ('TYPE -> string SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',352),
  ('TYPE -> bool SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',353),
  ('BLOCK -> lCurlyBracket BLOCK_A rCurlyBracket','BLOCK',3,'p_BLOCK','parser.py',358),
  ('BLOCK_A -> STATEMENT BLOCK_A','BLOCK_A',2,'p_BLOCK_A','parser.py',363),
  ('BLOCK_A -> empty','BLOCK_A',1,'p_BLOCK_A','parser.py',364),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','parser.py',369),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',370),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',371),
  ('STATEMENT -> PRE_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',372),
  ('STATEMENT -> POST_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',373),
  ('STATEMENT -> METHODCALL','STATEMENT',1,'p_STATEMENT','parser.py',374),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',375),
  ('STATEMENT -> STATMETHODS','STATEMENT',1,'p_STATEMENT','parser.py',376),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',377),
  ('ASSIGNMENT -> id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon','ASSIGNMENT',8,'p_ASSIGNMENT','parser.py',382),
  ('READ -> scan lParenthesis VARCTE READ_A rParenthesis','READ',5,'p_READ','parser.py',387),
  ('READ_A -> comma','READ_A',1,'p_READ_A','parser.py',392),
  ('READ_A -> empty','READ_A',1,'p_READ_A','parser.py',393),
  ('ISLIST -> lSqrBracket EXP rSqrBracket','ISLIST',3,'p_ISLIST','parser.py',398),
  ('ISLIST -> empty','ISLIST',1,'p_ISLIST','parser.py',399),
  ('TYPEMETHOD -> TYPE','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',404),
  ('TYPEMETHOD -> void SAVE_TYPE','TYPEMETHOD',2,'p_TYPEMETHOD','parser.py',405),
  ('CONDITION -> if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL','CONDITION',8,'p_CONDITION','parser.py',410),
  ('CONDITION_A -> else GENERATE_GOTO_CONDITIONAL BLOCK','CONDITION_A',3,'p_CONDITION_A','parser.py',415),
  ('CONDITION_A -> empty','CONDITION_A',1,'p_CONDITION_A','parser.py',416),
  ('WRITE -> print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon','WRITE',7,'p_WRITE','parser.py',421),
  ('WRITE_A -> comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A','WRITE_A',4,'p_WRITE_A','parser.py',426),
  ('WRITE_A -> empty','WRITE_A',1,'p_WRITE_A','parser.py',427),
  ('VARCTE -> id ISLIST','VARCTE',2,'p_VARCTE','parser.py',432),
  ('VARCTE -> cte_i PUSH_STACK_OPERANDS_CONSTANT','VARCTE',2,'p_VARCTE','parser.py',433),
  ('VARCTE -> cte_f PUSH_STACK_OPERANDS_CONSTANT','VARCTE',2,'p_VARCTE','parser.py',434),
  ('VARCTE -> cte_str PUSH_STACK_OPERANDS_CONSTANT','VARCTE',2,'p_VARCTE','parser.py',435),
  ('VARCTE -> BOOLEAN','VARCTE',1,'p_VARCTE','parser.py',436),
  ('METHOD -> func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE','METHOD',11,'p_METHOD','parser.py',441),
  ('METHOD_A -> PARAMS','METHOD_A',1,'p_METHOD_A','parser.py',446),
  ('METHOD_A -> empty','METHOD_A',1,'p_METHOD_A','parser.py',447),
  ('PARAMS -> TYPE id SAVE_PARAM SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A','PARAMS',6,'p_PARAMS','parser.py',452),
  ('PARAMS_A -> comma PARAMS','PARAMS_A',2,'p_PARAMS_A','parser.py',457),
  ('PARAMS_A -> empty','PARAMS_A',1,'p_PARAMS_A','parser.py',458),
  ('PRE_CONDITIONAL_LOOP -> while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','PRE_CONDITIONAL_LOOP',8,'p_PRE_CONDITIONAL_LOOP','parser.py',463),
  ('POST_CONDITIONAL_LOOP -> do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP','POST_CONDITIONAL_LOOP',8,'p_POST_CONDITIONAL_LOOP','parser.py',468),
  ('METHODCALL -> id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL','METHODCALL',10,'p_METHODCALL','parser.py',473),
  ('METHODCALL_A -> comma EXP','METHODCALL_A',2,'p_METHODCALL_A','parser.py',478),
  ('METHODCALL_A -> empty','METHODCALL_A',1,'p_METHODCALL_A','parser.py',479),
  ('RETURN -> return EXPLOG semicolon','RETURN',3,'p_RETURN','parser.py',484),
  ('BOOLEAN -> FALSE PUSH_STACK_OPERANDS_CONSTANT','BOOLEAN',2,'p_BOOLEAN','parser.py',489),
  ('BOOLEAN -> TRUE PUSH_STACK_OPERANDS_CONSTANT','BOOLEAN',2,'p_BOOLEAN','parser.py',490),
  ('STATMETHODS -> ORDINARY_LEAST_SQUARES','STATMETHODS',1,'p_STATMETHODS','parser.py',495),
  ('STATMETHODS -> LASSO','STATMETHODS',1,'p_STATMETHODS','parser.py',496),
  ('STATMETHODS -> RIDGE','STATMETHODS',1,'p_STATMETHODS','parser.py',497),
  ('STATMETHODS -> K_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',498),
  ('STATMETHODS -> MINI_BATCH_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',499),
  ('STATMETHODS -> TIME_SERIES_SPLIT','STATMETHODS',1,'p_STATMETHODS','parser.py',500),
  ('STATMETHODS -> MEAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',501),
  ('STATMETHODS -> MEAN_SQUARED_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',502),
  ('STATMETHODS -> MEDIAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',503),
  ('STATMETHODS -> MEAN','STATMETHODS',1,'p_STATMETHODS','parser.py',504),
  ('STATMETHODS -> MODE','STATMETHODS',1,'p_STATMETHODS','parser.py',505),
  ('STATMETHODS -> MEDIAN','STATMETHODS',1,'p_STATMETHODS','parser.py',506),
  ('STATMETHODS -> PROBABILITY','STATMETHODS',1,'p_STATMETHODS','parser.py',507),
  ('STATMETHODS -> FREQUENCY','STATMETHODS',1,'p_STATMETHODS','parser.py',508),
  ('STATMETHODS -> VARIANCE','STATMETHODS',1,'p_STATMETHODS','parser.py',509),
  ('STATMETHODS -> STANDARD_DEVIATION','STATMETHODS',1,'p_STATMETHODS','parser.py',510),
  ('STATMETHODS -> SKEWNESS','STATMETHODS',1,'p_STATMETHODS','parser.py',511),
  ('STATMETHODS -> KURTOSI','STATMETHODS',1,'p_STATMETHODS','parser.py',512),
  ('ORDINARY_LEAST_SQUARES -> ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon','ORDINARY_LEAST_SQUARES',15,'p_ORDINARY_LEAST_SQUARES','parser.py',517),
  ('LASSO -> las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon','LASSO',29,'p_LASSO','parser.py',522),
  ('RIDGE -> rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon','RIDGE',23,'p_RIDGE','parser.py',527),
  ('K_MEANS -> kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon','K_MEANS',25,'p_K_MEANS','parser.py',532),
  ('MINI_BATCH_MEANS -> mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','MINI_BATCH_MEANS',27,'p_MINI_BATCH_MEANS','parser.py',537),
  ('TIME_SERIES_SPLIT -> tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','TIME_SERIES_SPLIT',7,'p_TIME_SERIES_SPLIT','parser.py',542),
  ('MEAN_ABSOLUTE_ERROR -> mean_abs_err lParenthesis id comma id rParenthesis semicolon','MEAN_ABSOLUTE_ERROR',7,'p_MEAN_ABSOLUTE_ERROR','parser.py',547),
  ('MEAN_SQUARED_ERROR -> mean_sqr_err lParenthesis id comma id rParenthesis semicolon','MEAN_SQUARED_ERROR',7,'p_MEAN_SQUARED_ERROR','parser.py',552),
  ('MEDIAN_ABSOLUTE_ERROR -> median_abs_err lParenthesis id comma id rParenthesis semicolon','MEDIAN_ABSOLUTE_ERROR',7,'p_MEDIAN_ABSOLUTE_ERROR','parser.py',557),
  ('MEAN -> mean lParenthesis id MEAN_A rParenthesis semicolon','MEAN',6,'p_MEAN','parser.py',562),
  ('MEAN_A -> comma id MEAN_A','MEAN_A',3,'p_MEAN_A','parser.py',567),
  ('MEAN_A -> empty','MEAN_A',1,'p_MEAN_A','parser.py',568),
  ('MODE -> mode lParenthesis id MODE_A rParenthesis semicolon','MODE',6,'p_MODE','parser.py',573),
  ('MODE_A -> comma id MODE_A','MODE_A',3,'p_MODE_A','parser.py',578),
  ('MODE_A -> empty','MODE_A',1,'p_MODE_A','parser.py',579),
  ('MEDIAN -> median lParenthesis id MEDIAN_A rParenthesis semicolon','MEDIAN',6,'p_MEDIAN','parser.py',584),
  ('MEDIAN_A -> comma id MEDIAN_A','MEDIAN_A',3,'p_MEDIAN_A','parser.py',589),
  ('MEDIAN_A -> empty','MEDIAN_A',1,'p_MEDIAN_A','parser.py',590),
  ('PROBABILITY -> prob lParenthesis id PROBABILITY_A rParenthesis semicolon','PROBABILITY',6,'p_PROBABILITY','parser.py',595),
  ('PROBABILITY_A -> comma id PROBABILITY_A','PROBABILITY_A',3,'p_PROBABILITY_A','parser.py',600),
  ('PROBABILITY_A -> empty','PROBABILITY_A',1,'p_PROBABILITY_A','parser.py',601),
  ('FREQUENCY -> freq lParenthesis id FREQUENCY_A rParenthesis semicolon','FREQUENCY',6,'p_FREQUENCY','parser.py',606),
  ('FREQUENCY_A -> comma id FREQUENCY_A','FREQUENCY_A',3,'p_FREQUENCY_A','parser.py',611),
  ('FREQUENCY_A -> empty','FREQUENCY_A',1,'p_FREQUENCY_A','parser.py',612),
  ('VARIANCE -> variance lParenthesis id VARIANCE_A rParenthesis semicolon','VARIANCE',6,'p_VARIANCE','parser.py',617),
  ('VARIANCE_A -> comma id VARIANCE_A','VARIANCE_A',3,'p_VARIANCE_A','parser.py',622),
  ('VARIANCE_A -> empty','VARIANCE_A',1,'p_VARIANCE_A','parser.py',623),
  ('STANDARD_DEVIATION -> stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon','STANDARD_DEVIATION',6,'p_STANDARD_DEVIATION','parser.py',628),
  ('STANDARD_DEVIATION_A -> comma id STANDARD_DEVIATION_A','STANDARD_DEVIATION_A',3,'p_STANDARD_DEVIATION_A','parser.py',633),
  ('STANDARD_DEVIATION_A -> empty','STANDARD_DEVIATION_A',1,'p_STANDARD_DEVIATION_A','parser.py',634),
  ('SKEWNESS -> skew lParenthesis id SKEWNESS_A rParenthesis semicolon','SKEWNESS',6,'p_SKEWNESS','parser.py',639),
  ('SKEWNESS_A -> comma id SKEWNESS_A','SKEWNESS_A',3,'p_SKEWNESS_A','parser.py',644),
  ('SKEWNESS_A -> empty','SKEWNESS_A',1,'p_SKEWNESS_A','parser.py',645),
  ('KURTOSI -> kurt lParenthesis id KURTOSI_A rParenthesis semicolon','KURTOSI',6,'p_KURTOSI','parser.py',650),
  ('KURTOSI_A -> comma id KURTOSI_A','KURTOSI_A',3,'p_KURTOSI_A','parser.py',655),
  ('KURTOSI_A -> empty','KURTOSI_A',1,'p_KURTOSI_A','parser.py',656),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',661),
  ('START_FUNCTION -> empty','START_FUNCTION',1,'p_START_FUNCTION','parser.py',702),
  ('SAVE_TYPE -> empty','SAVE_TYPE',1,'p_SAVE_TYPE','parser.py',719),
  ('SAVE_VAR -> empty','SAVE_VAR',1,'p_SAVE_VAR','parser.py',729),
  ('SAVE_ASSIGNED_VAR -> empty','SAVE_ASSIGNED_VAR',1,'p_SAVE_ASSIGNED_VAR','parser.py',752),
  ('SAVE_PARAM -> empty','SAVE_PARAM',1,'p_SAVE_PARAM','parser.py',793),
  ('INCREMENT_PARAM_COUNTER -> empty','INCREMENT_PARAM_COUNTER',1,'p_INCREMENT_PARAM_COUNTER','parser.py',873),
  ('SAVE_COUNTER_PARAM -> empty','SAVE_COUNTER_PARAM',1,'p_SAVE_COUNTER_PARAM','parser.py',884),
  ('SAVE_COUNTER_QUAD -> empty','SAVE_COUNTER_QUAD',1,'p_SAVE_COUNTER_QUAD','parser.py',896),
  ('END_PROCEDURE -> empty','END_PROCEDURE',1,'p_END_PROCEDURE','parser.py',910),
  ('SAVE_PARAM_TYPE -> empty','SAVE_PARAM_TYPE',1,'p_SAVE_PARAM_TYPE','parser.py',925),
  ('VALIDATE_FUNCTION_NAME -> empty','VALIDATE_FUNCTION_NAME',1,'p_VALIDATE_FUNCTION_NAME','parser.py',937),
  ('ERA -> empty','ERA',1,'p_ERA','parser.py',953),
  ('VALIDATE_PARAMETER -> empty','VALIDATE_PARAMETER',1,'p_VALIDATE_PARAMETER','parser.py',975),
  ('VALIDATE_METHOD_CALL -> empty','VALIDATE_METHOD_CALL',1,'p_VALIDATE_METHOD_CALL','parser.py',1002),
  ('PUSH_STACK_OPERANDS -> empty','PUSH_STACK_OPERANDS',1,'p_PUSH_STACK_OPERANDS','parser.py',1031),
  ('PUSH_STACK_OPERANDS_CONSTANT -> empty','PUSH_STACK_OPERANDS_CONSTANT',1,'p_PUSH_STACK_OPERANDS_CONSTANT','parser.py',1061),
  ('PUSH_STACK_OPERATORS -> empty','PUSH_STACK_OPERATORS',1,'p_PUSH_STACK_OPERATORS','parser.py',1097),
  ('POP_STACK_OPERATORS -> empty','POP_STACK_OPERATORS',1,'p_POP_STACK_OPERATORS','parser.py',1107),
  ('SOLVE_OPERATION_SUM_MINUS -> empty','SOLVE_OPERATION_SUM_MINUS',1,'p_SOLVE_OPERATION_SUM_MINUS','parser.py',1179),
  ('SOLVE_OPERATION_TIMES_DIVIDE -> empty','SOLVE_OPERATION_TIMES_DIVIDE',1,'p_SOLVE_OPERATION_TIMES_DIVIDE','parser.py',1192),
  ('SOLVE_OPERATION_RELATIONSHIP -> empty','SOLVE_OPERATION_RELATIONSHIP',1,'p_SOLVE_OPERATION_RELATIONSHIP','parser.py',1205),
  ('SOLVE_OPERATION_LOGIC -> empty','SOLVE_OPERATION_LOGIC',1,'p_SOLVE_OPERATION_LOGIC','parser.py',1218),
  ('SOLVE_OPERATION_ASSIGNMENT -> empty','SOLVE_OPERATION_ASSIGNMENT',1,'p_SOLVE_OPERATION_ASSIGNMENT','parser.py',1263),
  ('GENERATE_GOTOF_CONDITIONAL -> empty','GENERATE_GOTOF_CONDITIONAL',1,'p_GENERATE_GOTOF_CONDITIONAL','parser.py',1289),
  ('SOLVE_OPERATION_CONDITIONAL -> empty','SOLVE_OPERATION_CONDITIONAL',1,'p_SOLVE_OPERATION_CONDITIONAL','parser.py',1315),
  ('GENERATE_GOTO_CONDITIONAL -> empty','GENERATE_GOTO_CONDITIONAL',1,'p_GENERATE_GOTO_CONDITIONAL','parser.py',1326),
  ('PUSH_STACK_JUMPS -> empty','PUSH_STACK_JUMPS',1,'p_PUSH_STACK_JUMPS','parser.py',1347),
  ('SOLVE_OPERATION_PRE_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_PRE_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','parser.py',1363),
  ('SOLVE_OPERATION_POST_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_POST_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_POST_CONDITIONAL_LOOP','parser.py',1384),
  ('GENERATE_QUAD_PRINT -> empty','GENERATE_QUAD_PRINT',1,'p_GENERATE_QUAD_PRINT','parser.py',1407),
  ('PRINTQUADS -> empty','PRINTQUADS',1,'p_PRINTQUADS','parser.py',1424),
]

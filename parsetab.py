
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'FALSE TRUE and assign bool colon comma cte_f cte_i cte_str divide do else equals float freq func globalFunc greater greaterEquals id if int kmeans kurt lCurlyBracket lParenthesis lSqrBracket las lessThan lessThanEquals mbm mean mean_abs_err mean_sqr_err median median_abs_err minus mode not notEquals ols or plus print prob program rCurlyBracket rParenthesis rSqrBracket return rid scan semicolon skew start stddev string times tseries var variance void while\n\tPROGRAM : program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS\n\t\n\tPROGRAM_A : VARS PROGRAM_A\n\t\t\t| METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tPROGRAM_B : METHOD PROGRAM_B\n\t\t\t| empty\n\t\n\tVARS : var VARS_A\n\t\n\tVARS_A : TYPE colon VARS_B semicolon VARS_C\n\t\n\tVARS_B : SIMPLE\n\t\t| LIST\n\t\n\tVARS_C : VARS_A\n\t\t\t| empty\n\t\n\tSIMPLE : id SAVE_VAR SIMPLE_A\n\t\n\tSIMPLE_A : comma SIMPLE\n\t\t\t| empty\n\t\n\tLIST : id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A\n\t\n\tLIST_A : comma LIST\n\t\t| empty\n\t\n\tEXPLOG : EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\t| not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC\n\t\n\tEXPLOG_A : and EXPLOG\n\t\t| or EXPLOG\n\t\t| empty\n\t\n\tEXPRESSION : EXP \n\t\t\t\t| EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP\n\t\n\tEXPRESSION_A : greater PUSH_STACK_OPERATORS\n\t\t\t\t| lessThan PUSH_STACK_OPERATORS\n\t\t\t\t| greaterEquals PUSH_STACK_OPERATORS\n\t\t\t\t| lessThanEquals PUSH_STACK_OPERATORS\n\t\t\t\t| equals PUSH_STACK_OPERATORS\n\t\t\t\t| notEquals PUSH_STACK_OPERATORS\n\t\n\tEXP : TERM SOLVE_OPERATION_SUM_MINUS\n\t\t| TERM SOLVE_OPERATION_SUM_MINUS EXP_A \n\t\n\tEXP_A : plus PUSH_STACK_OPERATORS EXP\n\t\t| minus PUSH_STACK_OPERATORS EXP\n\t\n\tTERM : FACTOR SOLVE_OPERATION_TIMES_DIVIDE\n\t\t| FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A \n\t\n\tTERM_A : times PUSH_STACK_OPERATORS TERM\n\t\t\t| divide PUSH_STACK_OPERATORS TERM\n\t\n\tFACTOR : lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS\n\t\t\t| VARCONSTAUX\n\t\n\tVARCONSTAUX : id PUSH_STACK_OPERANDS ISLIST \n\t\t| cte_i PUSH_STACK_OPERANDS_CONSTANT\n\t\t| cte_f PUSH_STACK_OPERANDS_CONSTANT\n\t\n\tTYPE : int SAVE_TYPE\n\t\t| float SAVE_TYPE\n\t\t| string SAVE_TYPE\n\t\t| bool SAVE_TYPE\n\t\n\tBLOCK : lCurlyBracket BLOCK_A rCurlyBracket\n\t\n\tBLOCK_A : STATEMENT BLOCK_A\n\t\t\t| empty\n\t\n\tSTATEMENT : ASSIGNMENT\n\t\t\t| CONDITION\n\t\t\t| WRITE\n\t\t\t| PRE_CONDITIONAL_LOOP\n\t\t\t| POST_CONDITIONAL_LOOP\n\t\t\t| METHODCALL\n\t\t\t| READ\n\t\t\t| STATMETHODS\n\t\t\t| RETURN \n\t\n\tASSIGNMENT : id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon \n\t\n\tREAD : scan lParenthesis VARCTE READ_A rParenthesis\n\t\n\tREAD_A : comma\n\t\t| empty\n\t\n\tISLIST : lSqrBracket EXP rSqrBracket\n\t\t\t| empty \n\t\n\tTYPEMETHOD : TYPE\n\t\t\t| void SAVE_TYPE\n\t\n\tCONDITION : if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL\n\t\n\tCONDITION_A : else GENERATE_GOTO_CONDITIONAL BLOCK\n\t\t\t\t| empty\n\t\n\tWRITE : print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon\n\t\n\tWRITE_A : comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A\n\t\t| empty\n\t\n\tVARCTE : id ISLIST \n\t\t| cte_i \n\t\t| cte_f \n\t\t| cte_str \n\t\t| BOOLEAN\n\t\n\tMETHOD : func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE\n\t\n\tMETHOD_A : PARAMS\n\t\t\t| empty\t\t\n\t\n\tPARAMS : TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A \n\t\n\tPARAMS_A : comma PARAMS\n\t\t| empty\n\t\n\tPRE_CONDITIONAL_LOOP : while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP\n\t\n\tPOST_CONDITIONAL_LOOP : do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP\n\t\n\tMETHODCALL : id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL\n\t\n\tMETHODCALL_A : comma EXP\n\t\t\t\t| empty\n\t\n\tRETURN : return EXPLOG semicolon\n\t\n\tBOOLEAN : FALSE\n\t\t\t| TRUE\n\t\n\tSTATMETHODS : ORDINARY_LEAST_SQUARES\n\t\t\t\t| LASSO\n\t\t\t\t| RIDGE\n\t\t\t\t| K_MEANS\n\t\t\t\t| MINI_BATCH_MEANS\n\t\t\t\t| TIME_SERIES_SPLIT\n\t\t\t\t| MEAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN_SQUARED_ERROR\n\t\t\t\t| MEDIAN_ABSOLUTE_ERROR\n\t\t\t\t| MEAN\n\t\t\t\t| MODE\n\t\t\t\t| MEDIAN\n\t\t\t\t| PROBABILITY\n\t\t\t\t| FREQUENCY\n\t\t\t\t| VARIANCE\n\t\t\t\t| STANDARD_DEVIATION\n\t\t\t\t| SKEWNESS\n\t\t\t\t| KURTOSI\n\t\n\tORDINARY_LEAST_SQUARES : ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon\n\t\n\tLASSO : las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon\n\t\n\tRIDGE : rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon\n\t\n\tK_MEANS : kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon\n\t\n\tMINI_BATCH_MEANS : mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tTIME_SERIES_SPLIT : tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon \n\t\n\tMEAN_ABSOLUTE_ERROR : mean_abs_err lParenthesis id comma id rParenthesis semicolon\n\t\n\tMEAN_SQUARED_ERROR : mean_sqr_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEDIAN_ABSOLUTE_ERROR : median_abs_err lParenthesis id comma id rParenthesis semicolon \n\t\n\tMEAN : mean lParenthesis id MEAN_A rParenthesis semicolon\n\t\n\tMEAN_A : comma id MEAN_A\n\t\t| empty\n\t\n\tMODE : mode lParenthesis id MODE_A rParenthesis semicolon\n\t\n\tMODE_A : comma id MODE_A\n\t\t| empty\n\t\n\tMEDIAN : median lParenthesis id MEDIAN_A rParenthesis semicolon\n\t\n\tMEDIAN_A : comma id MEDIAN_A\n\t\t| empty\n\t\n\tPROBABILITY : prob lParenthesis id PROBABILITY_A rParenthesis semicolon\n\t\n\tPROBABILITY_A : comma id PROBABILITY_A\n\t\t| empty\n\t\n\tFREQUENCY : freq lParenthesis id FREQUENCY_A rParenthesis semicolon\n\t\n\tFREQUENCY_A : comma id FREQUENCY_A\n\t\t| empty\n\t\n\tVARIANCE : variance lParenthesis id VARIANCE_A rParenthesis semicolon\n\t\n\tVARIANCE_A : comma id VARIANCE_A\n\t\t| empty\n\t\n\tSTANDARD_DEVIATION : stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon\n\t\n\tSTANDARD_DEVIATION_A : comma id STANDARD_DEVIATION_A\n\t\t| empty\n\t\n\tSKEWNESS : skew lParenthesis id SKEWNESS_A rParenthesis semicolon\n\t\n\tSKEWNESS_A : comma id SKEWNESS_A\n\t\t| empty\n\t\n\tKURTOSI : kurt  lParenthesis id KURTOSI_A rParenthesis semicolon\n\t\n\tKURTOSI_A : comma id KURTOSI_A\n\t\t| empty\n\t\n    empty :\n    \n\tSTART_FUNCTION : empty\n\t\n\tSAVE_TYPE : empty\n\t\n\tSAVE_VAR : empty\n\t\n\tSAVE_ARRAY : empty\n\t\n\tINCREMENT_PARAM_COUNTER : empty\n\t\n\tSAVE_COUNTER_PARAM : empty\n\t\n\tSAVE_COUNTER_QUAD : empty\n\t\n\tEND_PROCEDURE : empty\n\t\n\tSAVE_PARAM_TYPE : empty\n\t\n\tVALIDATE_FUNCTION_NAME : empty\n\t\n    ERA : empty\n    \n    VALIDATE_PARAMETER : empty\n    \n\tVALIDATE_METHOD_CALL : empty\n\t\n\tPUSH_STACK_OPERANDS : empty\n\t\n\tPUSH_STACK_OPERANDS_CONSTANT : empty\n\t\n\tPUSH_STACK_OPERATORS : empty\n\t\n\tPOP_STACK_OPERATORS : empty\n\t\n\tSOLVE_OPERATION_SUM_MINUS : empty\n\t\n\tSOLVE_OPERATION_TIMES_DIVIDE : empty\n\t\n\tSOLVE_OPERATION_RELATIONSHIP : empty\n\t\n\tSOLVE_OPERATION_LOGIC : empty\n\t\n\tSOLVE_OPERATION_ASSIGNMENT : empty\n\t\n\tGENERATE_GOTOF_CONDITIONAL : empty\n\t\n\tSOLVE_OPERATION_CONDITIONAL : empty\n\t\n\tGENERATE_GOTO_CONDITIONAL : empty\n\t\n\tPUSH_STACK_JUMPS : empty\n\t\n\tSOLVE_OPERATION_PRE_CONDITIONAL_LOOP : empty\n\t\n\tSOLVE_OPERATION_POST_CONDITIONAL_LOOP : empty\n\t\n\tGENERATE_QUAD_PRINT : empty\n\t\n\tPRINTQUADS : empty\n\t'
    
_lr_action_items = {'program':([0,],[2,]),'$end':([1,51,67,68,135,],[0,-148,-1,-178,-49,]),'void':([2,9,10,11,12,13,15,17,18,19,20,21,31,46,53,54,55,135,308,356,357,],[3,-148,16,-148,-148,-4,29,-2,-148,-3,-6,-7,-5,-148,-8,-11,-12,-49,-148,-80,-156,]),'globalFunc':([3,4,5,],[-148,6,-150,]),'start':([5,16,30,],[-150,-148,39,]),'colon':([5,22,23,24,25,26,33,34,35,36,],[-150,32,-148,-148,-148,-148,-45,-46,-47,-48,]),'id':([5,23,24,25,26,27,28,29,32,33,34,35,36,38,48,52,57,66,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,135,140,141,145,148,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,184,194,196,197,200,201,202,203,204,205,206,211,212,233,239,240,256,257,258,259,260,261,263,264,266,267,269,270,271,274,275,276,277,279,282,285,288,291,294,297,300,303,311,316,319,320,324,325,326,327,364,376,377,378,379,384,386,388,390,392,394,396,398,400,406,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,439,440,441,442,448,449,450,453,461,472,473,474,475,481,482,483,491,496,497,498,499,507,509,514,516,521,523,],[-150,-148,-148,-148,-148,37,-67,-148,43,-45,-46,-47,-48,-68,59,81,125,134,81,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,59,-49,59,59,187,59,-148,213,214,215,59,59,59,219,220,221,222,223,224,225,226,227,228,229,230,59,59,-91,59,59,59,-148,-148,-148,-148,-148,-148,59,-164,307,-148,59,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,329,330,331,59,335,336,337,339,341,343,345,347,349,351,353,355,59,59,59,-62,59,59,59,59,-148,59,59,59,59,-121,-124,-127,-130,-133,-136,-139,-142,-145,59,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,59,59,-148,-70,-88,-161,59,59,59,59,59,59,-112,59,59,59,59,59,59,59,59,59,-114,59,-115,-116,-113,]),'semicolon':([6,7,8,40,41,42,43,47,49,56,58,59,61,62,124,125,126,127,128,129,130,131,146,147,149,150,151,153,172,174,175,176,195,198,199,207,208,209,210,232,234,250,251,252,253,254,255,262,265,305,306,321,322,323,328,338,340,342,344,346,348,350,352,354,361,365,369,370,371,372,373,374,380,381,382,383,403,404,425,470,505,513,519,522,],[-148,9,-149,46,-9,-10,-148,-148,-151,-13,-15,-148,-148,-148,-14,-148,-148,-162,-148,-43,-163,-44,194,-148,-24,-148,-148,-41,-42,-66,-148,-152,-148,-23,-148,-32,-166,-36,-167,-16,-18,-19,-169,-21,-22,-148,-148,-33,-37,-65,-17,-20,-25,-168,-148,384,386,388,390,392,394,396,398,400,-148,411,-34,-35,-38,-39,-40,-165,420,421,422,423,424,-170,441,475,509,516,521,523,]),'lParenthesis':([8,37,44,81,82,83,84,86,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,138,139,140,141,142,143,148,152,173,180,181,184,196,197,200,201,202,203,204,205,206,211,212,239,240,245,256,257,258,259,260,261,263,264,266,267,311,316,319,324,325,326,327,406,],[-149,-148,50,-148,140,141,-148,145,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,-148,-158,152,152,184,-174,152,-148,152,240,-159,152,152,152,152,-148,-148,-148,-148,-148,-148,152,-164,-148,152,319,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,152,152,152,152,152,152,152,152,]),'lCurlyBracket':([8,39,45,85,143,144,177,235,236,241,313,314,318,367,409,429,430,],[-149,-148,52,-148,-174,52,-148,52,-155,-148,52,-171,-148,52,-148,52,-173,]),'var':([9,11,21,46,53,54,55,],[14,14,-7,-148,-8,-11,-12,]),'func':([9,11,12,18,21,46,53,54,55,135,308,356,357,],[15,15,15,15,-7,-148,-8,-11,-12,-49,-148,-80,-156,]),'int':([14,15,46,50,359,],[23,23,23,23,23,]),'float':([14,15,46,50,359,512,],[24,24,24,24,24,515,]),'string':([14,15,46,50,272,273,359,463,489,504,506,],[25,25,25,25,332,333,25,468,493,508,510,]),'bool':([14,15,46,50,359,],[26,26,26,26,26,]),'lSqrBracket':([43,59,81,126,127,137,139,187,307,],[48,-148,-148,173,-162,173,-162,173,48,]),'comma':([43,47,49,59,61,62,125,126,127,128,129,130,131,134,149,150,151,153,172,174,175,176,178,183,186,187,188,189,190,191,192,193,207,208,209,210,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,237,238,242,243,249,255,262,265,305,309,310,312,322,323,328,329,330,331,332,333,339,341,343,345,347,349,351,353,355,362,363,366,369,370,371,372,373,374,412,415,416,417,418,419,443,444,445,446,447,455,456,457,458,459,466,467,468,469,476,477,478,479,484,485,486,487,492,493,494,495,500,502,503,508,511,515,],[-148,57,-151,-148,-148,-148,-148,-148,-162,-148,-43,-163,-44,-148,-24,-148,-148,-41,-42,-66,233,-152,-148,-148,247,-148,-76,-77,-78,-79,-92,-93,-32,-166,-36,-167,269,270,271,272,273,274,275,276,277,279,282,285,288,291,294,297,300,303,-148,-157,316,-177,-75,-148,-33,-37,-65,359,-153,-148,-25,-168,-148,375,376,377,378,379,279,282,285,288,291,294,297,300,303,406,-160,-148,-34,-35,-38,-39,-40,-165,316,436,437,438,439,440,450,451,452,453,454,460,461,462,463,464,471,472,473,474,480,481,482,483,488,489,490,491,496,497,498,499,504,506,507,512,514,518,]),'cte_i':([48,105,140,141,145,148,152,157,158,159,173,184,196,197,200,201,202,203,204,205,206,211,212,239,240,256,257,258,259,260,261,263,264,266,267,274,311,316,319,324,325,326,327,376,377,378,379,406,439,440,450,453,461,472,473,474,481,482,483,491,496,497,498,499,507,514,],[61,61,61,61,188,61,-148,61,61,61,61,61,61,61,61,-148,-148,-148,-148,-148,-148,61,-164,-148,61,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'cte_f':([48,105,140,141,145,148,152,157,158,159,173,184,196,197,200,201,202,203,204,205,206,211,212,239,240,256,257,258,259,260,261,263,264,266,267,274,311,316,319,324,325,326,327,376,377,378,379,406,439,440,450,453,461,472,473,474,481,482,483,491,496,497,498,499,507,514,],[62,62,62,62,189,62,-148,62,62,62,62,62,62,62,62,-148,-148,-148,-148,-148,-148,62,-164,-148,62,-26,-27,-28,-29,-30,-31,-148,-148,-148,-148,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'rParenthesis':([49,50,59,61,62,63,64,65,126,127,129,130,131,132,133,134,147,149,150,151,153,172,174,178,182,183,186,187,188,189,190,191,192,193,195,198,199,207,208,209,210,222,223,224,225,226,227,228,229,230,237,238,242,243,244,246,247,248,249,250,251,252,253,254,255,262,265,268,278,280,281,283,284,286,287,289,290,292,293,295,296,298,299,301,302,304,305,309,310,312,315,317,321,322,323,328,334,335,336,337,339,341,343,345,347,349,351,353,355,358,360,362,363,366,368,369,370,371,372,373,374,385,387,389,391,393,395,397,399,401,402,405,407,412,426,431,465,501,510,517,520,],[-151,-148,-148,-148,-148,-148,-81,-82,-148,-162,-43,-163,-44,177,-154,-148,-148,-24,-148,-148,-41,-42,-66,-148,241,-148,-148,-148,-76,-77,-78,-79,-92,-93,-148,-23,-148,-32,-166,-36,-167,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-157,-148,-177,318,320,-63,-64,-75,-19,-169,-21,-22,-148,-148,-33,-37,328,338,-123,340,-126,342,-129,344,-132,346,-135,348,-138,350,-141,352,-144,354,-147,-65,-148,-153,-148,365,-74,-20,-25,-168,-148,380,381,382,383,-148,-148,-148,-148,-148,-148,-148,-148,-148,-83,-85,-148,-160,-148,414,-34,-35,-38,-39,-40,-165,-122,-125,-128,-131,-134,-137,-140,-143,-146,-84,425,-90,-148,-89,-73,470,505,513,519,522,]),'rCurlyBracket':([52,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,136,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[-148,135,-148,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-50,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'if':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[82,82,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'print':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[83,83,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'while':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,185,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[84,84,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,245,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'do':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[85,85,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'scan':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[86,86,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'return':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[105,105,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'ols':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[106,106,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'las':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[107,107,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'rid':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[108,108,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kmeans':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[109,109,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mbm':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[110,110,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'tseries':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[111,111,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_abs_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[112,112,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean_sqr_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[113,113,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median_abs_err':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[114,114,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mean':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[115,115,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'mode':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[116,116,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'median':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[117,117,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'prob':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[118,118,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'freq':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[119,119,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'variance':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[120,120,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'stddev':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[121,121,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'skew':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[122,122,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'kurt':([52,70,72,73,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,135,194,320,364,384,386,388,390,392,394,396,398,400,408,410,411,413,414,420,421,422,423,424,427,428,432,433,434,435,441,442,448,449,475,509,516,521,523,],[123,123,-52,-53,-54,-55,-56,-57,-58,-59,-60,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-49,-91,-62,-148,-121,-124,-127,-130,-133,-136,-139,-142,-145,-148,-71,-72,-148,-148,-117,-118,-119,-120,-61,-69,-172,-86,-175,-87,-176,-148,-70,-88,-161,-112,-114,-115,-116,-113,]),'rSqrBracket':([59,60,61,62,126,127,129,130,131,150,151,153,172,174,207,208,209,210,231,262,265,305,328,369,370,371,372,373,374,],[-148,128,-148,-148,-148,-162,-43,-163,-44,-148,-148,-41,-42,-66,-32,-166,-36,-167,305,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'times':([59,61,62,126,127,129,130,131,151,153,172,174,209,210,305,328,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,-148,-41,-42,-66,266,-167,-65,-148,-40,-165,]),'divide':([59,61,62,126,127,129,130,131,151,153,172,174,209,210,305,328,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,-148,-41,-42,-66,267,-167,-65,-148,-40,-165,]),'plus':([59,61,62,126,127,129,130,131,150,151,153,172,174,207,208,209,210,265,305,328,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,-148,-148,-41,-42,-66,263,-166,-36,-167,-37,-65,-148,-38,-39,-40,-165,]),'minus':([59,61,62,126,127,129,130,131,150,151,153,172,174,207,208,209,210,265,305,328,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,-148,-148,-41,-42,-66,264,-166,-36,-167,-37,-65,-148,-38,-39,-40,-165,]),'greater':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,201,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'lessThan':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,202,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'greaterEquals':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,203,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'lessThanEquals':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,204,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'equals':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,205,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'notEquals':([59,61,62,126,127,129,130,131,149,150,151,153,172,174,207,208,209,210,262,265,305,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,206,-148,-148,-41,-42,-66,-32,-166,-36,-167,-33,-37,-65,-148,-34,-35,-38,-39,-40,-165,]),'and':([59,61,62,126,127,129,130,131,147,149,150,151,153,172,174,199,207,208,209,210,255,262,265,305,322,323,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,196,-24,-148,-148,-41,-42,-66,196,-32,-166,-36,-167,-148,-33,-37,-65,-25,-168,-148,-34,-35,-38,-39,-40,-165,]),'or':([59,61,62,126,127,129,130,131,147,149,150,151,153,172,174,199,207,208,209,210,255,262,265,305,322,323,328,369,370,371,372,373,374,],[-148,-148,-148,-148,-162,-43,-163,-44,197,-24,-148,-148,-41,-42,-66,197,-32,-166,-36,-167,-148,-33,-37,-65,-25,-168,-148,-34,-35,-38,-39,-40,-165,]),'assign':([81,137,139,174,179,305,],[-148,-148,-162,-66,239,-65,]),'not':([105,140,152,184,196,197,211,212,239,311,319,],[148,148,-148,148,148,148,148,-164,-148,148,148,]),'else':([135,364,],[-49,409,]),'cte_str':([145,],[190,]),'FALSE':([145,375,436,437,438,451,452,454,460,462,464,471,480,488,490,518,],[192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,]),'TRUE':([145,375,436,437,438,451,452,454,460,462,464,471,480,488,490,518,],[193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'SAVE_TYPE':([3,16,23,24,25,26,29,],[4,30,33,34,35,36,38,]),'empty':([3,6,9,11,12,16,18,23,24,25,26,29,37,39,43,46,47,50,51,52,59,61,62,63,70,81,84,85,125,126,128,134,137,138,147,150,151,152,175,177,178,183,186,187,195,199,201,202,203,204,205,206,222,223,224,225,226,227,228,229,230,237,239,241,242,254,255,263,264,266,267,308,309,312,318,328,339,341,343,345,347,349,351,353,355,361,362,364,366,408,409,412,413,414,441,],[5,8,13,13,20,5,20,5,5,5,5,5,8,8,49,55,58,65,68,71,127,130,130,133,71,139,143,143,49,174,176,49,174,181,198,208,210,212,234,236,238,243,248,174,251,198,212,212,212,212,212,212,280,283,286,289,292,295,298,301,304,310,212,314,317,251,323,212,212,212,212,357,360,363,314,374,280,283,286,289,292,295,298,301,304,404,407,410,243,428,430,317,433,435,449,]),'START_FUNCTION':([6,37,39,],[7,44,45,]),'PROGRAM_A':([9,11,],[10,17,]),'VARS':([9,11,],[11,11,]),'METHOD':([9,11,12,18,],[12,12,18,18,]),'PROGRAM_B':([12,18,],[19,31,]),'VARS_A':([14,46,],[21,54,]),'TYPE':([14,15,46,50,359,],[22,28,22,66,66,]),'TYPEMETHOD':([15,],[27,]),'VARS_B':([32,],[40,]),'SIMPLE':([32,57,],[41,124,]),'LIST':([32,233,],[42,306,]),'SAVE_VAR':([43,125,134,],[47,47,178,]),'BLOCK':([45,144,235,313,367,429,],[51,185,308,364,413,442,]),'VARS_C':([46,],[53,]),'SIMPLE_A':([47,],[56,]),'VARCONSTAUX':([48,105,140,141,148,157,158,159,173,184,196,197,200,211,240,274,311,316,319,324,325,326,327,376,377,378,379,406,439,440,450,453,461,472,473,474,481,482,483,491,496,497,498,499,507,514,],[60,153,153,153,153,216,217,218,153,153,153,153,153,153,153,334,153,153,153,153,153,153,153,416,417,418,419,153,446,447,455,458,466,477,478,479,485,486,487,495,500,501,502,503,511,517,]),'METHOD_A':([50,],[63,]),'PARAMS':([50,359,],[64,402,]),'PRINTQUADS':([51,],[67,]),'BLOCK_A':([52,70,],[69,136,]),'STATEMENT':([52,70,],[70,70,]),'ASSIGNMENT':([52,70,],[72,72,]),'CONDITION':([52,70,],[73,73,]),'WRITE':([52,70,],[74,74,]),'PRE_CONDITIONAL_LOOP':([52,70,],[75,75,]),'POST_CONDITIONAL_LOOP':([52,70,],[76,76,]),'METHODCALL':([52,70,],[77,77,]),'READ':([52,70,],[78,78,]),'STATMETHODS':([52,70,],[79,79,]),'RETURN':([52,70,],[80,80,]),'ORDINARY_LEAST_SQUARES':([52,70,],[87,87,]),'LASSO':([52,70,],[88,88,]),'RIDGE':([52,70,],[89,89,]),'K_MEANS':([52,70,],[90,90,]),'MINI_BATCH_MEANS':([52,70,],[91,91,]),'TIME_SERIES_SPLIT':([52,70,],[92,92,]),'MEAN_ABSOLUTE_ERROR':([52,70,],[93,93,]),'MEAN_SQUARED_ERROR':([52,70,],[94,94,]),'MEDIAN_ABSOLUTE_ERROR':([52,70,],[95,95,]),'MEAN':([52,70,],[96,96,]),'MODE':([52,70,],[97,97,]),'MEDIAN':([52,70,],[98,98,]),'PROBABILITY':([52,70,],[99,99,]),'FREQUENCY':([52,70,],[100,100,]),'VARIANCE':([52,70,],[101,101,]),'STANDARD_DEVIATION':([52,70,],[102,102,]),'SKEWNESS':([52,70,],[103,103,]),'KURTOSI':([52,70,],[104,104,]),'PUSH_STACK_OPERANDS':([59,81,],[126,137,]),'PUSH_STACK_OPERANDS_CONSTANT':([61,62,],[129,131,]),'SAVE_COUNTER_PARAM':([63,],[132,]),'VALIDATE_FUNCTION_NAME':([81,],[138,]),'PUSH_STACK_JUMPS':([84,85,],[142,144,]),'EXPLOG':([105,140,184,196,197,211,311,319,],[146,182,244,252,253,268,361,368,]),'EXPRESSION':([105,140,141,148,184,196,197,211,311,316,319,],[147,147,183,199,147,147,147,147,147,366,147,]),'EXP':([105,140,141,148,173,184,196,197,200,211,240,311,316,319,324,325,406,],[149,149,149,149,231,149,149,149,255,149,312,149,149,149,369,370,426,]),'TERM':([105,140,141,148,173,184,196,197,200,211,240,311,316,319,324,325,326,327,406,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,371,372,150,]),'FACTOR':([105,140,141,148,173,184,196,197,200,211,240,311,316,319,324,325,326,327,406,],[151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'ISLIST':([126,137,187,],[172,179,249,]),'SAVE_ARRAY':([128,],[175,]),'ERA':([138,],[180,]),'VARCTE':([145,],[186,]),'BOOLEAN':([145,375,436,437,438,451,452,454,460,462,464,471,480,488,490,518,],[191,415,443,444,445,456,457,459,465,467,469,476,484,492,494,520,]),'EXPLOG_A':([147,199,],[195,254,]),'EXPRESSION_A':([149,],[200,]),'SOLVE_OPERATION_SUM_MINUS':([150,],[207,]),'SOLVE_OPERATION_TIMES_DIVIDE':([151,],[209,]),'PUSH_STACK_OPERATORS':([152,201,202,203,204,205,206,239,263,264,266,267,],[211,256,257,258,259,260,261,311,324,325,326,327,]),'LIST_A':([175,],[232,]),'SAVE_COUNTER_QUAD':([177,],[235,]),'SAVE_PARAM_TYPE':([178,],[237,]),'GENERATE_QUAD_PRINT':([183,366,],[242,412,]),'READ_A':([186,],[246,]),'SOLVE_OPERATION_LOGIC':([195,254,],[250,321,]),'EXP_A':([207,],[262,]),'TERM_A':([209,],[265,]),'MEAN_A':([222,339,],[278,385,]),'MODE_A':([223,341,],[281,387,]),'MEDIAN_A':([224,343,],[284,389,]),'PROBABILITY_A':([225,345,],[287,391,]),'FREQUENCY_A':([226,347,],[290,393,]),'VARIANCE_A':([227,349,],[293,395,]),'STANDARD_DEVIATION_A':([228,351,],[296,397,]),'SKEWNESS_A':([229,353,],[299,399,]),'KURTOSI_A':([230,355,],[302,401,]),'INCREMENT_PARAM_COUNTER':([237,],[309,]),'GENERATE_GOTOF_CONDITIONAL':([241,318,],[313,367,]),'WRITE_A':([242,412,],[315,431,]),'SOLVE_OPERATION_RELATIONSHIP':([255,],[322,]),'END_PROCEDURE':([308,],[356,]),'PARAMS_A':([309,],[358,]),'VALIDATE_PARAMETER':([312,],[362,]),'POP_STACK_OPERATORS':([328,],[373,]),'SOLVE_OPERATION_ASSIGNMENT':([361,],[403,]),'METHODCALL_A':([362,],[405,]),'CONDITION_A':([364,],[408,]),'SOLVE_OPERATION_CONDITIONAL':([408,],[427,]),'GENERATE_GOTO_CONDITIONAL':([409,],[429,]),'SOLVE_OPERATION_PRE_CONDITIONAL_LOOP':([413,],[432,]),'SOLVE_OPERATION_POST_CONDITIONAL_LOOP':([414,],[434,]),'VALIDATE_METHOD_CALL':([441,],[448,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> program void SAVE_TYPE globalFunc START_FUNCTION semicolon PROGRAM_A void SAVE_TYPE start START_FUNCTION BLOCK PRINTQUADS','PROGRAM',13,'p_PROGRAM','parser.py',95),
  ('PROGRAM_A -> VARS PROGRAM_A','PROGRAM_A',2,'p_PROGRAM_A','parser.py',100),
  ('PROGRAM_A -> METHOD PROGRAM_B','PROGRAM_A',2,'p_PROGRAM_A','parser.py',101),
  ('PROGRAM_A -> empty','PROGRAM_A',1,'p_PROGRAM_A','parser.py',102),
  ('PROGRAM_B -> METHOD PROGRAM_B','PROGRAM_B',2,'p_PROGRAM_B','parser.py',107),
  ('PROGRAM_B -> empty','PROGRAM_B',1,'p_PROGRAM_B','parser.py',108),
  ('VARS -> var VARS_A','VARS',2,'p_VARS','parser.py',113),
  ('VARS_A -> TYPE colon VARS_B semicolon VARS_C','VARS_A',5,'p_VARS_A','parser.py',118),
  ('VARS_B -> SIMPLE','VARS_B',1,'p_VARS_B','parser.py',123),
  ('VARS_B -> LIST','VARS_B',1,'p_VARS_B','parser.py',124),
  ('VARS_C -> VARS_A','VARS_C',1,'p_VARS_C','parser.py',129),
  ('VARS_C -> empty','VARS_C',1,'p_VARS_C','parser.py',130),
  ('SIMPLE -> id SAVE_VAR SIMPLE_A','SIMPLE',3,'p_SIMPLE','parser.py',135),
  ('SIMPLE_A -> comma SIMPLE','SIMPLE_A',2,'p_SIMPLE_A','parser.py',140),
  ('SIMPLE_A -> empty','SIMPLE_A',1,'p_SIMPLE_A','parser.py',141),
  ('LIST -> id lSqrBracket VARCONSTAUX rSqrBracket SAVE_ARRAY LIST_A','LIST',6,'p_LIST','parser.py',146),
  ('LIST_A -> comma LIST','LIST_A',2,'p_LIST_A','parser.py',151),
  ('LIST_A -> empty','LIST_A',1,'p_LIST_A','parser.py',152),
  ('EXPLOG -> EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',3,'p_EXPLOG','parser.py',157),
  ('EXPLOG -> not EXPRESSION EXPLOG_A SOLVE_OPERATION_LOGIC','EXPLOG',4,'p_EXPLOG','parser.py',158),
  ('EXPLOG_A -> and EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',164),
  ('EXPLOG_A -> or EXPLOG','EXPLOG_A',2,'p_EXPLOG_A','parser.py',165),
  ('EXPLOG_A -> empty','EXPLOG_A',1,'p_EXPLOG_A','parser.py',166),
  ('EXPRESSION -> EXP','EXPRESSION',1,'p_EXPRESSION','parser.py',172),
  ('EXPRESSION -> EXP EXPRESSION_A EXP SOLVE_OPERATION_RELATIONSHIP','EXPRESSION',4,'p_EXPRESSION','parser.py',173),
  ('EXPRESSION_A -> greater PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',179),
  ('EXPRESSION_A -> lessThan PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',180),
  ('EXPRESSION_A -> greaterEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',181),
  ('EXPRESSION_A -> lessThanEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',182),
  ('EXPRESSION_A -> equals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',183),
  ('EXPRESSION_A -> notEquals PUSH_STACK_OPERATORS','EXPRESSION_A',2,'p_EXPRESSION_A','parser.py',184),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS','EXP',2,'p_EXP','parser.py',189),
  ('EXP -> TERM SOLVE_OPERATION_SUM_MINUS EXP_A','EXP',3,'p_EXP','parser.py',190),
  ('EXP_A -> plus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',196),
  ('EXP_A -> minus PUSH_STACK_OPERATORS EXP','EXP_A',3,'p_EXP_A','parser.py',197),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE','TERM',2,'p_TERM','parser.py',203),
  ('TERM -> FACTOR SOLVE_OPERATION_TIMES_DIVIDE TERM_A','TERM',3,'p_TERM','parser.py',204),
  ('TERM_A -> times PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',210),
  ('TERM_A -> divide PUSH_STACK_OPERATORS TERM','TERM_A',3,'p_TERM_A','parser.py',211),
  ('FACTOR -> lParenthesis PUSH_STACK_OPERATORS EXPLOG rParenthesis POP_STACK_OPERATORS','FACTOR',5,'p_FACTOR','parser.py',217),
  ('FACTOR -> VARCONSTAUX','FACTOR',1,'p_FACTOR','parser.py',218),
  ('VARCONSTAUX -> id PUSH_STACK_OPERANDS ISLIST','VARCONSTAUX',3,'p_VARCONSTAUX','parser.py',225),
  ('VARCONSTAUX -> cte_i PUSH_STACK_OPERANDS_CONSTANT','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',226),
  ('VARCONSTAUX -> cte_f PUSH_STACK_OPERANDS_CONSTANT','VARCONSTAUX',2,'p_VARCONSTAUX','parser.py',227),
  ('TYPE -> int SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',233),
  ('TYPE -> float SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',234),
  ('TYPE -> string SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',235),
  ('TYPE -> bool SAVE_TYPE','TYPE',2,'p_TYPE','parser.py',236),
  ('BLOCK -> lCurlyBracket BLOCK_A rCurlyBracket','BLOCK',3,'p_BLOCK','parser.py',241),
  ('BLOCK_A -> STATEMENT BLOCK_A','BLOCK_A',2,'p_BLOCK_A','parser.py',246),
  ('BLOCK_A -> empty','BLOCK_A',1,'p_BLOCK_A','parser.py',247),
  ('STATEMENT -> ASSIGNMENT','STATEMENT',1,'p_STATEMENT','parser.py',252),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',253),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',254),
  ('STATEMENT -> PRE_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',255),
  ('STATEMENT -> POST_CONDITIONAL_LOOP','STATEMENT',1,'p_STATEMENT','parser.py',256),
  ('STATEMENT -> METHODCALL','STATEMENT',1,'p_STATEMENT','parser.py',257),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',258),
  ('STATEMENT -> STATMETHODS','STATEMENT',1,'p_STATEMENT','parser.py',259),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',260),
  ('ASSIGNMENT -> id PUSH_STACK_OPERANDS ISLIST assign PUSH_STACK_OPERATORS EXPLOG SOLVE_OPERATION_ASSIGNMENT semicolon','ASSIGNMENT',8,'p_ASSIGNMENT','parser.py',265),
  ('READ -> scan lParenthesis VARCTE READ_A rParenthesis','READ',5,'p_READ','parser.py',270),
  ('READ_A -> comma','READ_A',1,'p_READ_A','parser.py',275),
  ('READ_A -> empty','READ_A',1,'p_READ_A','parser.py',276),
  ('ISLIST -> lSqrBracket EXP rSqrBracket','ISLIST',3,'p_ISLIST','parser.py',281),
  ('ISLIST -> empty','ISLIST',1,'p_ISLIST','parser.py',282),
  ('TYPEMETHOD -> TYPE','TYPEMETHOD',1,'p_TYPEMETHOD','parser.py',287),
  ('TYPEMETHOD -> void SAVE_TYPE','TYPEMETHOD',2,'p_TYPEMETHOD','parser.py',288),
  ('CONDITION -> if lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK CONDITION_A SOLVE_OPERATION_CONDITIONAL','CONDITION',8,'p_CONDITION','parser.py',293),
  ('CONDITION_A -> else GENERATE_GOTO_CONDITIONAL BLOCK','CONDITION_A',3,'p_CONDITION_A','parser.py',298),
  ('CONDITION_A -> empty','CONDITION_A',1,'p_CONDITION_A','parser.py',299),
  ('WRITE -> print lParenthesis EXPRESSION GENERATE_QUAD_PRINT WRITE_A rParenthesis semicolon','WRITE',7,'p_WRITE','parser.py',304),
  ('WRITE_A -> comma EXPRESSION GENERATE_QUAD_PRINT WRITE_A','WRITE_A',4,'p_WRITE_A','parser.py',309),
  ('WRITE_A -> empty','WRITE_A',1,'p_WRITE_A','parser.py',310),
  ('VARCTE -> id ISLIST','VARCTE',2,'p_VARCTE','parser.py',315),
  ('VARCTE -> cte_i','VARCTE',1,'p_VARCTE','parser.py',316),
  ('VARCTE -> cte_f','VARCTE',1,'p_VARCTE','parser.py',317),
  ('VARCTE -> cte_str','VARCTE',1,'p_VARCTE','parser.py',318),
  ('VARCTE -> BOOLEAN','VARCTE',1,'p_VARCTE','parser.py',319),
  ('METHOD -> func TYPEMETHOD id START_FUNCTION lParenthesis METHOD_A SAVE_COUNTER_PARAM rParenthesis SAVE_COUNTER_QUAD BLOCK END_PROCEDURE','METHOD',11,'p_METHOD','parser.py',324),
  ('METHOD_A -> PARAMS','METHOD_A',1,'p_METHOD_A','parser.py',329),
  ('METHOD_A -> empty','METHOD_A',1,'p_METHOD_A','parser.py',330),
  ('PARAMS -> TYPE id SAVE_VAR SAVE_PARAM_TYPE INCREMENT_PARAM_COUNTER PARAMS_A','PARAMS',6,'p_PARAMS','parser.py',335),
  ('PARAMS_A -> comma PARAMS','PARAMS_A',2,'p_PARAMS_A','parser.py',340),
  ('PARAMS_A -> empty','PARAMS_A',1,'p_PARAMS_A','parser.py',341),
  ('PRE_CONDITIONAL_LOOP -> while PUSH_STACK_JUMPS lParenthesis EXPLOG rParenthesis GENERATE_GOTOF_CONDITIONAL BLOCK SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','PRE_CONDITIONAL_LOOP',8,'p_PRE_CONDITIONAL_LOOP','parser.py',346),
  ('POST_CONDITIONAL_LOOP -> do PUSH_STACK_JUMPS BLOCK while lParenthesis EXPLOG rParenthesis SOLVE_OPERATION_POST_CONDITIONAL_LOOP','POST_CONDITIONAL_LOOP',8,'p_POST_CONDITIONAL_LOOP','parser.py',351),
  ('METHODCALL -> id VALIDATE_FUNCTION_NAME ERA lParenthesis EXP VALIDATE_PARAMETER METHODCALL_A rParenthesis semicolon VALIDATE_METHOD_CALL','METHODCALL',10,'p_METHODCALL','parser.py',356),
  ('METHODCALL_A -> comma EXP','METHODCALL_A',2,'p_METHODCALL_A','parser.py',361),
  ('METHODCALL_A -> empty','METHODCALL_A',1,'p_METHODCALL_A','parser.py',362),
  ('RETURN -> return EXPLOG semicolon','RETURN',3,'p_RETURN','parser.py',367),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_BOOLEAN','parser.py',372),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_BOOLEAN','parser.py',373),
  ('STATMETHODS -> ORDINARY_LEAST_SQUARES','STATMETHODS',1,'p_STATMETHODS','parser.py',378),
  ('STATMETHODS -> LASSO','STATMETHODS',1,'p_STATMETHODS','parser.py',379),
  ('STATMETHODS -> RIDGE','STATMETHODS',1,'p_STATMETHODS','parser.py',380),
  ('STATMETHODS -> K_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',381),
  ('STATMETHODS -> MINI_BATCH_MEANS','STATMETHODS',1,'p_STATMETHODS','parser.py',382),
  ('STATMETHODS -> TIME_SERIES_SPLIT','STATMETHODS',1,'p_STATMETHODS','parser.py',383),
  ('STATMETHODS -> MEAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',384),
  ('STATMETHODS -> MEAN_SQUARED_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',385),
  ('STATMETHODS -> MEDIAN_ABSOLUTE_ERROR','STATMETHODS',1,'p_STATMETHODS','parser.py',386),
  ('STATMETHODS -> MEAN','STATMETHODS',1,'p_STATMETHODS','parser.py',387),
  ('STATMETHODS -> MODE','STATMETHODS',1,'p_STATMETHODS','parser.py',388),
  ('STATMETHODS -> MEDIAN','STATMETHODS',1,'p_STATMETHODS','parser.py',389),
  ('STATMETHODS -> PROBABILITY','STATMETHODS',1,'p_STATMETHODS','parser.py',390),
  ('STATMETHODS -> FREQUENCY','STATMETHODS',1,'p_STATMETHODS','parser.py',391),
  ('STATMETHODS -> VARIANCE','STATMETHODS',1,'p_STATMETHODS','parser.py',392),
  ('STATMETHODS -> STANDARD_DEVIATION','STATMETHODS',1,'p_STATMETHODS','parser.py',393),
  ('STATMETHODS -> SKEWNESS','STATMETHODS',1,'p_STATMETHODS','parser.py',394),
  ('STATMETHODS -> KURTOSI','STATMETHODS',1,'p_STATMETHODS','parser.py',395),
  ('ORDINARY_LEAST_SQUARES -> ols lParenthesis id comma id comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN rParenthesis semicolon','ORDINARY_LEAST_SQUARES',15,'p_ORDINARY_LEAST_SQUARES','parser.py',400),
  ('LASSO -> las lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma string comma float comma BOOLEAN rParenthesis semicolon','LASSO',29,'p_LASSO','parser.py',405),
  ('RIDGE -> rid lParenthesis id comma id comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX rParenthesis semicolon','RIDGE',23,'p_RIDGE','parser.py',410),
  ('K_MEANS -> kmeans lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma VARCONSTAUX comma string rParenthesis semicolon','K_MEANS',25,'p_K_MEANS','parser.py',415),
  ('MINI_BATCH_MEANS -> mbm lParenthesis VARCONSTAUX comma string comma VARCONSTAUX comma VARCONSTAUX comma BOOLEAN comma BOOLEAN comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','MINI_BATCH_MEANS',27,'p_MINI_BATCH_MEANS','parser.py',420),
  ('TIME_SERIES_SPLIT -> tseries lParenthesis VARCONSTAUX comma VARCONSTAUX rParenthesis semicolon','TIME_SERIES_SPLIT',7,'p_TIME_SERIES_SPLIT','parser.py',425),
  ('MEAN_ABSOLUTE_ERROR -> mean_abs_err lParenthesis id comma id rParenthesis semicolon','MEAN_ABSOLUTE_ERROR',7,'p_MEAN_ABSOLUTE_ERROR','parser.py',430),
  ('MEAN_SQUARED_ERROR -> mean_sqr_err lParenthesis id comma id rParenthesis semicolon','MEAN_SQUARED_ERROR',7,'p_MEAN_SQUARED_ERROR','parser.py',435),
  ('MEDIAN_ABSOLUTE_ERROR -> median_abs_err lParenthesis id comma id rParenthesis semicolon','MEDIAN_ABSOLUTE_ERROR',7,'p_MEDIAN_ABSOLUTE_ERROR','parser.py',440),
  ('MEAN -> mean lParenthesis id MEAN_A rParenthesis semicolon','MEAN',6,'p_MEAN','parser.py',445),
  ('MEAN_A -> comma id MEAN_A','MEAN_A',3,'p_MEAN_A','parser.py',450),
  ('MEAN_A -> empty','MEAN_A',1,'p_MEAN_A','parser.py',451),
  ('MODE -> mode lParenthesis id MODE_A rParenthesis semicolon','MODE',6,'p_MODE','parser.py',456),
  ('MODE_A -> comma id MODE_A','MODE_A',3,'p_MODE_A','parser.py',461),
  ('MODE_A -> empty','MODE_A',1,'p_MODE_A','parser.py',462),
  ('MEDIAN -> median lParenthesis id MEDIAN_A rParenthesis semicolon','MEDIAN',6,'p_MEDIAN','parser.py',467),
  ('MEDIAN_A -> comma id MEDIAN_A','MEDIAN_A',3,'p_MEDIAN_A','parser.py',472),
  ('MEDIAN_A -> empty','MEDIAN_A',1,'p_MEDIAN_A','parser.py',473),
  ('PROBABILITY -> prob lParenthesis id PROBABILITY_A rParenthesis semicolon','PROBABILITY',6,'p_PROBABILITY','parser.py',478),
  ('PROBABILITY_A -> comma id PROBABILITY_A','PROBABILITY_A',3,'p_PROBABILITY_A','parser.py',483),
  ('PROBABILITY_A -> empty','PROBABILITY_A',1,'p_PROBABILITY_A','parser.py',484),
  ('FREQUENCY -> freq lParenthesis id FREQUENCY_A rParenthesis semicolon','FREQUENCY',6,'p_FREQUENCY','parser.py',489),
  ('FREQUENCY_A -> comma id FREQUENCY_A','FREQUENCY_A',3,'p_FREQUENCY_A','parser.py',494),
  ('FREQUENCY_A -> empty','FREQUENCY_A',1,'p_FREQUENCY_A','parser.py',495),
  ('VARIANCE -> variance lParenthesis id VARIANCE_A rParenthesis semicolon','VARIANCE',6,'p_VARIANCE','parser.py',500),
  ('VARIANCE_A -> comma id VARIANCE_A','VARIANCE_A',3,'p_VARIANCE_A','parser.py',505),
  ('VARIANCE_A -> empty','VARIANCE_A',1,'p_VARIANCE_A','parser.py',506),
  ('STANDARD_DEVIATION -> stddev lParenthesis id STANDARD_DEVIATION_A rParenthesis semicolon','STANDARD_DEVIATION',6,'p_STANDARD_DEVIATION','parser.py',511),
  ('STANDARD_DEVIATION_A -> comma id STANDARD_DEVIATION_A','STANDARD_DEVIATION_A',3,'p_STANDARD_DEVIATION_A','parser.py',516),
  ('STANDARD_DEVIATION_A -> empty','STANDARD_DEVIATION_A',1,'p_STANDARD_DEVIATION_A','parser.py',517),
  ('SKEWNESS -> skew lParenthesis id SKEWNESS_A rParenthesis semicolon','SKEWNESS',6,'p_SKEWNESS','parser.py',522),
  ('SKEWNESS_A -> comma id SKEWNESS_A','SKEWNESS_A',3,'p_SKEWNESS_A','parser.py',527),
  ('SKEWNESS_A -> empty','SKEWNESS_A',1,'p_SKEWNESS_A','parser.py',528),
  ('KURTOSI -> kurt lParenthesis id KURTOSI_A rParenthesis semicolon','KURTOSI',6,'p_KURTOSI','parser.py',533),
  ('KURTOSI_A -> comma id KURTOSI_A','KURTOSI_A',3,'p_KURTOSI_A','parser.py',538),
  ('KURTOSI_A -> empty','KURTOSI_A',1,'p_KURTOSI_A','parser.py',539),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',544),
  ('START_FUNCTION -> empty','START_FUNCTION',1,'p_START_FUNCTION','parser.py',582),
  ('SAVE_TYPE -> empty','SAVE_TYPE',1,'p_SAVE_TYPE','parser.py',599),
  ('SAVE_VAR -> empty','SAVE_VAR',1,'p_SAVE_VAR','parser.py',610),
  ('SAVE_ARRAY -> empty','SAVE_ARRAY',1,'p_SAVE_ARRAY','parser.py',640),
  ('INCREMENT_PARAM_COUNTER -> empty','INCREMENT_PARAM_COUNTER',1,'p_INCREMENT_PARAM_COUNTER','parser.py',662),
  ('SAVE_COUNTER_PARAM -> empty','SAVE_COUNTER_PARAM',1,'p_SAVE_COUNTER_PARAM','parser.py',673),
  ('SAVE_COUNTER_QUAD -> empty','SAVE_COUNTER_QUAD',1,'p_SAVE_COUNTER_QUAD','parser.py',685),
  ('END_PROCEDURE -> empty','END_PROCEDURE',1,'p_END_PROCEDURE','parser.py',699),
  ('SAVE_PARAM_TYPE -> empty','SAVE_PARAM_TYPE',1,'p_SAVE_PARAM_TYPE','parser.py',714),
  ('VALIDATE_FUNCTION_NAME -> empty','VALIDATE_FUNCTION_NAME',1,'p_VALIDATE_FUNCTION_NAME','parser.py',726),
  ('ERA -> empty','ERA',1,'p_ERA','parser.py',738),
  ('VALIDATE_PARAMETER -> empty','VALIDATE_PARAMETER',1,'p_VALIDATE_PARAMETER','parser.py',760),
  ('VALIDATE_METHOD_CALL -> empty','VALIDATE_METHOD_CALL',1,'p_VALIDATE_METHOD_CALL','parser.py',785),
  ('PUSH_STACK_OPERANDS -> empty','PUSH_STACK_OPERANDS',1,'p_PUSH_STACK_OPERANDS','parser.py',812),
  ('PUSH_STACK_OPERANDS_CONSTANT -> empty','PUSH_STACK_OPERANDS_CONSTANT',1,'p_PUSH_STACK_OPERANDS_CONSTANT','parser.py',842),
  ('PUSH_STACK_OPERATORS -> empty','PUSH_STACK_OPERATORS',1,'p_PUSH_STACK_OPERATORS','parser.py',871),
  ('POP_STACK_OPERATORS -> empty','POP_STACK_OPERATORS',1,'p_POP_STACK_OPERATORS','parser.py',882),
  ('SOLVE_OPERATION_SUM_MINUS -> empty','SOLVE_OPERATION_SUM_MINUS',1,'p_SOLVE_OPERATION_SUM_MINUS','parser.py',963),
  ('SOLVE_OPERATION_TIMES_DIVIDE -> empty','SOLVE_OPERATION_TIMES_DIVIDE',1,'p_SOLVE_OPERATION_TIMES_DIVIDE','parser.py',977),
  ('SOLVE_OPERATION_RELATIONSHIP -> empty','SOLVE_OPERATION_RELATIONSHIP',1,'p_SOLVE_OPERATION_RELATIONSHIP','parser.py',991),
  ('SOLVE_OPERATION_LOGIC -> empty','SOLVE_OPERATION_LOGIC',1,'p_SOLVE_OPERATION_LOGIC','parser.py',1004),
  ('SOLVE_OPERATION_ASSIGNMENT -> empty','SOLVE_OPERATION_ASSIGNMENT',1,'p_SOLVE_OPERATION_ASSIGNMENT','parser.py',1050),
  ('GENERATE_GOTOF_CONDITIONAL -> empty','GENERATE_GOTOF_CONDITIONAL',1,'p_GENERATE_GOTOF_CONDITIONAL','parser.py',1076),
  ('SOLVE_OPERATION_CONDITIONAL -> empty','SOLVE_OPERATION_CONDITIONAL',1,'p_SOLVE_OPERATION_CONDITIONAL','parser.py',1105),
  ('GENERATE_GOTO_CONDITIONAL -> empty','GENERATE_GOTO_CONDITIONAL',1,'p_GENERATE_GOTO_CONDITIONAL','parser.py',1116),
  ('PUSH_STACK_JUMPS -> empty','PUSH_STACK_JUMPS',1,'p_PUSH_STACK_JUMPS','parser.py',1137),
  ('SOLVE_OPERATION_PRE_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_PRE_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_PRE_CONDITIONAL_LOOP','parser.py',1153),
  ('SOLVE_OPERATION_POST_CONDITIONAL_LOOP -> empty','SOLVE_OPERATION_POST_CONDITIONAL_LOOP',1,'p_SOLVE_OPERATION_POST_CONDITIONAL_LOOP','parser.py',1180),
  ('GENERATE_QUAD_PRINT -> empty','GENERATE_QUAD_PRINT',1,'p_GENERATE_QUAD_PRINT','parser.py',1203),
  ('PRINTQUADS -> empty','PRINTQUADS',1,'p_PRINTQUADS','parser.py',1220),
]
